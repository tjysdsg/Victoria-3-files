# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

@queue_item_width = 540
@queue_item_height = 40

types construction_queue {
	type construction_queue = flowcontainer {
		using = default_list_position
		direction = vertical
		minimumsize = { @panel_width -1 }
		margin_bottom = 10

		flowcontainer = {
			parentanchor = hcenter
			direction = vertical

			background = {
				using = dark_area
			}

			background = {
				using = fade_right_entry_header_colored
				color = "[GetDefine('NGUI','BUILDING_OWNERSHIP_COLOR_PLAYER_POPS')]"
				margin_left = 2
				margin_right = 2
				margin_bottom = -1
			}

			background = {
				using = fade_right_entry_header_colored
				color = "[GetDefine('NGUI','BUILDING_OWNERSHIP_COLOR_PLAYER_POPS')]"
				margin_left = 2
				margin_right = 2
				margin_bottom = -1
				mirror = horizontal
			}

			divider_clean = {}

			textbox = {
				parentanchor = hcenter
				minimumsize = { @panel_width_plus_14 -1 }
				maximumsize = { @panel_width_plus_14 -1 }
				margin_top = 10
				margin_bottom = 10
				align = hcenter|nobaseline
				autoresize = yes
				using = fontsize_large
				using = investment_pool_tooltip_with_graph
				text = "CURRENT_INVESTMENT_POOL"
			}

			divider_decorative = {}

			textbox = {
				visible = "[GetPlayer.ShowInvestmentPoolPredictedNextBuilding]"
				parentanchor = hcenter
				minimumsize = { @panel_width_plus_14 -1 }
				maximumsize = { @panel_width_plus_14 -1 }
				margin_top = 10
				margin_bottom = 10
				autoresize = yes
				multiline = yes
				align = center|nobaseline
				tooltip = "[GetPlayer.GetPreviousAutonomousInvestmentsDesc]"
				text = "NEXT_PRIVATE_CONSTRUCTION"

				background = {
					using = dark_area
					margin_top = 2
				}
			}

			divider_clean = {}
		}

		default_header_2texts = {
			blockoverride "text1" {
				block "text" {
					text = "CONSTRUCTION_QUEUE"
				}
			}
			blockoverride "text2" {
				block "text" {
					visible = "[And(Country.HasConstructionQueued, Not(Country.IsConstructionPaused))]"
					text = "QUEUE_CONSTRUCTION_POINTS_SUMMARY"
					tooltip = "QUEUE_CONSTRUCTION_POINTS_SUMMARY_TOOLTIP"
				}
			}
		}

		## FILTERS

		flowcontainer = {
			direction = vertical

			section_header_button = {
				blockoverride "left_text" {
					text = "FILTERS"
					fontsize_min = 12
					elide = right
				}

				blockoverride "right_text" {
					section_header_right_text = {
						text = "CONSTRUCTION_QUEUE_FILTER_SUMMARY"
					}
				}

				blockoverride "onclick" {
					onclick = "[GetVariableSystem.Toggle( 'construction_queue_filters' )]"
				}

				blockoverride "onclick_showmore" {
					visible = "[Not(GetVariableSystem.Exists( 'construction_queue_filters' ))]"
				}

				blockoverride "onclick_showless" {
					visible = "[GetVariableSystem.Exists( 'construction_queue_filters' )]"
				}
			}

			flowcontainer = {
				visible = "[GetVariableSystem.Exists( 'construction_queue_filters' )]"
				minimumsize = { @panel_width_plus_14 -1 }
				parentanchor = hcenter
				spacing = 10
				margin_bottom = 10

				background = {
					using = dark_area
				}

				flowcontainer = {
					direction = vertical

					textbox = {
						multiline = yes
						size = { 95 60 }
						text = "LOCATION"
						align = right|nobaseline
						margin_right = 10
						margin_left = 10
						fontsize_min = 14
						elide = right
					}

					textbox = {
						size = { 95 60 }
						text = "CONSTRUCTION_QUEUE_FILTER_FUNDING"
						align = right|nobaseline
						margin_right = 10
						margin_left = 10
						fontsize_min = 14
						elide = right
					}
				}

				vertical_divider = {}

				flowcontainer = {
					direction = vertical
					margin_top = 10
					spacing = 20
					margin_left = 10

					flowcontainer = {
						spacing = 5

						filter_button = {
							visible = "[ConstructionPanel.IsFiltered('is_domestic')]"
							size = { 132 40 }

							tooltip = "LOCATION_FILTER_ALL"
							using = tooltip_above

							blockoverride "text" {
								text = "ALL"
							}

							blockoverride "onclick" {
								onclick = "[ConstructionPanel.SetFilterMode('is_domestic', 'off')]"
							}
						}

						filter_background_selected = {
							visible = "[Not(ConstructionPanel.IsFiltered('is_domestic'))]"
							size = { 132 40 }

							blockoverride "text" {
								text = "ALL"
							}
						}

						filter_button = {
							visible = "[Not(ConstructionPanel.IsFilterYes('is_domestic'))]"
							size = { 132 40 }

							tooltip = "LOCATION_FILTER_DOMESTIC"
							using = tooltip_above

							blockoverride "text" {
								text = "DOMESTIC"
							}

							blockoverride "onclick" {
								onclick = "[ConstructionPanel.SetFilterMode('is_domestic', 'yes')]"
							}
						}

						filter_background_selected = {
							visible = "[ConstructionPanel.IsFilterYes('is_domestic')]"
							size = { 132 40 }

							blockoverride "text" {
								text = "DOMESTIC"
							}
						}

						filter_button = {
							visible = "[Not(ConstructionPanel.IsFilterNo('is_domestic'))]"
							size = { 132 40 }

							tooltip = "LOCATION_FILTER_ABROAD"
							using = tooltip_above

							blockoverride "text" {
								text = "ABROAD"
							}

							blockoverride "onclick" {
								onclick = "[ConstructionPanel.SetFilterMode('is_domestic', 'no')]"
							}
						}

						filter_background_selected = {
							visible = "[ConstructionPanel.IsFilterNo('is_domestic')]"

							size = { 132 40 }

							blockoverride "text" {
								text = "ABROAD"
							}
						}
					}

					flowcontainer = {
						spacing = 5

						filter_button = {
						
							blockoverride "text" {
								text = "CONSTRUCTION_QUEUE_FILTER_FUNDING_NATIONAL"
							}

							tooltip = "CONSTRUCTION_QUEUE_FILTER_FUNDING_NATIONAL_TT"

							visible = "[Not(ConstructionPanel.IsShowingGovernmentConstructions)]"

							blockoverride "onclick" {
								onclick = "[ConstructionPanel.ShowGovernmentConstructions]"
							}
						}

						filter_background_selected = {
							visible = "[ConstructionPanel.IsShowingGovernmentConstructions]"

							blockoverride "text" {
								text = "CONSTRUCTION_QUEUE_FILTER_FUNDING_NATIONAL"
							}

							tooltip = "CONSTRUCTION_QUEUE_FILTER_FUNDING_NATIONAL_TT"
						}

						filter_button = {

							blockoverride "text" {
								text = "CONSTRUCTION_QUEUE_FILTER_FUNDING_PRIVATE"
							}

							tooltip = "CONSTRUCTION_QUEUE_FILTER_FUNDING_PRIVATE_TT"

							visible = "[Not(ConstructionPanel.IsShowingPrivateConstructions)]"

							blockoverride "onclick" {
								onclick = "[ConstructionPanel.ShowPrivateConstructions]"
							}
						}

						filter_background_selected = {
							visible = "[ConstructionPanel.IsShowingPrivateConstructions]"

							blockoverride "text" {
								text = "CONSTRUCTION_QUEUE_FILTER_FUNDING_PRIVATE"
							}

							tooltip = "CONSTRUCTION_QUEUE_FILTER_FUNDING_PRIVATE_TT"
						}
					}
				}
			}

			widget = {
				visible = "[GetVariableSystem.Exists( 'construction_queue_filters' )]"
				size = { 5 5 }
			}
		}		
		
		# PRIVATE CONSTRUCTION QUEUE	

		fixedgridbox = {
			datamodel = "[Country.AccessPagedPrivateConstructionQueue(ConstructionPanel.AccessCurrentPrivateConstructionQueuePage(GetMetaPlayer.GetPlayedOrObservedCountry), ConstructionPanel.GetFilter)]"
			visible = "[And(ConstructionPanel.IsShowingPrivateConstructions, Not(IsDataModelEmpty(Country.AccessPagedPrivateConstructionQueue(ConstructionPanel.AccessCurrentPrivateConstructionQueuePage(GetMetaPlayer.GetPlayedOrObservedCountry), ConstructionPanel.GetFilter))))]"

			addcolumn = @queue_item_width
			addrow = @queue_item_height

			parentanchor = hcenter

			item = {
				construction_queue_item = {
				}
			}
		}			

		# GOVERNMENT CONSTRUCTION QUEUE	

		fixedgridbox = {
			datamodel = "[Country.AccessPagedGovernmentConstructionQueue(ConstructionPanel.AccessCurrentGovernmentConstructionQueuePage(GetMetaPlayer.GetPlayedOrObservedCountry), ConstructionPanel.GetFilter)]"
			visible = "[And(ConstructionPanel.IsShowingGovernmentConstructions, Not(IsDataModelEmpty(Country.AccessPagedGovernmentConstructionQueue(ConstructionPanel.AccessCurrentGovernmentConstructionQueuePage(GetMetaPlayer.GetPlayedOrObservedCountry), ConstructionPanel.GetFilter))))]"

			addcolumn = @queue_item_width
			addrow = @queue_item_height

			parentanchor = hcenter

			item = {
				construction_queue_item = {}
			}
		}		

		empty_state = {
			blockoverride "visible" {
				visible = "[Not(Country.HasConstructionQueued)]"
			}
			blockoverride "text" {
				text = "CONSTRUCTION_QUEUE_IS_EMPTY"
			}
		}
	}

	type construction_queue_item = widget {
		size = { @queue_item_width @queue_item_height }

		datacontext = "[ConstructionQueueElement.GetBuilding]"

		# player government construction
		background = {
			using = visible_if_cqe_player_government
			using = fade_right_entry_header_colored
			color = "[GetDefine('NGUI','BUILDING_OWNERSHIP_COLOR_PLAYER_GOVERNMENT')]"
		}

		# player private construction
		background = {
			visible = "[And( ConstructionQueueElement.GetInvestorCountry.IsLocalPlayer, ConstructionQueueElement.IsPrivatelyFundedConstruction)]"
			using = fade_right_entry_header_colored
			color = "[GetDefine('NGUI','BUILDING_OWNERSHIP_COLOR_PLAYER_POPS')]"
		}

		# foreign bg
		background = {
			visible = "[Not(ConstructionQueueElement.GetInvestorCountry.IsLocalPlayer)]"
			using = fade_right_entry_header_colored
			color = "[GetDefine('NGUI','BUILDING_OWNERSHIP_COLOR_OTHER_COUNTRIES')]"
		}

		

		alwaystransparent = no
		# Map Highlight
		onmousehierarchyenter = "[AccessHighlightManager.HighlightState(ConstructionQueueElement.GetState)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

		# Show more UI elements
		onmousehierarchyenter = "[PdxGuiWidget.FindChild('building_goto').InterruptThenTriggerAnimation('hide_building_goto','show_building_goto')]"
		onmousehierarchyleave = "[PdxGuiWidget.FindChild('building_goto').InterruptThenTriggerAnimation('show_building_goto','hide_building_goto')]"

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			spacing = 5

			textbox = { 
				name = "place_in_queue"
				autoresize = yes
				align = right|nobaseline
				raw_text = "##[ConstructionQueueElement.GetQueueNumber]"
				min_width = 25
			}

			construction_queue_goto_building = {
				name = "constructed_building"
				datacontext = "[ConstructionQueueElement.AccessBuilding]"

				tooltip = "GO_TO_BUTTON_BUILDING"
			}

			margin_widget = {
				name = "progress_and_name"

				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 0 8 }

				

				margin_widget = {
					size = { 100% 100% }
					margin_right = 4 #the default progressbar leaks out to the right by 4 pixels...

					default_progressbar_horizontal = {
						datacontext = "[ConstructionQueueElement.GetBuilding]"
						
						blockoverride "values" {
							value = "[ConstructionQueueElement.CalcPercentComplete]"
							min = 0 
							max = 1 
						}
						tooltip = "[ConstructionQueueElement.GetTooltip]"

						size = { 100% 100% }

						construction_queue_item_texts = {
							visible = "[GreaterThanOrEqualTo_CFixedPoint(ConstructionQueueElement.GetBuilding.GetState.GetConstructionEfficiency, '(CFixedPoint)0')]"
						}
						construction_queue_item_texts = {
							visible = "[LessThan_CFixedPoint(ConstructionQueueElement.GetBuilding.GetState.GetConstructionEfficiency, '(CFixedPoint)0')]"
							blockoverride "default_format" {
								default_format = "#n"
							}
						}
					}

					background = {
						visible = "[GreaterThan_CFixedPoint(ConstructionQueueElement.GetConstructionSpeed, '(CFixedPoint)0')]"
						using = paper_bg
						margin_right = -4
					}
				}
								
				flowcontainer = {
					position = { 8 0 }
					parentanchor = vcenter
					spacing = 8
					
					textbox = {
						autoresize = yes
						align = left|nobaseline
						parentanchor = vcenter
						max_width = 200
						elide = right
						fontsize_min = 14
						text = "CONSTRUCTION_QUEUE_BUILDING_IN_STATE"
					}

					button_icon_goto = {
						parentanchor = vcenter
						alpha = 0
						name = building_goto

						state = {
							name = show_building_goto
							delay = 0.15
							alpha = 1
							duration = 0.15
							using = Animation_Curve_Default
						}
						state = {
							name = hide_building_goto
							alpha = 0
							duration = 0
							using = Animation_Curve_Default
						}

						size = { 25 25 }
						onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(ConstructionQueueElement.AccessBuilding)]"
						tooltip = "GO_TO_BUTTON_BUILDING"
					}
				}

				textbox = {
					position = { -8 0 }
					autoresize = yes
					align = right|nobaseline
					parentanchor = vcenter|right
					visible = "[Not(ConstructionQueueElement.IsValidConstruction)]"
					raw_text = "@red_cross!"
					tooltip = "[ConstructionQueueElement.GetTooltip]"
				}
			}

			### PRIVATE CONSTRUCTION

			widget = {
				name = "private_construction_parent"
				using = visible_if_cqe_private
				size = { 35 35 }


				# The investor building does exist
				construction_queue_goto_building = {
					name = "private_investor_building_actual"
					visible = "[ConstructionQueueElement.GetInvestorBuilding.IsValid]"
					datacontext = "[ConstructionQueueElement.GetInvestorBuilding]"

					using = tooltip_es
					tooltipwidget = {
						FancyTooltip_Building = {
							blockoverride "text_before" {
								text =  "CONSTRUCTION_QUEUE_PRIVATE_INVESTMENT_TT"
								margin_bottom = 15
							}
						}
					}
				}

				# The investor building will be created when construction finishes
				icon = {
					datacontext = "[ConstructionQueueElement.GetInvestorBuildingType]"
					datacontext = "[ConstructionQueueElement.GetInvestorState]"

					size = { 35 35 }
					visible = "[Not(ConstructionQueueElement.GetInvestorBuilding.IsValid)]"
					texture = "[BuildingType.GetIcon]"
					using = tooltip_es
					tooltip = CONSTRUCTION_QUEUE_PRIVATE_INVESTMENT_VIRTUAL_BUILDING_TT
				}

				# Private Investment Icon
				icon = {
					texture = "gfx/interface/icons/generic_icons/privately_owned_building_icon.dds"
					size = { 25 25 }
					parentanchor = bottom|right
					position = { 5 5 }
					alwaystransparent = yes
				}
			}

			

			### FOREIGN GOVERNMENT CONSTRUCTION

			icon = {   
				name = "foreign_government_construction"
				texture = "gfx/interface/icons/generic_icons/government_building_icon.dds"
				size = { 35 35 }
				using = visible_if_cqe_foreign_government
				tooltip = CONSTRUCTION_QUEUE_FOREIGN_GOVERNMENT_CONSTRUCTION_TT
			}


			### PLAYER GOVERNMENT CONSTRUCTION

			button_icon_round_action = {
				name = "queue_move_up"
				using = visible_if_cqe_player_government
				size = { 30 30 }
				blockoverride "icon" {
					texture = "gfx/interface/icons/generic_icons/up_up.dds"
				}
				blockoverride "icon_size" {
					size = { 75% 75% }
				}
				tooltip = "MOVE_UP"
				enabled = "[IsValid( ConstructionQueueElement.MoveUp )]" # Assumption is that it needs to be able to be moved up in order to be moved to the top also

				click_modifiers = {
					ondefault = "[Execute( ConstructionQueueElement.MoveUp )]"
					onalt = "[Execute( ConstructionQueueElement.MoveToTop )]"
				}
			}

			button_icon_round_action = {
				name = "queue_move_down"
				using = visible_if_cqe_player_government
				size = { 30 30 }
				blockoverride "icon" {
					texture = "gfx/interface/icons/generic_icons/down_down.dds"
				}
				blockoverride "icon_size" {
					size = { 75% 75% }
				}
				tooltip = "MOVE_DOWN"
				enabled = "[IsValid( ConstructionQueueElement.MoveDown )]" # Assumption is that it needs to be able to be moved down in order to be moved to the bottom also

				click_modifiers = {
					ondefault = "[Execute( ConstructionQueueElement.MoveDown )]"
					onalt = "[Execute( ConstructionQueueElement.MoveToBottom )]"
				}
			}

			button_icon_cancel = {
				name = "cancel_construction"
				using = visible_if_cqe_player_government
				size = { 30 30 }
				tooltip = "CANCEL_CONSTRUCTION"
				enabled = "[IsValid( ConstructionQueueElement.CancelConstruction )]"
				onclick = "[Execute( ConstructionQueueElement.CancelConstruction )]"
			}

		}


	}

	type construction_queue_goto_building = button {
		onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
		onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
		size = { 35 35 }
		texture = "[Building.GetIcon]"
		using = tooltip_above
	}
}

template visible_if_cqe_player_government
{
	visible = "[And( ConstructionQueueElement.GetInvestorCountry.IsLocalPlayer, Not(ConstructionQueueElement.IsPrivatelyFundedConstruction))]"
}

template visible_if_cqe_foreign_government
{
	visible = "[And( Not(ConstructionQueueElement.GetInvestorCountry.IsLocalPlayer), Not(ConstructionQueueElement.IsPrivatelyFundedConstruction))]"
}

template visible_if_cqe_private
{
	visible = "[ConstructionQueueElement.IsPrivatelyFundedConstruction]"
}


types construction_queue {
	type construction_queue_item_texts = widget {
		size = { 100% 100% }
		textbox = {
			visible = "[GreaterThan_CFixedPoint(ConstructionQueueElement.GetConstructionSpeed, '(CFixedPoint)0')]"
			parentanchor = right|vcenter
			align = right|nobaseline
			position = { -70 0 }
			autoresize = yes
			text = "CONSTRUCTION_QUEUE_ELEMENT_ALLOCATION"
			block "default_format" {}
		}

		textbox = {
			visible = "[And(ConstructionQueueElement.IsValidConstruction, Not(GreaterThan_CFixedPoint(ConstructionQueueElement.GetConstructionSpeed, '(CFixedPoint)0')))]"
			parentanchor = right|vcenter
			align = right|nobaseline
			position = { -8 0 }
			max_width = 70
			autoresize = yes
			elide = right
			fontsize_min = 12
			text = "QUEUED"
			alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(ConstructionQueueElement.GetConstructionSpeed, '(CFixedPoint)0'))]"
			block "default_format" {}
		}

		textbox = {
			position = { -8 0 }
			visible = "[ConstructionQueueElement.IsCurrentlyUnderConstruction]"
			raw_text = "#b [ConstructionQueueElement.GetWeeksLeft]#!w"
			parentanchor = right|vcenter
			autoresize = yes
			align = right|nobaseline
			alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(ConstructionQueueElement.GetConstructionSpeed, '(CFixedPoint)0'))]"
			block "default_format" {}
		}
	}
}

