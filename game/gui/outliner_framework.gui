@entry_width = 350
@entry_height = 30

types outliner_framework {
	type outliner_type = widget {
		name = "outliner"
		max_update_rate = 10
		visible = "[And( IsInGame, And( Not( IsPauseMenuShown ), Not( IsGameOverScreenShown )))]"
		using = default_fade_in_out

		### outliner
		outliner_content = {
			using = half_and_fullscreen_hide
		
			state = {
				name = _show
				using = Animation_Curve_Default
				duration = 0.2
				position_x = 0
				alpha = 1
			}
			state = {
				name = _hide
				using = Animation_Curve_Default
				duration = 0.2
				position_x = 280
				alpha = 0
			}
		}
	}
	
	### outliner content
	type outliner_content = vbox {
		layoutpolicy_vertical = preferred
		layoutpolicy_horizontal = preferred
		margin_bottom = 10

		vbox = {
			using = clickthrough_blocker
			layoutpolicy_vertical = preferred
			layoutpolicy_horizontal = preferred

			scrollarea = {
				name = "outliner_scrollarea"
				layoutpolicy_vertical = preferred
				layoutpolicy_horizontal = preferred
				preferscrollwidgetsize = yes

				scrollbarpolicy_horizontal = always_off

				scrollbar_vertical = {
					using = vertical_scrollbar		
				}

				scrollwidget = {
					flowcontainer = {
						direction = vertical
						minimumsize = { @entry_width -1 }

						block "items" {}
					}
				}
			}
		}
		
		widget = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
		}
	}

	# An Outliner Group, has a title and a list of items
	type outliner_group = flowcontainer {
		direction = vertical
		parentanchor = right

		block "group_margin_left" {}

		block "visibility" {
			visible = "[OutlinerEntry.IsShown]"
		}

		# The name of the group
		block "title" {
			expandable_outliner_entry = {
				parentanchor = right
				
				blockoverride "texture" {
					using = expand_button_bg_left_fade
				}

				blockoverride "sound" {
					using = ui_pointer_over
				}

				blockoverride "text" {
					block "title_text" {
						text = "[OutlinerEntry.GetTitle]"
					}
				}

				blockoverride "tooltip" {
					tooltip = "OUTLINER_ENTRY_INSTRUCTION_OPEN"
				}

				blockoverride "onclick" {
					block "title_click" {
						onclick = "[OutlinerEntry.ToggleExpanded]"
					}
				}

				block "title_pin_buttons" {}
			}
		}
		
		# The list of the items within that group
		container = {
			block "list_visibility" {
				visible = "[OutlinerEntry.IsExpanded]"
			}

			fixedgridbox = {
				block "fixedgridbox_cell_size" {
					addcolumn = @entry_width
					addrow = 29
				}

				block "list_properties" {
					block "outliner_datamodel" {
						datamodel = "[OutlinerEntry.GetSubEntries]"
					}

					item = {
						block "item" {
							outliner_entry = {}
						}
					}
				}
			}
		}
	}

	type pinnable_outliner_group = outliner_group {
		blockoverride "title_pin_buttons" {
			pin_buttons = {}
		}
	}

	# A generic Outliner Entry, can have pin/unpin buttons, a text, a place for additional info and expand/collapse buttons
	type outliner_entry = button {
		block "entry_size" {
			size = { @entry_width @entry_height }
		}

		using = ui_increment
		
		block "texture" {
			using = clean_button

			blockoverride "bevel_margin" {
				margin = { 1 1 }	
			}
		}

		block "onclick" {}
		block "onrightclick" {}
		block "onhover" {}
		block "visibility" {
			visible = yes
		}

		block "pin_button_onhover_animation" {
			onmousehierarchyenter = "[PdxGuiWidget.FindChild('pin_button').InterruptThenTriggerAnimation('hide_pin_button','show_pin_button')]"
			onmousehierarchyleave = "[PdxGuiWidget.FindChild('pin_button').InterruptThenTriggerAnimation('show_pin_button','hide_pin_button')]"
		}

		block "additional_widgets_under_text" {}
		
		block "pin_buttons" {}

		block "widget" {
			flowcontainer = {
				direction = horizontal
				position = { 5 0 }

				parentanchor = vcenter
				widgetanchor = vcenter

				block "icon" {}

				textbox = {
					block "expand_buttons_margin" {}
					block "outliner_item_tooltip" {}

					align = nobaseline
					autoresize = yes
					elide = right
					parentanchor = vcenter
					fontsize_min = 14

					block "text_size" {
						minimumsize = { 240 -1 }
						maximumsize = { 240 -1 }
					}

					block "text" {
						raw_text = "#BOLD PLACEHOLDER_NAME#!"
					}
				}

				block "additional_info" {}
			}
		}

		block "expand_buttons" {}
	}

	type pinnable_outliner_entry = outliner_entry {
		blockoverride "pin_buttons" {
			pin_buttons = {}
		}
	}

	type expandable_outliner_entry = outliner_entry {
		block "entry_visibility" {
			visible = "[GreaterThan_int32(OutlinerEntry.GetNumSubEntries, '(int32)0')]"
		}
				
		blockoverride "expand_buttons" {
			block "pinnable_expand_buttons" {
				expand_buttons = {}
			}
		}

		blockoverride "expand_buttons_margin" {
			margin_left = 25
		}

		container = {				
			position = { -25 0 }
			parentanchor = right|vcenter
			
			textbox = {
				autoresize = yes
				align = nobaseline

				block "number_of_entries_visibility" {
					visible = "[GreaterThan_int32(OutlinerEntry.GetNumSubEntries, '(int32)0')]"
				}

				block "number_of_entries_text" {
					text = "[OutlinerEntry.GetNumSubEntries]"
				}
			}
		}
	}

	type pinnable_expandable_outliner_entry = outliner_entry {
		blockoverride "pin_buttons" {
			pin_buttons = {
				block "pin_button_properties" {}
			}
		}

		blockoverride "expand_buttons" {
			block "pinnable_expand_buttons" {
				expand_buttons = {}
			}
		}
	}

	type pin_buttons = widget {
		size = { 23 23 }
		parentanchor = right|vcenter

		button = {
			blockoverride "sound" {
				using = check_button_sound
			}

			name = "pin_button"
			position = { 0 0 }
			parentanchor = center
			texture = "gfx/interface/outliner/unpinned_icon.dds"
			size = { 100% 100% }
			tooltip = "PIN"

			block "pin_button_visibility_and_onclick" {
				visible = "[Not(OutlinerEntry.IsPinned)]"
				onclick = "[OutlinerEntry.TogglePinned]"
			}

			state = {
				name = hide_pin_button
				trigger_on_create = yes
				alpha = 0
				duration = 0.2
				scale = 0.5
			}

			state = {
				name = show_pin_button
				alpha = 1
				duration = 0.15
				scale = 1
			}
		}

		button = {
			blockoverride "sound" {
				using = check_button_sound
			}

			position = { 0 0 }
			texture = "gfx/interface/outliner/pinned_icon.dds"
			size = { 100% 100% }
			tooltip = "UNPIN"
			
			block "unpin_button_visibility_and_onclick" {
				visible = "[OutlinerEntry.IsPinned]"
				onclick = "[OutlinerEntry.TogglePinned]"
			}
		}
	}

	type expand_buttons = container {
		name = "expand_buttons"
		parentanchor = vcenter

		block "expand_buttons_visibility" {
			visible = "[GreaterThan_int32(OutlinerEntry.GetNumSubEntries, '(int32)0')]"
		}

		button = {
			blockoverride "sound" {
				using = ui_increment
			}

			using = expand_arrow
			position = { 7 0 }
			size = { 18 18 }
			tooltip = "EXPAND"
			using = tooltip_above
			
			block "expand_arrow_properties" {
				visible = "[Not(OutlinerEntry.IsExpanded)]"
				onclick = "[OutlinerEntry.ToggleExpanded]"
			}
		}
		
		button = {
			blockoverride "sound" {
				using = ui_decrement
			}

			using = expand_arrow_expanded
			position = { 7 0 }
			size = { 18 18 }
			tooltip = "COLLAPSE"
			
			block "collapse_arrow_properties" {
				visible = "[OutlinerEntry.IsExpanded]"
				onclick = "[OutlinerEntry.ToggleExpanded]"
			}
		}
	}

	type pinned_expand_buttons = expand_buttons {
		blockoverride "number_of_items" {}

		blockoverride "expand_arrow_properties" {
			visible = "[Not(OutlinerEntry.IsPinnedExpanded)]"
			onclick = "[OutlinerEntry.TogglePinnedExpanded]"
		}

		blockoverride "collapse_arrow_properties" {
			visible = "[OutlinerEntry.IsPinnedExpanded]"
			onclick = "[OutlinerEntry.TogglePinnedExpanded]"
		}
	}
}