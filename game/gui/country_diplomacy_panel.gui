# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types country_panel_types
{
	type country_panel_diplomacy_content = flowcontainer {
		using = default_list_position
		direction = vertical
		minimumsize = { @panel_width_plus_14 -1 }
		maximumsize = { @panel_width_plus_14 -1 }
		datacontext = "[CountryPanel.GetCountry]"
		
		widget = {
			size = { @panel_width 125 }
			parentanchor = hcenter

			#ATTITUDE / INFAMY
			attitude_info = {
				size = { 520 105 }
				parentanchor = center

				blockoverride "context" {
					datacontext = "[Country]"
				}
			}
		}

		default_header = {
			visible = "[Country.IsSubject]"

			blockoverride "text" {
				text = "OVERLORD"
			}
		}

		### OVERLORD - NO BUTTONS - If Country is NOT the player and is NOT a Subject of the player
		overlord = {
			visible = "[And(And(Country.IsAIOrOtherPlayer, Country.GetSubjectType.IsValid), Not(Country.IsSubjectOf(GetPlayer.Self)))]"

			blockoverride "diplo_actions_button_visibility" {
				visible = no
			}

			blockoverride "overlord_datacontext" {
				datacontext = "[CountryPanel.GetCountry.AccessOverlord]"
			}

			blockoverride "liberty_desire_overlord_datacontext" {
				datacontext = "[CountryPanel.GetCountry.AccessOverlord]"
			}

			blockoverride "whos_overlord_text" {
				text = "COUNTRY_OVERLORD"
			}

			blockoverride "whos_liberty_desire_text" {
				text = "COUNTRY_DIPLOMACY_TAB_LIBERTY_DESIRE"
			}

			blockoverride "active_pacts_datamodel" {
				datamodel = "[CountryPanel.GetCountry.GetNonSubjectDiplomaticPactsWith(Country.GetOverlord)]"
			}

			blockoverride "country_subject_type_datacontext" {
				datacontext = "[CountryPanel.GetCountry.GetSubjectType]"
			}

			blockoverride "country_liberty_desire_datacontext" {
				datacontext = "[CountryPanel.GetCountry]"
			}
		}

		### OVERLORD - NO BUTTONS - If Country is NOT the player and is a Subject of the player.
		overlord = {
			visible = "[And(And(Country.IsAIOrOtherPlayer, Country.GetSubjectType.IsValid), Country.IsSubjectOf(GetPlayer.Self))]"

			blockoverride "diplo_actions_button_visibility" {
				visible = no
			}

			blockoverride "overlord_datacontext" {
				datacontext = "[CountryPanel.GetCountry.AccessOverlord]"
			}

			blockoverride "whos_overlord_text" {
				text = "COUNTRY_OVERLORD"
			}

			blockoverride "whos_liberty_desire_text" {
				text = "COUNTRY_DIPLOMACY_TAB_LIBERTY_DESIRE"
			}

			blockoverride "active_pacts_datamodel" {
				datamodel = "[Country.GetNonSubjectDiplomaticPactsWith(Country.GetOverlord)]"
			}

			blockoverride "country_subject_type_datacontext" {
				datacontext = "[Country.GetSubjectType]"
			}

			blockoverride "country_liberty_desire_datacontext" {
				datacontext = "[Country]"
			}

			blockoverride "liberty_desire_bar_stagnated" {
				gold_progressbar_horizontal = {
					visible = "[Not(Or( GreaterThan_CFixedPoint(Abs_CFixedPoint(Country.GetWeeklyLibertyDesireChange), GetDefine('NGUI', 'LIBERTY_DESIRE_TREND_INDICATOR_LIMIT')), GreaterThan_CFixedPoint(Country.GetWeeklyLibertyDesireChange, GetDefine('NGUI', 'LIBERTY_DESIRE_TREND_INDICATOR_LIMIT'))))]"
					size = { 100% 100% }
					blockoverride "background" {}
					blockoverride "frame" {}
					blockoverride "glow_visible" {
						visible = "[LibertyDesireLevel.IsActive( Country.GetLibertyDesireRaw )]"
					}

					blockoverride "values" {
						value = "[LibertyDesireLevel.GetProgress( Country.GetLibertyDesireRaw )]"
						min = 0
						max = 1
					}
				}
			}

			blockoverride "liberty_desire_bar_decreased" {
				changed_value_decreased_progressbar_horizontal_green = {
					visible = "[GreaterThan_CFixedPoint(Abs_CFixedPoint(Country.GetWeeklyLibertyDesireChange), GetDefine('NGUI', 'LIBERTY_DESIRE_TREND_INDICATOR_LIMIT'))]"
					size = { 100% 100% }

					blockoverride "second_progressbar" {}

					blockoverride "values" {
						min = 0
						max = 1
						value = "[LibertyDesireLevel.GetProgress( Country.GetLibertyDesireRaw )]"
					}

					blockoverride "glow_size" {
						size = { 40 100% }
					}

					blockoverride "arrow_texture_density" {
						texture_density = 6 #use to match height of progressbar
					}
				}
			}

			blockoverride "liberty_desire_bar_increased" {
				changed_value_increased_progressbar_horizontal_bad = {
					visible = "[GreaterThan_CFixedPoint(Country.GetWeeklyLibertyDesireChange, GetDefine('NGUI', 'LIBERTY_DESIRE_TREND_INDICATOR_LIMIT'))]"
					size = { 100% 100% }

					blockoverride "second_progressbar" {}

					blockoverride "values" {
						value = "[LibertyDesireLevel.GetProgress( Country.GetLibertyDesireRaw )]"
						min = 0
						max = 1
					}

					blockoverride "glow_size" {
						size = { 40 100% }
					}

					blockoverride "arrow_texture_density" {
						texture_density = 6 #use to match height of progressbar
					}
				}
			}
		}

		### OVERLORD - WITH BUTTONS - If Country is the player and is a Subject of someone.
		overlord = {
			visible = "[And(Country.IsLocalPlayer, Country.GetSubjectType.IsValid)]"

			blockoverride "overlord_datacontext" {
				datacontext = "[CountryPanel.GetCountry.AccessOverlord]"
			}

			blockoverride "liberty_desire_overlord_datacontext" {
				datacontext = "[CountryPanel.GetCountry.AccessOverlord]"
			}
		}

		diplomatic_info = {}

		widget = { 
			size = { 5 5 }
		}	


		flowcontainer = {
			parentanchor = hcenter
			direction = vertical
		
			default_header = {
				blockoverride "text" {
					text = INTERESTS
				}
			}

			empty_state = {
				blockoverride "visible" {
					visible = "[IsDataModelEmpty(Country.AccessInterests)]"
				}
				blockoverride "text" {
					text = "NO_INTERESTS"
				}
				blockoverride "margin" {
					margin_top = 10
					margin_bottom = 10
				}				
			}
			
			dynamicgridbox = {
				visible = "[Not(IsDataModelEmpty(Country.AccessInterests))]"
				datamodel = "[Country.AccessInterests]"
				flipdirection = yes
				datamodel_wrap = 3	
				parentanchor = hcenter
			
				item = {
					flowcontainer = {
						datacontext = "[Interest.GetStrategicRegion]"
						direction = horizontal
						onmousehierarchyenter = "[AccessHighlightManager.HighlightStrategicRegion(StrategicRegion.Self)]"
						onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
						alwaystransparent = no

						tooltipwidget = {
							FancyTooltip_StrategicRegion = {}
						}

						background = {
							using = entry_bg_simple
						}	
						
						minimumsize = { 175 40 }

						textbox = {
							parentanchor = center					
							text = "[StrategicRegion.GetNameNoFormatting] [SelectLocalization(GetPlayer.HasInterestIn(StrategicRegion.Self), '@green_checkmark!', '@red_cross!')]"
							size = { 175 35 }
							fontsize_min = 10
							align = hcenter|nobaseline
						}
					}
				}
			}		
		}
	}
}
