@tooltip_max_width = 550

template tooltip_properties
{
	alwaystransparent = no
	using = clickthrough_blocker

	# hidden button to close the tooltip
	button = {
		size = { 0 0 }
		visible = "[PdxGuiWidget.IsTooltipLocked]"
		onclick = "[CloseAllTooltips]"
		shortcut = "close_window"
	}
		
	background = {
		spriteType = CorneredTiled
		spriteborder = { 48 48 }
		texture = "gfx/interface/tooltip/tooltip_bg.dds"
		texture_density = 2
		tintcolor = "[TooltipInfo.GetTintColor]"	
		
		modify_texture = {
			texture = "gfx/interface/backgrounds/default_bg_shading.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = overlay
		}
		modify_texture = {
			texture = "gfx/interface/textures/velvet_texture.dds"
			spriteType = Corneredtiled
			texture_density = 2
			spriteborder = { 0 0 }
			blend_mode = overlay
		}
		modify_texture = {
			texture = "gfx/interface/textures/cloth_texture.dds"
			spriteType = Corneredtiled
			texture_density = 2
			spriteborder = { 0 0 }
			blend_mode = overlay
			alpha = 0.15
		}
	}
	icon = {
		texture = "gfx/interface/tooltip/tooltip_frame.dds"
		spriteType = Corneredstretched
		spriteborder = { 8 8 }
		size = { 100% 100% }
		texture_density = 2
		tintcolor = "[TooltipInfo.GetTintColor]"
	}
}

types TooltipTypes
{
	type DefaultTooltipTextBox = textbox {
		align = left|nobaseline
		autoresize = yes
		using = tooltip_font
	}

	# Alias (cannot rename the actual type due to how it is hooked into code)
	type RegularTooltip = TooltipWidgetType {}
	
	type TooltipWidgetType = container {
		using = tooltip_properties

		container = {
			flowcontainer = {
				direction = vertical

				block "tooltip_margins" {
					margin = { 18 15 }
				}
				
				block "tooltip_content" {
					block "tooltip_content_before" {}

					DefaultTooltipTextBox = {
						name = "TooltipText"
						block "text"
						{
						}
						margin_bottom = 0
						autoresize = yes
						multiline = yes
						maximumsize = { @tooltip_max_width -1 }
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}
					
					DefaultTooltipTextBox = {
						name = "TooltipTextDelayed"
						autoresize = yes
						margin_top = 0
						margin_bottom = 0
						multiline = yes
						maximumsize = { @tooltip_max_width -1 }
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					caligula_table = {
						block "table_visibility" {
							visible = no
						}
					}

					DefaultTooltipTextBox = {
						block "instruction_text"
						{
						}
						autoresize = yes
						margin_top = 0
						margin_bottom = 0
						multiline = yes
						maximumsize = { @tooltip_max_width -1 }
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					block "tooltip_content_after" {}

					DefaultTooltipTextBox = {
						name = "TooltipTextShortcut"
						autoresize = yes
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					DefaultTooltipTextBox = {
						name = "TooltipTextInputAction"
						autoresize = yes
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					DefaultTooltipTextBox = {
						margin_top = 10
						text = "RIGHT_CLICK_TO_OPEN_CONTEXT_MENU"
						visible = "[CanOpenRightClickContextMenu]"
					}

					DefaultTooltipTextBox = {
						name = "TooltipTextShortcutManuallyAdded"

						block "additional_interaction_info" {
							# text = ""
							visible = no
						}
						autoresize = yes
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					container = {
						parentanchor = top|hcenter
						widgetanchor = top|hcenter
						visible = "[IsInGame]"
						block "buttons" {}
					}
				}	
			}

			block "tooltip_content_free_floating" {}
		
			margin_widget = {
				size = { 100% 100% }
				margin = { 5 5 }

				icon = {
					name = "tooltip_frame_locked"
					texture = "gfx/interface/tooltip/tooltip_locked.dds"
					spriteType = Corneredstretched
					spriteborder = { 6 6 }
					tintcolor = "[TooltipInfo.GetTintColor]"
					size = { 100% 100% }
					texture_density = 2

					# Commented out due to looping sound effect (PRCAL-21403)
					#state = {
					#	name = _show
					#	start_sound = {
					#		soundeffect = "event:/SFX/UI/Global/tooltip_lock"
					#	}
					#}
				}
			}
		}

		### timer lock icon
		block "progress"
		{
			progresspie = {
				name = "tooltip_progress"
				visible = "[And(UsesTimerLocking, Not(PdxGuiWidget.IsTooltipLocked))]"
				parentanchor = top|right
				position = { 8 -8 }
				size = { 24 24 }
				min = 0
				max = 1
				tintcolor = "[TooltipInfo.GetTintColor]"
				value = "[PdxGuiWidget.GetTooltipLockProgress]"
				texture = "gfx/interface/tooltip/tooltip_lock_timer.dds"
				framesize = { 48 48 }
				frame = 2

				state = {
					name = _show
					alpha = 1
				}
	
				state = {
					name = _hide
					bezier = { 0.25 0.1 0.25 1 }
					duration = 0.05
					alpha = 0
				}
			}
		}
	}

	type FancyTooltipWidgetType = container {
		using = tooltip_properties

		container = {
			flowcontainer = {
				direction = vertical
				block "tooltip_margins" {
					margin = { 18 15 }
				}
				margin_top = 65

				block "tooltip_content_before_before" {}

				block "tooltip_content_before" {}
				
				block "tooltip_content" {
					DefaultTooltipTextBox = {
						name = "DebugText"
						visible = "[InDebugMode]"
						margin_bottom = 0
						block "text_debug"
						{
						}
						autoresize = yes
						multiline = yes
						maximumsize = { @tooltip_max_width -1 }
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					DefaultTooltipTextBox = {
						name = "BeforeBeforeTooltipText"
						margin_bottom = 0
						block "text_before_before"
						{
						}
						autoresize = yes
						multiline = yes
						maximumsize = { @tooltip_max_width -1 }
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					DefaultTooltipTextBox = {
						name = "BeforeTooltipText"
						margin_bottom = 0
						block "text_before"
						{
						}
						autoresize = yes
						multiline = yes
						maximumsize = { @tooltip_max_width -1 }
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					DefaultTooltipTextBox = {
						name = "TooltipText"
						block "text"
						{
						}
						margin_bottom = 0
						autoresize = yes
						multiline = yes
						maximumsize = { @tooltip_max_width -1 }
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}
					
					DefaultTooltipTextBox = {
						name = "TooltipTextDelayed"
						autoresize = yes
						margin_top = 0
						margin_bottom = 0
						multiline = yes
						maximumsize = { @tooltip_max_width -1 }
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					caligula_table = {
						block "table_visibility" {
							visible = no
						}
					}

					DefaultTooltipTextBox = {
						block "instruction_text"
						{
						}
						autoresize = yes
						margin_top = 0
						margin_bottom = 0
						multiline = yes
						maximumsize = { @tooltip_max_width -1 }
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					block "tooltip_content_after" {}

					DefaultTooltipTextBox = {
						name = "TooltipTextShortcut"
						autoresize = yes
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					DefaultTooltipTextBox = {
						name = "TooltipTextInputAction"
						autoresize = yes
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					DefaultTooltipTextBox = {
						margin_top = 10
						text = "RIGHT_CLICK_TO_OPEN_CONTEXT_MENU"
						visible = "[CanOpenRightClickContextMenu]"
					}

					DefaultTooltipTextBox = {
						name = "TooltipTextShortcutManuallyAdded"

						block "additional_interaction_info" {
							# text = ""
							visible = no
						}
						autoresize = yes
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					container = {
						parentanchor = top|hcenter
						widgetanchor = top|hcenter
						visible = "[IsInGame]"
						block "buttons" {}
					}
				}
			}
			
			margin_widget = {
				size = { 100% 100% }
				margin = { 5 5 }

				icon = {
					name = "tooltip_frame_locked"
					texture = "gfx/interface/tooltip/tooltip_locked.dds"
					spriteType = Corneredstretched
					spriteborder = { 6 6 }
					tintcolor = "[TooltipInfo.GetTintColor]"
					size = { 100% 100% }
					texture_density = 2

					# Commented out due to looping sound effect (PRCAL-21403)
					#state = {
					#	name = _show
					#	start_sound = {
					# 		soundeffect = "event:/SFX/UI/Global/tooltip_lock"
					#	}
					#}
				}
			}
			
			### HEADER BG
			icon = {
				texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
				position = { 4 4 }
				block "color" {
					color = { 0.6 0.4 0.6 1 }
				}
				alpha = 0.5
				size = { 325 55 }
				
				modify_texture = {
					texture = "gfx/interface/textures/velvet_texture.dds"
					spriteType = Corneredtiled
					texture_density = 2
					spriteborder = { 0 0 }
					blend_mode = overlay
				}
				modify_texture = {
					texture = "gfx/interface/textures/cloth_texture.dds"
					spriteType = Corneredtiled
					texture_density = 2
					spriteborder = { 0 0 }
					blend_mode = overlay
					alpha = 0.15
				}
			}
				
			### ICON	
			icon = {
				block "icon_background_texture" {
					texture = "gfx/interface/tooltip/tooltip_icon_bg.dds"
				}
				position = { 3 3 }
				size = { 57 57 }
				block "color" {
					color = { 0.5 0.5 0.5 1 }
				}
				
				block "icon_frame" {
					icon = {
						texture = "gfx/interface/tooltip/tooltip_icon_frame.dds"
						size = { 100% 100% }
					}
				}
				
				block "replace_icon" {
					icon = {
						block "icon_texture" {
							texture = "gfx/interface/icons/generic_icons/generic_concept_icon.dds"
						}
						block "icon_size" {
							size = { 45 45 }
						}
						parentanchor = center
					}
				}
			}
			
			### HEADER TEXT
			widget = {
				size = { 100% 60 }
				position = { 0 0 }
				
				hbox = {
					margin_left = 64
					margin_right = 15
					spacing = 5
					
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding


					textbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						multiline = yes

						block "name" {
							raw_text = "Name"
						}
						align = left|nobaseline
						elide = right
						fontsize_min = 12
						using = fontsize_large
						default_format = "#tooltip_header"
					}
					
					hbox = {
						layoutpolicy_horizontal = growing
						layoutpolicy_vertical = growing
						spacing = 5

						textbox = {
							layoutpolicy_horizontal = growing
							layoutpolicy_vertical = growing
							autoresize = yes
							
							block "type" {
								raw_text = "Name"
							}
							align = right|nobaseline
							alpha = 0.75
							elide = right
							using = fontsize_small
							default_format = "#title"
						}

						block "go_to_button" {
							button_icon_goto = {
								size = { 30 30 }
								input_action = "go_to_details"
								using = tooltip_above

								block "go_to_button_tooltip" {
									tooltip = "GO_TO_DETAILS"
								}

								block "go_to_button_visibility" {
									visible = no
								}

								block "go_to_button_properties" {
									onclick = "[InformationPanelBar.OpenCountryPanel(AccessPlayer.AccessSelf)]"
								}
							}
						}
					}
				}

				icon = {
					texture = "gfx/interface/dividers/divider_clean.dds"
					texture_density = 2
					spriteType = CorneredTiled
					spriteborder = { 4 0 }
					size =  { 100% 2 }
					alpha = 0.3
					parentanchor = hcenter|bottom
					
					modify_texture = {
						texture = "gfx/interface/masks/fade_horizontal_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
						alpha = 0.7
					}
				}
			}
		}
		
		### timer lock icon
		block "progress"
		{
			progresspie = {
				name = "tooltip_progress"
				visible = "[And(UsesTimerLocking, Not(PdxGuiWidget.IsTooltipLocked))]"
				parentanchor = top|right
				position = { 8 -8 }
				size = { 24 24 }
				min = 0
				max = 1
				tintcolor = "[TooltipInfo.GetTintColor]"
				value = "[PdxGuiWidget.GetTooltipLockProgress]"
				texture = "gfx/interface/tooltip/tooltip_lock_timer.dds"
				framesize = { 48 48 }
				frame = 2

				state = {
					name = _show
					alpha = 1
				}
	
				state = {
					name = _hide
					bezier = { 0.25 0.1 0.25 1 }
					duration = 0.05
					alpha = 0
				}
			}
		}
	}
}

TooltipWidgetType = {
	name = "DefaultTooltipWidget"
}

TooltipWidgetType = {
	name = "MapTooltipWidget"
	alwaystransparent = yes
	blockoverride "progress" {}
}

# Templates and types used in tooltips
# Need to be defined in this file since tooltips can be used on the loading screen (where we do not have the all gui files loaded yet) 

types Tables {
	type caligula_table = margin_widget {
		vbox = {
			set_parent_size_to_minimum = yes

			textbox = {
				autoresize = yes
				block "table_title" {
					raw_text = "title"
					visible = no
				}
				default_format = "#title"
				align = left|nobaseline
				layoutpolicy_horizontal = expanding
			}

			hbox = {				
				# column 1
				vbox = {
					using = table_column
					
					textbox = {
						using = table_header
						
						block "table_header_1" {
							visible = no
							# raw_text = "header 1"
						}
						
						align = left|nobaseline
						margin_left = 0
					}

					block "table_datamodel" {}
					item = {
						textbox = {
							using = table_cell

							block "table_value_1" {
								visible = no
								margin_left = 0
								# raw_text = "value 1"
							}

							align = left|nobaseline
							margin_left = 0
						}
					}
				}

				# column 2
				vbox = {
					using = table_column
					
					textbox = {
						using = table_header
						
						block "table_header_2" {
							visible = no
							# raw_text = "header 2"
						}
						
						align = right|nobaseline
					}

					block "table_datamodel" {}
					item = {
						textbox = {
							using = table_cell

							block "table_value_2" {
								visible = no
								margin_left = 0
								# raw_text = "value 2"
							}

							align = right|nobaseline
						}				
					}
				}

				# column 3
				vbox = {
					using = table_column
					
					textbox = {
						using = table_header
						
						block "table_header_3" {
							visible = no
							# raw_text = "header 3"
						}
						
						align = right|nobaseline
					}

					block "table_datamodel" {}

					item = {
						textbox = {
							using = table_cell

							block "table_value_3" {
								visible = no
								margin_left = 0
								# raw_text = "value 3"
							}

							align = right|nobaseline
						}
					}
				}

				# column 4
				vbox = {
					using = table_column
					
					textbox = {
						using = table_header
						
						block "table_header_4" {
							visible = no
							# raw_text = "header 4"
						}
						
						align = right|nobaseline
					}

					block "table_datamodel" {}

					item = {
						textbox = {
							using = table_cell

							block "table_value_4" {
								visible = no
								margin_left = 0
								# raw_text = "value 4"
							}

							block "table_value_4_alignment" {
								align = right|nobaseline
							}
						}
					}
				}

				# column 5
				vbox = {
					using = table_column
					
					textbox = {
						using = table_header
						
						block "table_header_5" {
							visible = no
							# raw_text = "header 5"
						}
						
						align = right|nobaseline
					}

					block "table_datamodel" {}

					item = {
						textbox = {
							using = table_cell

							block "table_value_5" {
								visible = no
								margin_left = 0
								# raw_text = "value 5"
							}

							align = right|nobaseline
						}
					}
				}

				# column 6
				vbox = {
					using = table_column
					
					textbox = {
						using = table_header
						
						block "table_header_6" {
							visible = no
							# raw_text = "header 6"
						}
						
						align = right|nobaseline
					}

					block "table_datamodel" {}

					item = {
						textbox = {
							using = table_cell

							block "table_value_6" {
								visible = no
								margin_left = 0
								# raw_text = "value 6"
							}

							block "table_value_6_alignment" {
								align = right|nobaseline
							}
						}
					}
				}
			}
		}	
	}
}

template table_column {
	layoutpolicy_horizontal = expanding
	layoutpolicy_vertical = expanding
}

template table_header {
	layoutpolicy_horizontal = expanding
	layoutpolicy_vertical = expanding
	autoresize = yes
	minimumsize = { -1 26 }
	maximumsize = { -1 26 }
	margin_bottom = 3
	
	divider_clean = {
		parentanchor = bottom|hcenter
	}
}

template table_cell {
	layoutpolicy_horizontal = expanding
	layoutpolicy_vertical = expanding
	elide = right
	fontsize_min = 12

	block "autoresize_table_cells" {
		autoresize = yes
	}

	block "table_style" {
		margin = { 20 3 }
		margin_right = 0
		minimumsize = { -1 30 }
		maximumsize = { -1 30 }
	}

	background = {
		block "table_item_background_visibility" {
			visible = "[IsOdd_int32(PdxGuiWidget.GetIndexInDataModel)]"
		}

		block "row_background" {}
	}
}

template condensed_table {
	margin = { 20 0 }
	margin_right = 0
	minimumsize = { -1 23 }
	maximumsize = { -1 23 }
}

Types dividers {	
	type divider_clean = icon {
		texture = "gfx/interface/dividers/divider_clean.dds"
		texture_density = 2
		spriteType = CorneredTiled
		spriteborder = { 4 0 }
		
		alpha = 0.3

		block "size" {
			size =  { 100% 2 }
		}
		
		block "fade" {
			modify_texture = {
				texture = "gfx/interface/masks/fade_horizontal_center.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = alphamultiply
				alpha = 0.5
			}
		}
	}
}
