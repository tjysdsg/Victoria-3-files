# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

@diplo_play_side_width = 260

### DIPLOMATIC PLAYS TEMPLATES
template phase_image_swap {
	state = {
		name = _show
		using = illu_alpha
		duration = 1.5
		using = Animation_Curve_Default
	}
	state = {
		name = _hide
		alpha = 0
		duration = 1.5
		using = Animation_Curve_Default
	}
}

template phase_image_small_swap {
	modify_texture = {
		name = "glow"
		texture = "gfx/interface/animation/shimmer.dds"
		blend_mode = colordodge
		translate_uv = { -1 -1 }
	}

	state = {
		name = _show
		alpha = 1
		duration = 1.5
		using = Animation_Curve_Default

		modify_texture = {
			name = "glow"
			translate_uv = { 1 1 }
		}
	}
	state = {
		name = _hide
		alpha = 0
		duration = 1.5
		using = Animation_Curve_Default
	}
}

template phase_glow {
	state = {
		name = 1
		next = 2
		trigger_on_create = yes
		alpha = 0.7
		duration = 1.5
		using = Animation_Curve_Default
	}
	state = {
		name = 2
		next = 1
		alpha = 0.1
		duration = 1.5
		using = Animation_Curve_Default
	}
}

template visibility_opening_moves {
	visible = "[LessThan_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_OPENING_PHASE_END'))]"
}
template visibility_diplomatic_maneuvers {
	visible = "[And(GreaterThanOrEqualTo_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_OPENING_PHASE_END')),LessThan_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_CLOSING_PHASE_START')))]"
}
template visibility_countdown_to_war {
	visible = "[GreaterThanOrEqualTo_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_CLOSING_PHASE_START'))]"
}

template diplo_play_phases_scale {
	scale = 0.6
}

types diplomatic_play_panel_types
{
	### DIPLOMATIC PLAYS
	type diplomatic_play_panel = default_block_window {
		name = "diplomatic_play_panel"
		datacontext = "[DiplomaticPlayPanel.AccessDiplomaticPlay]"

		blockoverride "window_header_name" {
			text = "DIPLOMATIC_PLAY_NAME"
		}

		blockoverride "pin_visibility" {
			visible = "[DiplomaticPlay.IsInvolved(GetPlayer)]"
		}

		blockoverride "pin_properties" {
			visible = "[DiplomaticPlay.IsPinnedInOutliner]"
			onclick = "[DiplomaticPlay.TogglePinInOutliner]"
			tooltip = "UNPIN_DIPLOMATIC_PLAY"
		}

		blockoverride "unpin_properties" {
			visible = "[Not(DiplomaticPlay.IsPinnedInOutliner)]"
			onclick = "[DiplomaticPlay.TogglePinInOutliner]"
			tooltip = "PIN_DIPLOMATIC_PLAY"
		}
		
		#TOP
		blockoverride "fixed_top"
		{
			#TABS
			tab_buttons = {
				blockoverride "first_button"
				{
					text = "DIPLO_PLAY_OVERVIEW"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "DIPLO_PLAY_OVERVIEW"
				}
				blockoverride "first_button_click"
				{
					onclick = "[InformationPanel.SelectTab('default')]"
				}
				blockoverride "first_button_visibility"
				{
					visible = "[InformationPanel.IsTabSelected('default')]"
				}
				blockoverride "first_button_visibility_checked"
				{
					visible = "[Not( InformationPanel.IsTabSelected('default') )]"
				}
				blockoverride "first_button_selected"
				{
					text = "DIPLO_PLAY_OVERVIEW"
				}
				blockoverride "first_button_name" {
					name = "tutorial_highlight_overview"
				}

				blockoverride "second_button"
				{
					text = "DIPLO_PLAY_INVOLVED_COUNTRIES"
				}
				blockoverride "second_button_tooltip" {
					tooltip = "DIPLO_PLAY_INVOLVED_COUNTRIES"
				}
				blockoverride "second_button_click"
				{
					onclick = "[InformationPanel.SelectTab('involved_countries')]"
				}
				blockoverride "second_button_visibility"
				{
					visible = "[InformationPanel.IsTabSelected('involved_countries')]"
				}
				blockoverride "second_button_visibility_checked"
				{
					visible = "[Not( InformationPanel.IsTabSelected('involved_countries') )]"
				}
				blockoverride "second_button_selected"
				{
					text = "DIPLO_PLAY_INVOLVED_COUNTRIES"
				}
				blockoverride "second_button_name" {
					name = "tutorial_highlight_involved_countries"
				}
				blockoverride "second_button_icon" {

					diplo_play_sway_approval = {
						blockoverride "visible_approval_icon" {
							visible = "[DiplomaticPlay.AtLeastOneCountryWouldAcceptAnySway( GetPlayer.Self )]"
						}

						position = { 10 2 }
						tooltip = "HAS_COUNTRIES_YOU_CAN_SWAY_TOOLTIP"


						blockoverride "widget_size" {
							size = { 45 28 }
						}
						blockoverride "icon_size" {
							size = { 28 28 }
						}

						textbox = {
							align = nobaseline
							parentanchor = vcenter
							position = { 30 0 }
							margin_left = 3
							raw_text = "#v [DiplomaticPlay.GetNumberOfPossibleSwayCountriesFormatted( GetPlayer.Self )]#!"
						}
					}

					diplo_play_sway_disapproval = {
						blockoverride "visible_disapproval_icon" {
							visible = "[And(Not(DiplomaticPlay.AtLeastOneCountryWouldAcceptAnySway( GetPlayer.Self )), Or(DiplomaticPlay.IsInitiator(GetPlayer.Self),DiplomaticPlay.IsTarget(GetPlayer.Self)))]"
						}

						position = { 10 2 }
						tooltip = "HAS_NO_COUNTRIES_YOU_CAN_SWAY_TOOLTIP"

						blockoverride "widget_size" {
							size = { 45 28 }
						}
						blockoverride "icon_size" {
							size = { 28 28 }
						}

						textbox = {
							align = nobaseline
							parentanchor = vcenter
							position = { 30 0 }
							margin_left = 3
							raw_text = "#v [DiplomaticPlay.GetNumberOfPossibleSwayCountriesFormatted( GetPlayer.Self )]#!"
						}
					}
				}

				#blockoverride "third_button"
				#{
				#	text = "DIPLO_PLAY_POTENTIAL_FRONTS"
				#}
				#blockoverride "third_button_click"
				#{
				#	onclick = "[InformationPanel.SelectTab('fronts')]"
				#}
				#blockoverride "third_button_visibility"
				#{
				#	visible = "[InformationPanel.IsTabSelected('fronts')]"
				#}
				#blockoverride "third_button_visibility_checked"
				#{
				#	visible = "[Not( InformationPanel.IsTabSelected('fronts') )]"
				#}
				#blockoverride "third_button_selected"
				#{
				#	text = "DIPLO_PLAY_POTENTIAL_FRONTS"
				#}
			}
			
			widget = { size = { 1 5 }}
		}
		
		### CONTENT
		blockoverride "scrollarea_content" {
			
			### OVERVIEW TAB
			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('default')]"
				using = default_content_fade
				direction = vertical
				using = default_list_position
				
				### phase images
				background = {
					fittype = start
					texture = "gfx/interface/illustrations/diplomatic_plays/phase_opening_moves_big.dds"
					using = visibility_opening_moves	
					using = phase_image_swap
					alpha = 0.5
				}
				background = {
					fittype = start
					texture = "gfx/interface/illustrations/diplomatic_plays/phase_diplomatic_maneuvers_big.dds"
					using = visibility_diplomatic_maneuvers
					using = phase_image_swap
					alpha = 0.5
				}
				background = {
					fittype = start
					texture = "gfx/interface/illustrations/diplomatic_plays/phase_countdown_to_war_big.dds"
					using = visibility_countdown_to_war
					using = phase_image_swap
					alpha = 0.5
				}
				
				### HEADER
				default_header = {
					blockoverride "text" {
						text = ""
					}
					blockoverride "size" {
						size = { 100% 65 }
					}
					
					flowcontainer = {
						direction = vertical
						parentanchor = center
						
						### phase names
						textbox = {
							visible = "[GreaterThan_int32(DiplomaticPlay.GetEscalationPause, '(int32)0')]"
							autoresize = yes
							text = "DIPLOMATIC_PLAY_ESCALATION"
							align = center|nobaseline
							using = fontsize_xl
							maximumsize = { 310 -1 }
							minimumsize = { 310 -1 }
							multiline = yes
							alpha = 0.5
						}
						textbox = {
							visible = "[Not(GreaterThan_int32(DiplomaticPlay.GetEscalationPause, '(int32)0'))]"
							autoresize = yes
							text = "DIPLOMATIC_PLAY_ESCALATION"
							align = center|nobaseline
							using = fontsize_xl
							maximumsize = { 310 -1 }
							minimumsize = { 310 -1 }
							multiline = yes
						}
						
						### phase status
						textbox = {
							autoresize = yes
							text = "DIPLOMATIC_PLAY_ESCALATION_PAUSE"
							visible = "[GreaterThan_int32(DiplomaticPlay.GetEscalationPause, '(int32)0')]"
							align = center|nobaseline
							maximumsize = { 310 -1 }
							minimumsize = { 310 -1 }
							multiline = yes
						}

						textbox = {
							autoresize = yes
							text = "DIPLOMATIC_PLAY_ESCALATION_NO_PAUSE"
							visible = "[Not(GreaterThan_int32(DiplomaticPlay.GetEscalationPause, '(int32)0'))]"
							align = center|nobaseline
							maximumsize = { 310 -1 }
							minimumsize = { 310 -1 }
							multiline = yes
						}
					}
				}	
				
				### DIPLO PLAY SIDES
				container = {
					minimumsize = { @panel_width_plus_14 -1 }
					maximumsize = { @panel_width_plus_14 -1 } 
					parentanchor = hcenter
					
					background = {
						using = dark_area
						alpha = 0.2
						margin_right = -277
						margin_bottom = 50
						
						modify_texture = {
							texture = "gfx/interface/masks/fade_vertical_center.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
					}
					
					background = {
						using = light_bg
						alpha = 0.2
						margin_left = -277
						margin_bottom = 50
						
						modify_texture = {
							texture = "gfx/interface/masks/fade_vertical_center.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}
					}
					
					#left
					diplo_play_side = {
						position = { 8 0 }
					}
					
					#right
					diplo_play_side = {
						position = { -8 0 }
						
						blockoverride "parentanchor" {
							parentanchor = right
						}
						blockoverride "header_text" {
							text = "DIPLO_PLAY_TARGET"
						}
						blockoverride "confidence_text" {
							text = "[DiplomaticPlay.GetConfidenceLabel(DiplomaticPlay.GetTarget)]"
						}
						blockoverride "confidence_tooltip" {
							tooltip = "[DiplomaticPlay.GetConfidenceDesc(DiplomaticPlay.GetTarget)]"
						}						
						blockoverride "maneuvers_tooltip" {
							tooltip = "DIPLO_PLAY_MANEUVERS_TARGET_TOOLTIP"
						}
						blockoverride "maneuvers_amount" {
							text = "DIPLO_PLAY_MANEUVERS_TARGET"
						}
						blockoverride "datacontext" {
							datacontext = "[DiplomaticPlay.GetTarget]"
							datacontext = "[DiplomaticPlay.AccessTarget]"
						}
						blockoverride "wargoal_primary_datamodel" {
							datamodel = "[DiplomaticPlay.GetTargetPrimaryWarGoals]"
						}
						blockoverride "wargoal_primary_datamodel_visibility" {
							visible = "[Not(IsDataModelEmpty(DiplomaticPlay.GetTargetPrimaryWarGoals))]"
						}
						blockoverride "wargoal_primary_datamodel_visibility_empty" {
							visible = "[IsDataModelEmpty(DiplomaticPlay.GetTargetPrimaryWarGoals)]"
						}
						blockoverride "wargoal_secondary_datamodel" {
							datamodel = "[DiplomaticPlay.GetTargetSecondaryWarGoals]"
						}
						blockoverride "wargoal_secondary_datamodel_visibility" {
							visible = "[Not(IsDataModelEmpty(DiplomaticPlay.GetTargetSecondaryWarGoals))]"
						}
						blockoverride "wargoal_secondary_datamodel_visibility_empty" {
							visible = "[IsDataModelEmpty(DiplomaticPlay.GetTargetSecondaryWarGoals)]"
						}
						blockoverride "title_background_fade" {
							using = fade_left_colored
						}
						blockoverride "side_visible_property" {
							visible = "[And(DiplomaticPlay.IsValidWarGoalDeclarer(GetPlayer.Self),DiplomaticPlay.IsTargetOrBacker(GetPlayer.Self))]"
						}
						blockoverride "side_visible_not_property" {
							visible = "[Not(DiplomaticPlay.IsTarget(GetPlayer.Self))]"
						}
						blockoverride "flowcontainers_direction" {
							righttoleft = yes
						}
						blockoverride "datamodel_supporters" {
							datamodel = "[DiplomaticPlay.AccessTargetBackers]"
						}
						blockoverride "datamodel_empty_supporters" {
							visible = "[IsDataModelEmpty(DiplomaticPlay.AccessTargetBackers)]"
						}
						blockoverride "datamodel_empty_supporters_not" {
							visible = "[Not(IsDataModelEmpty(DiplomaticPlay.AccessTargetBackers))]"
						}
					}
					
					#divider
					vertical_divider_full = {
						parentanchor = hcenter
					}
					
					### round progressbar + small phase images
					widget = {
						size = { 180 170 }
						parentanchor = hcenter

						animated_progresspie = {
							name = "progress"
							parentanchor = center
							texture = "gfx/interface/diplomatic_plays/escalation_progress.dds"
							size = { 246 246 }
							framesize = { 492 492 }
							frame = 2
							value = "[FixedPointToFloat(DiplomaticPlay.GetEscalationProgress)]"
							using = diplo_play_phases_scale
						}
						
						### phase images
						icon = {
							texture = "gfx/interface/diplomatic_plays/phase_opening_moves_small.dds"
							size = { 200 200 }
							parentanchor = center
							using = visibility_opening_moves
							using = phase_image_small_swap
							using = diplo_play_phases_scale
						}
						icon = {
							texture = "gfx/interface/diplomatic_plays/phase_diplomatic_maneuvers_small.dds"
							size = { 200 200 }
							parentanchor = center
							using = visibility_diplomatic_maneuvers
							using = phase_image_small_swap
							using = diplo_play_phases_scale
						}
						icon = {
							texture = "gfx/interface/diplomatic_plays/phase_countdown_to_war_small.dds"
							size = { 200 200 }
							parentanchor = center
							using = visibility_countdown_to_war
							using = phase_image_small_swap
							using = diplo_play_phases_scale
						}
						
						### frame on top
						icon = {
							tooltip = "DIPLOMATIC_PLAY_ESCALATION_TOOLTIP"
							texture = "gfx/interface/diplomatic_plays/escalation_progress_frame.dds"
							size = { 254 254 }
							parentanchor = center
							using = diplo_play_phases_scale
						}
						
						### paused overlay
						icon = {
							visible = "[GreaterThan_int32(DiplomaticPlay.GetEscalationPause, '(int32)0')]"
							texture = "gfx/interface/diplomatic_plays/escalation_progress_paused.dds"
							size = { 246 246 }
							parentanchor = center
							using = diplo_play_phases_scale
							alpha = 0.3
							alwaystransparent = yes
						}
						
						### current phase glow highlight
						container = {
							visible = "[Not(GreaterThan_int32(DiplomaticPlay.GetEscalationPause, '(int32)0'))]"
							
							container = {
								position = { 79 0 }
								using = visibility_opening_moves
								
								state = {
									name = _show
									alpha = 1
									duration = 0.5
									using = Animation_Curve_Default
								}
								state = {
									name = _hide
									alpha = 0
									duration = 0.5
									using = Animation_Curve_Default
								}
								
								icon = {
									texture = "gfx/interface/diplomatic_plays/escalation_glow_opening_moves.dds"
									size = { 160 130 }
									using = phase_glow
									using = diplo_play_phases_scale
								}
							}
							container = {
								position = { 0 55 }
								using = visibility_diplomatic_maneuvers
								
								state = {
									name = _show
									alpha = 1
									duration = 0.5
									using = Animation_Curve_Default
								}
								state = {
									name = _hide
									alpha = 0
									duration = 0.5
									using = Animation_Curve_Default
								}
								
								icon = {
									texture = "gfx/interface/diplomatic_plays/escalation_glow_diplomatic_maneuvers.dds"
									size = { 300 193 }
									using = phase_glow
									using = diplo_play_phases_scale
								}
							}
							container = {
								position = { 6 0 }
								using = visibility_countdown_to_war
								
								state = {
									name = _show
									alpha = 1
									duration = 0.5
									using = Animation_Curve_Default
								}
								state = {
									name = _hide
									alpha = 0
									duration = 0.5
									using = Animation_Curve_Default
								}
								
								icon = {
									texture = "gfx/interface/diplomatic_plays/escalation_glow_countdown_to_war.dds"
									size = { 160 130 }
									using = phase_glow
									using = diplo_play_phases_scale
								}
							}
						}
						
						### phase shift glows
						icon = {
							texture = "gfx/interface/diplomatic_plays/escalation_phase_shift_1.dds"
							size = { 65 65 }
							position = { 133 38 }
							using = visibility_diplomatic_maneuvers
							using = diplo_play_phases_scale
							alpha = 0
							
							state = {
								name = _show
								next = 2
								alpha = 0
							}
							state = {
								name = 2
								next = 3
								duration = 1
								alpha = 1
							}
							state = {
								name = 3
								duration = 1
								alpha = 0
							}
						}
						icon = {
							texture = "gfx/interface/diplomatic_plays/escalation_phase_shift_2.dds"
							size = { 65 65 }
							position = { 5 52 }
							using = visibility_countdown_to_war
							using = diplo_play_phases_scale
							alpha = 0
							
							state = {
								name = _show
								next = 2
								alpha = 0
							}
							state = {
								name = 2
								next = 3
								duration = 1
								alpha = 1
							}
							state = {
								name = 3
								duration = 1
								alpha = 0
							}
						}
					}
				}

				### INVOLVED NATIONS SUMMARY
				flowcontainer = {
					parentanchor = hcenter

					using = entry_bg_fancy
					
					involved_countries_summary_gridbox = {
						blockoverride "involved_battalions_tooltip" {
							tooltip = "[DiplomaticPlay.GetNumLeaningMobilizedBattalionsForSideBreakdown( DiplomaticPlay.GetInitiator )]"
						}

						blockoverride "involved_battalions_alpha" {
							alpha = "[TransparentIfZero_int32(DiplomaticPlay.GetNumLeaningTotalBattalionsForSide( DiplomaticPlay.GetInitiator ))]"
						}

						blockoverride "involved_num_mobilized_battalions" {
							text = "[DiplomaticPlay.GetNumLeaningMobilizedBattalionsForSide( DiplomaticPlay.GetInitiator )]"
						}

						blockoverride "involved_num_total_battalions" {
							text = "[DiplomaticPlay.GetNumLeaningTotalBattalionsForSide( DiplomaticPlay.GetInitiator )]"
						}

						blockoverride "involved_flotillas_tooltip" {
							tooltip = "[DiplomaticPlay.GetNumLeaningTotalWarshipsForSideBreakdown( DiplomaticPlay.GetInitiator )]"
						}

						blockoverride "involved_flotillas_alpha" {
							alpha = "[TransparentIfZero_int32(DiplomaticPlay.GetNumLeaningTotalWarshipsForSide( DiplomaticPlay.GetInitiator ))]"
						}

						blockoverride "involved_num_total_warships" {
							text = "[DiplomaticPlay.GetNumLeaningTotalWarshipsForSide( DiplomaticPlay.GetInitiator )]"
						}

						blockoverride "datamodel" {
							datamodel = "[DiplomaticPlay.AccessInitiatorLeaning]"
						}
						blockoverride "header_text" {
							text = "DIPLO_PLAY_LEANING_INITIATOR"
						}
					}

					vertical_divider = {}
					
					involved_countries_summary_gridbox = {
						blockoverride "involved_battalions_tooltip" {
							tooltip = "[DiplomaticPlay.GetNumOnTheFenceBattalionsBreakdown]"
						}

						blockoverride "involved_battalions_alpha" {
							alpha = "[TransparentIfZero_int32(DiplomaticPlay.GetNumOnTheFenceTotalBattalions)]"
						}

						blockoverride "involved_num_mobilized_battalions" {
							text = "[DiplomaticPlay.GetNumOnTheFenceMobilizedBattalions]"
						}

						blockoverride "involved_num_total_battalions" {
							text = "[DiplomaticPlay.GetNumOnTheFenceTotalBattalions]"
						}

						blockoverride "involved_flotillas_tooltip" {
							tooltip = "[DiplomaticPlay.GetNumOnTheFenceWarshipsBreakdown]"
						}

						blockoverride "involved_flotillas_alpha" {
							alpha = "[TransparentIfZero_int32(DiplomaticPlay.GetNumOnTheFenceTotalWarships)]"
						}

						blockoverride "involved_num_total_warships" {
							text = "[DiplomaticPlay.GetNumOnTheFenceTotalWarships]"
						}

						blockoverride "datamodel" {
							datamodel = "[DiplomaticPlay.AccessOnTheFence]"
						}
						blockoverride "header_text" {
							text = "DIPLO_PLAY_ON_THE_FENCE"
						}
					}
					
					vertical_divider = {}
					
					involved_countries_summary_gridbox = {
						blockoverride "involved_battalions_tooltip" {
							tooltip = "[DiplomaticPlay.GetNumLeaningMobilizedBattalionsForSideBreakdown( DiplomaticPlay.GetTarget )]"
						}

						blockoverride "involved_battalions_alpha" {
							alpha = "[TransparentIfZero_int32(DiplomaticPlay.GetNumLeaningTotalBattalionsForSide( DiplomaticPlay.GetTarget ))]"
						}

						blockoverride "involved_num_mobilized_battalions" {
							text = "[DiplomaticPlay.GetNumLeaningMobilizedBattalionsForSide( DiplomaticPlay.GetTarget )]"
						}

						blockoverride "involved_num_total_battalions" {
							text = "[DiplomaticPlay.GetNumLeaningTotalBattalionsForSide( DiplomaticPlay.GetTarget )]"
						}

						blockoverride "involved_flotillas_tooltip" {
							tooltip = "[DiplomaticPlay.GetNumLeaningTotalWarshipsForSideBreakdown( DiplomaticPlay.GetTarget )]"
						}

						blockoverride "involved_flotillas_alpha" {
							alpha = "[TransparentIfZero_int32(DiplomaticPlay.GetNumLeaningTotalWarshipsForSide( DiplomaticPlay.GetTarget ))]"
						}

						blockoverride "involved_num_total_warships" {
							text = "[DiplomaticPlay.GetNumLeaningTotalWarshipsForSide( DiplomaticPlay.GetTarget )]"
						}

						blockoverride "datamodel" {
							datamodel = "[DiplomaticPlay.AccessTargetLeaning]"
						}
						blockoverride "header_text" {
							text = "DIPLO_PLAY_LEANING_TARGET"
						}
					}
				}
			}
			
			### INVOLVED COUNTRIES TAB
			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('involved_countries')]"
				using = default_content_fade
				direction = vertical
				using = default_list_position
				spacing = 10
				
				### bgs for stance lanes
				background = {
					using = light_bg
					margin = { -164 0 }
					margin_bottom = 50
					alpha = 0.5
					
					modify_texture = {
						texture = "gfx/interface/masks/fade_vertical_center.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
					}
				}

				
				### phase images
				background = {
					fittype = start
					texture = "gfx/interface/illustrations/diplomatic_plays/phase_opening_moves_big.dds"
					using = visibility_opening_moves	
					using = phase_image_swap
					alpha = 0.5
				}
				background = {
					fittype = start
					texture = "gfx/interface/illustrations/diplomatic_plays/phase_diplomatic_maneuvers_big.dds"
					using = visibility_diplomatic_maneuvers
					using = phase_image_swap
					alpha = 0.5
				}
				background = {
					fittype = start
					texture = "gfx/interface/illustrations/diplomatic_plays/phase_countdown_to_war_big.dds"
					using = visibility_countdown_to_war
					using = phase_image_swap
					alpha = 0.5
				}
				
				### TOP INFO
				container = {
					parentanchor = hcenter
					minimumsize = { @panel_width_plus_14 -1 }
					
					### INITIATOR
					diplo_play_side_sway_tab = {
						parentanchor = left
						position = { 30 0 }
					}
					
					### INSTRUCTION (CANNOT SWAY AND INITIATOR OR TARGET)
					textbox = {
						visible = "[And(Or(LessThan_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_OPENING_PHASE_END')), GreaterThanOrEqualTo_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_CLOSING_PHASE_START'))), DiplomaticPlay.IsTargetOrInitiator(GetPlayer))]"
						position = { 0 10 }
						parentanchor = center
						autoresize = yes
						minimumsize = { 280 -1 }
						maximumsize = { 280 -1 }
						multiline = yes
						text = "DIPLO_PLAY_CANNOT_SWAY"
						default_format = "#title"
						align = center|nobaseline
						using = fontsize_large
					}

					### INSTRUCTION (CANNOT SWAY AND INVOLVED)
					textbox = {
						visible = "[And(Or(LessThan_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_OPENING_PHASE_END')), GreaterThanOrEqualTo_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_CLOSING_PHASE_START'))), And(Not(Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer),DiplomaticPlay.IsBacker(GetPlayer))), Not(DiplomaticPlay.IsTargetOrInitiator(GetPlayer))))]"
						position = { 0 10 }
						parentanchor = center
						autoresize = yes
						minimumsize = { 280 -1 }
						maximumsize = { 280 -1 }
						multiline = yes
						text = "DIPLO_PLAY_CLICK_TO_SET_STANCE"
						default_format = "#title"
						align = center|nobaseline
						using = fontsize_large
					}

					### INSTRUCTION (INITIATOR OR TARGET CAN SWAY)
					textbox = {
						visible = "[And(And(GreaterThanOrEqualTo_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_OPENING_PHASE_END')),LessThan_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_CLOSING_PHASE_START'))), And(DiplomaticPlay.IsTargetOrInitiator(GetPlayer), Not(Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer),DiplomaticPlay.IsBacker(GetPlayer)))))]"
						position = { 0 10 }
						parentanchor = center
						autoresize = yes
						minimumsize = { 280 -1 }
						maximumsize = { 280 -1 }
						multiline = yes
						text = "DIPLO_PLAY_CLICK_TO_SWAY"
						default_format = "#title"
						align = center|nobaseline
						using = fontsize_large
					}
					
					### INSTRUCTION (INVOLVED COUNTRIES)
					textbox = {
						visible = "[Or(Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer),DiplomaticPlay.IsBacker(GetPlayer)), Not(DiplomaticPlay.IsInvolved(GetPlayer)))]"
						position = { 0 10 }
						parentanchor = center
						autoresize = yes
						minimumsize = { 280 -1 }
						maximumsize = { 280 -1 }
						multiline = yes
						text = "DIPLO_PLAY_CLICK_TO_SET_STANCE"
						default_format = "#title"
						align = hcenter|nobaseline
						using = fontsize_large
					}
					
					### TARGET
					diplo_play_side_sway_tab = {
						parentanchor = right
						position = { -30 0 }

						blockoverride "datacontext" {
							datacontext = "[DiplomaticPlay.GetTarget]"
						}

						blockoverride "background" {
							background = {
								using = fade_center_colored
								color = "[DiplomaticPlay.GetTarget.GetMapColor]"
								margin = { 20 0 }
								margin_bottom = 50
							}
						}

						blockoverride "header_text" {
							text = "DIPLO_PLAY_TARGET"
						}

						blockoverride "side_visible_property" {
							visible = "[DiplomaticPlay.IsTarget(GetPlayer.Self)]"
						}

						blockoverride "parentanchor" {
							parentanchor = right
						}
					}
				}

				### INVOLVED NATIONS
				flowcontainer = {
					direction = horizontal
					parentanchor = hcenter
					spacing = 2

					# initiator backer
					diplomatic_play_stance_lane_backer = {
						background = {
							using = fade_center_colored
							color = "[DiplomaticPlay.GetInitiator.GetMapColor]"
							margin_bottom = 10
						}

						blockoverride "list_datamodel" {
							datamodel = "[DiplomaticPlay.AccessInitiatorBackersNoLoyalSubjects]"
						}

						blockoverride "icon_properties" {
							texture = "gfx/interface/icons/diplo_play_icons/stance_supports.dds"
							mirror = horizontal
							tooltip = "DIPLO_PLAY_SUPPORTS_INITIATOR_TOOLTIP"
							using = tooltip_above
						}

						blockoverride "show_icon" {
							visible = "[Or(Or(DiplomaticPlay.IsTargetOrInitiator(GetPlayer), DiplomaticPlay.IsInitiatorBacker(GetPlayer)), Not(DiplomaticPlay.IsInvolved(GetPlayer)))]"
						}

						blockoverride "show_button" {
							visible = no
						}
						
						blockoverride "reverse_sway_button_properties" {
							enabled = "[Or(DiplomaticPlay.CanSwayCountry(GetPlayer.Self, DiplomaticPlay.GetInitiator), DiplomaticPlay.CanSupportInitiator(GetPlayer))]"
							onclick = "[InformationPanelBar.OpenSwayCountryPanel( DiplomaticPlay.Self, DiplomaticPlay.GetInitiator )]"
							tooltip = "[DiplomaticPlay.GetCanSwayCountryDesc(GetPlayer.Self, DiplomaticPlay.GetInitiator)]"
						}					
						
						blockoverride "show_reverse_sway_button" {
							visible = "[And(Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer), DiplomaticPlay.IsBacker(GetPlayer)), Not(DiplomaticPlay.IsInitiatorBacker(GetPlayer)))]"
						}	
						
						blockoverride "show_reverse_sway_approval" {
							visible = "[DiplomaticPlay.WouldAcceptAnySway( GetPlayer.Self, DiplomaticPlay.GetInitiator )]"
						}							

						blockoverride "show_reverse_sway_disapproval" {
							visible = "[Not(DiplomaticPlay.WouldAcceptAnySway( GetPlayer.Self, DiplomaticPlay.GetInitiator ))]"
						}							
					}
					
					vertical_divider_full = { 
						#maximumsize = { -1 65 }
					}
					
					# on the fence and leaning
					diplomatic_play_stance_lane_fence_and_leaning = {
						blockoverride "list_datamodel" {
							datamodel = "[DiplomaticPlay.AccessUndecided]"
						}
					}
					
					vertical_divider_full = { 
						#maximumsize = { -1 65 }
					}
					
					# target backer
					diplomatic_play_stance_lane_backer = {
						background = {
							using = fade_center_colored
							color = "[DiplomaticPlay.GetTarget.GetMapColor]"
							margin_bottom = 10
						}

						blockoverride "list_datamodel" {
							datamodel = "[DiplomaticPlay.AccessTargetBackersNoLoyalSubjects]"
						}

						blockoverride "icon_properties" {
							texture = "gfx/interface/icons/diplo_play_icons/stance_supports.dds"
							tooltip = "DIPLO_PLAY_SUPPORTS_TARGET_TOOLTIP"
							using = tooltip_above
						}

						blockoverride "show_icon" {
							visible = "[Or(Or(DiplomaticPlay.IsTargetOrInitiator(GetPlayer), DiplomaticPlay.IsTargetBacker(GetPlayer)), Not(DiplomaticPlay.IsInvolved(GetPlayer)))]"
						}

						blockoverride "show_button" {
							visible = no
						}
							
						blockoverride "reverse_sway_button_properties" {
							enabled = "[Or(DiplomaticPlay.CanSwayCountry(GetPlayer.Self, DiplomaticPlay.GetTarget), DiplomaticPlay.CanSupportTarget(GetPlayer))]"
							onclick = "[InformationPanelBar.OpenSwayCountryPanel( DiplomaticPlay.Self, DiplomaticPlay.GetTarget )]"
							tooltip = "[DiplomaticPlay.GetCanSwayCountryDesc(GetPlayer.Self, DiplomaticPlay.GetTarget)]"
						}	

						blockoverride "show_reverse_sway_button" {
							visible = "[And(Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer),DiplomaticPlay.IsBacker(GetPlayer)), Not(DiplomaticPlay.IsTargetBacker(GetPlayer)))]"
						}
						
						blockoverride "show_reverse_sway_approval" {
							visible = "[DiplomaticPlay.WouldAcceptAnySway( GetPlayer.Self, DiplomaticPlay.GetTarget )]"
						}	

						blockoverride "show_reverse_sway_disapproval" {
							visible = "[Not(DiplomaticPlay.WouldAcceptAnySway( GetPlayer.Self, DiplomaticPlay.GetTarget ))]"
						}							
					}
				}
			}
		}
		
		blockoverride "fixed_bottom" {
			flowcontainer = {
				visible = "[InformationPanel.IsTabSelected('default')]"
				using = default_content_fade
				direction = vertical
				spacing = 8
				
				### ACTION BUTTONS
				flowcontainer = {
					visible = "[DiplomaticPlay.IsInvolved(GetPlayer)]"
					direction = vertical
					parentanchor = hcenter
					spacing = 3
					
					button = {
						using = default_button_action
						visible = "[And( DiplomaticPlay.IsInitiator(GetPlayer), Not( IsValid( DiplomaticPlay.SwitchSide( GetPlayer ))))]"
						size = { @panel_width 50 }
						text = "DIPLO_PLAY_BACK_DOWN"
						using = fontsize_large
						enabled = "[DiplomaticPlay.CanYield(GetPlayer)]"
						tooltip = "YIELD_DIPLOMATIC_PLAY_TOOLTIP"
						onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.Yield(GetPlayer))]"
					}
					button = {
						using = default_button_action
						visible = "[And( DiplomaticPlay.IsTarget(GetPlayer), Not( IsValid( DiplomaticPlay.SwitchSide( GetPlayer ))))]"
						size = { @panel_width 50 }
						text = "DIPLO_PLAY_GIVE_IN"
						using = fontsize_large
						enabled = "[DiplomaticPlay.CanYield(GetPlayer)]"
						tooltip = "YIELD_DIPLOMATIC_PLAY_TOOLTIP"
						onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.Yield(GetPlayer))]"
					}
					button = {
						using = default_button_action
						visible = "[IsValid( DiplomaticPlay.SwitchSide( GetPlayer ))]"
						size = { @panel_width 50 }
						text = "DIPLOMATIC_PLAY_SWITCH_COUNTRY"
						using = fontsize_large
						enabled = "[IsValid( DiplomaticPlay.SwitchSide( GetPlayer ))]"
						tooltip = "DIPLOMATIC_PLAY_SWITCH_COUNTRY_TOOLTIP"
						onclick = "[Execute( DiplomaticPlay.SwitchSide( GetPlayer ))]"
					}
					button = {
						using = default_button_action
						visible = "[And( Not( DiplomaticPlay.IsInitiator(GetPlayer) ), Not( DiplomaticPlay.IsTarget(GetPlayer) ))]"
						size = { @panel_width 50 }
						text = "DIPLO_PLAY_DECLARE_NEUTRALITY"
						using = fontsize_large
						enabled = "[DiplomaticPlay.CanDeclareNeutrality(GetPlayer)]"
						tooltip = "DECLARE_NEUTRALITY_DIPLOMATIC_PLAY_TOOLTIP"
						onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.DeclareNeutrality(GetPlayer))]"
					}						
				}
			}
		}
	}
}

### CUSTOM POPUP TYPES
types custom_popup_types
{
	type diplo_play_sway_approval = widget {
		block "visible_approval_icon" {}
		block "widget_size" {
			size = { 28 28 }
		}
		parentanchor = vcenter
		
		icon = {
			block "icon_size" {
				size = { 100% 100% }
			}
			texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
		}
	}

	type diplo_play_sway_disapproval = widget {
		block "visible_disapproval_icon" {}
		size = { 28 28 }
		parentanchor = vcenter
		
		icon = {
			size = { 100% 100% }
			texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
		}
	}
	
	type diplo_play_side_sway_tab = container {
		minimumsize = { @diplo_play_side_width -1 }
		
		flowcontainer = {
			block "parentanchor" {}
			direction = vertical
			spacing = 10
			margin = { 7 10 }

			block "background" {
				background = {
					using = fade_center_colored
					color = "[DiplomaticPlay.GetInitiator.GetMapColor]"
					margin = { 20 0 }
					margin_bottom = 50
				}
			}

			block "datacontext" {
				datacontext = "[DiplomaticPlay.GetInitiator]"
			}
			
			flowcontainer = {
				block "parentanchor" {}
				spacing = 7
				parentanchor = hcenter 
				
				textbox = {
					autoresize = yes
					using = fontsize_large
					block "header_text" {
						text = "DIPLO_PLAY_INITIATOR"
					}
					align = nobaseline
					default_format = "#title"
				}
				textbox = {
					block "side_visible_property" {
						visible = "[DiplomaticPlay.IsInitiator(GetPlayer.Self)]"
					}
					autoresize = yes
					using = fontsize_large
					text = "DIPLO_PLAY_YOU"
					align = nobaseline
				}
			}
			
			widget = {
				block "parentanchor" {}
				icon = {
					block "side_visible_property" {
						visible = "[DiplomaticPlay.IsInitiator(GetPlayer.Self)]"
					}
					parentanchor = center
					using = rotate_glow_animation_02
					size = { 220 220 }
				}
				large_flag = {
					resizeparent = yes
					mobilization_icon_flag = {}
				}
			}
		}
	}
	
	### involved countries summary gridbox
	type involved_countries_summary_gridbox = flowcontainer {
		margin = { 5 3 }
		margin_bottom = 8
		direction = vertical

		textbox = {
			minimumsize = { 170 -1 }
			maximumsize = { 170 -1 }
			multiline = yes
			autoresize = yes
			margin = { 5 5 }
			elide = right
			block "header_text" {}
			default_format = "#title"
			align = center|nobaseline
		}
		
		flowcontainer = {
			margin_bottom = 5
			direction = vertical
			parentanchor = hcenter	
			
			flowcontainer = {
				block "involved_battalions_tooltip" {}
				minimumsize = { 140 -1 }
				spacing = 3

				block "involved_battalions_alpha" {}

				icon = {
					size = { 22 22 }
					texture = "gfx/interface/icons/generic_icons/battalions.dds"
					parentanchor = vcenter
				}

				textbox = {
					size = { 40 25 }
					block "involved_num_mobilized_battalions" {}
					align = nobaseline
					default_format = "#v"
					autoresize = yes
				}

				textbox = {
					size = { 10 25 }
					raw_text = "/"
					align = center|nobaseline
					autoresize = yes
				}

				textbox = {
					size = { 40 25 }
					block "involved_num_total_battalions" {}
					align = nobaseline
					autoresize = yes
				}
			}
			
			flowcontainer = {
				block "involved_flotillas_tooltip" {}
				minimumsize = { 140 -1 }
				spacing = 3

				block "involved_flotillas_alpha" {}

				icon = {
					size = { 22 22 }
					texture = "gfx/interface/icons/generic_icons/flotillas.dds"
					parentanchor = vcenter
				}

				textbox = {
					size = { 40 25 }
					block "involved_num_total_warships" {}
					align = nobaseline
					default_format = "#v"
				}
			}
		}
		
		fixedgridbox = {
			addcolumn = 36
			addrow = 25
			datamodel_wrap = 4
			flipdirection = yes
			block "datamodel" {}
			parentanchor = hcenter

			item = {
				widget = {
					size = { 36 25 }
					
					icon = {
						visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, Country.Self)]"
						parentanchor = center
						using = rotate_glow_animation_02
						size = { 65 65 }
					}
					tiny_flag = {
						mobilization_icon_flag = {}
						parentanchor = center
					}
				}
			}
		}
	}
	
	### DIPLO PLAY SIDE
	type diplo_play_side = flowcontainer {
		direction = vertical
		block "datacontext" {
			datacontext = "[DiplomaticPlay.GetInitiator]"
			datacontext = "[DiplomaticPlay.AccessInitiator]"
		}
		block "parentanchor" {}
		
		### TOTAL MOBILIZED
		flowcontainer = {
			margin = { 0 10 }
			direction = vertical
			block "parentanchor" {}
			minimumsize = { @diplo_play_side_width -1 }
			spacing = 2		
			
			textbox = {
				block "parentanchor" {}
				autoresize = yes
				text = "DIPLO_PLAY_TOTAL_MOBILIZED"
				align = nobaseline
				default_format = "#title"
			}
			
			flowcontainer = {
				spacing = 5

				block "parentanchor" {}

				flowcontainer = {				
					tooltip = "DIPLO_PLAY_TOTAL_MOBILIZED_BATTALIONS_BREAKDOWN"
					alpha = "[TransparentIfZero_int32(DiplomaticPlay.GetTotalNumMobilizedBattalionsForSide( Country.Self ))]"
						
					icon = {
						size = { 25 25 }
						texture = "gfx/interface/icons/generic_icons/battalions.dds"
						parentanchor = vcenter
					}

					textbox = {
						autoresize = yes
						text = "[DiplomaticPlay.GetTotalNumMobilizedBattalionsForSide( Country.Self )|v]"
						align = nobaseline
						using = fontsize_xxl
						parentanchor = vcenter
					}
				}
				
				widget = { size = { 10 0 }}

				flowcontainer = {
					spacing = 5
					tooltip = "DIPLO_PLAY_TOTAL_FLOTILLAS_BREAKDOWN"
					alpha = "[TransparentIfZero_int32(DiplomaticPlay.GetTotalNumWarshipsForSide( Country.Self ))]"
					
					
					icon = {
						size = { 25 25 }
						texture = "gfx/interface/icons/generic_icons/flotillas.dds"
						parentanchor = vcenter
					}

					textbox = {
						autoresize = yes
						text = "[DiplomaticPlay.GetTotalNumWarshipsForSide( Country.Self )|v]"
						align = nobaseline
						using = fontsize_xxl
						parentanchor = vcenter
					}
				}
			}
		}
		
		divider_clean = {}
		
		widget = { size = { 10 10 }}
		
		### HEADER
		flowcontainer = {
			block "parentanchor" {}
			spacing = 5
			
			textbox = {
				autoresize = yes
				block "header_text" {
					text = "DIPLO_PLAY_INITIATOR"
				}
				align = nobaseline
				default_format = "#title"
			}

			textbox = {
				block "side_visible_property" {
					visible = "[DiplomaticPlay.IsInitiator(GetPlayer.Self)]"
				}
				autoresize = yes
				text = "DIPLO_PLAY_YOU"
				align = nobaseline
				parentanchor = vcenter
			}
		}

		### CONFIDENCE
		flowcontainer = {
			block "parentanchor" {}
			spacing = 5

			block "confidence_tooltip" {
				tooltip = "[DiplomaticPlay.GetConfidenceDesc(DiplomaticPlay.GetInitiator)]"
			}
			
			textbox = {
				autoresize = yes
				using = fontsize_xl
				block "confidence_text" {
					raw_text = "[DiplomaticPlay.GetConfidenceLabel(DiplomaticPlay.GetInitiator)]"
				}
				align = nobaseline
			}	
		}		
		
		### MANEUVERS
		flowcontainer = {
			block "parentanchor" {}
			spacing = 3
			block "maneuvers_tooltip" {
				tooltip = "DIPLO_PLAY_MANEUVERS_INITIATOR_TOOLTIP"
			}
			
			icon = {
				texture = "gfx/interface/icons/generic_icons/maneuvers.dds"
				size = { 28 28 }
				parentanchor = vcenter
			}
			textbox = {
				block "maneuvers_amount" {
					text = "DIPLO_PLAY_MANEUVERS_INITIATOR"
				}
				autoresize = yes
				align = nobaseline
				parentanchor = vcenter
				using = fontsize_large
			}
		}				
		
		### FLAG + TROOPS
		flowcontainer = {
			margin = { 0 15 }
			block "parentanchor" {}
			block "flowcontainers_direction" {}
			spacing = 10

			# flag
			large_flag = {
				parentanchor = vcenter
				mobilization_icon_flag = {}

				blockoverride "is_player_glow" {
					visible = no
				}
			}

			# troops
			container = {
				parentanchor = vcenter

				icon = {
					block "side_visible_not_property" {
						visible = "[Not(DiplomaticPlay.IsInitiator(GetPlayer.Self))]"
					}
					using = entry_bg
					size = { 100% 100% }
				}
				
				button = {
					block "side_visible_property" {
						visible = "[DiplomaticPlay.IsInitiator(GetPlayer.Self)]"
					}
					using = default_button
					size = { 100% 100% }
					parentanchor = vcenter
					onclick = "[InformationPanelBar.OpenPanel('military')]"
				}
				
				flowcontainer = {
					direction = vertical
					margin = { 10 7 }
					minimumsize = { 150 -1 }
					
					flowcontainer = {
						tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
						spacing = 5

						icon = {
							size = { 25 25 }
							texture = "gfx/interface/icons/generic_icons/battalions.dds"
							parentanchor = vcenter
						}

						textbox = {
							autoresize = yes
							minimumsize = { 48 25 }
							maximumsize = { 48 25 }
							using = elide_fontsize_min
							raw_text = "#v [Country.GetBattalions]#!"
							align = nobaseline
						}

						textbox = {
							autoresize = yes
							minimumsize = { 48 25 }
							maximumsize = { 48 25 }
							using = elide_fontsize_min
							alpha = "[TransparentIfZero(Country.GetMobilizationRatio)]"
							raw_text = "#v [Country.GetMobilizationRatio|0%]#! @mobilization!"
							align = nobaseline
						}
					}
					
					flowcontainer = {
						tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP"
						spacing = 5
						alpha = "[TransparentIfZero_int32(Country.GetWarships)]"

						icon = {
							size = { 25 25 }
							texture = "gfx/interface/icons/generic_icons/flotillas.dds"
							parentanchor = vcenter
						}

						textbox = {
							autoresize = yes
							minimumsize = { 40 30 }
							raw_text = "#variable [Country.GetWarships]#!"
							align = nobaseline
						}
					}
				}
			}
		}
		
		divider_clean = {}
		
		### SUPPORTERS
		textbox = {
			block "parentanchor" {}
			block "datamodel_empty_supporters_not" {
				visible = "[Not(IsDataModelEmpty(DiplomaticPlay.AccessInitiatorBackers))]"
			}
			text = "DIPLO_PLAY_SUPPORTS"
			autoresize = yes
			align = nobaseline
			default_format = "#title"
			margin = { 5 0 }
			margin_top = 2
		}
		textbox = {
			block "datamodel_empty_supporters" {
				visible = "[IsDataModelEmpty(DiplomaticPlay.AccessInitiatorBackers)]"
			}
			block "parentanchor" {}
			text = "DIPLO_PLAY_NO_SUPPORTS"
			autoresize = yes
			align = hcenter|nobaseline
			using = empty_state_text_properties
			margin = { 5 0 }
			minimumsize = { @diplo_play_side_width 50 }
		}
		
		fixedgridbox = {
			addcolumn = 36
			addrow = 25
			datamodel_wrap = 7
			flipdirection = yes
			block "datamodel_supporters" {
				datamodel = "[DiplomaticPlay.AccessInitiatorBackers]"
			}
			block "parentanchor" {}

			item = {
				widget = {
					size = { 36 25 }
					
					icon = {
						visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, Country.Self)]"
						parentanchor = center
						using = rotate_glow_animation_02
						size = { 65 65 }
					}
					tiny_flag = {
						mobilization_icon_flag = {}
						parentanchor = center
					}
				}
			}
		}
		
		widget = { size = { 5 5 }}
		
		divider_clean = {}
		
		### WARGOALS
		flowcontainer = {
			margin_top = 2
			margin_bottom = 10
			direction = vertical
			spacing = 5
			block "parentanchor" {}

			add_wargoal_button = {
				block "side_visible_property" {
					visible = "[And(DiplomaticPlay.IsValidWarGoalDeclarer(GetPlayer.Self),DiplomaticPlay.IsInitiatorOrBacker(GetPlayer.Self))]"
				}
			}

			widget = {
				size = { 100% 26 }

				background = {
					block "title_background_fade" {
						using = fade_right_colored
					}
					
					color = "[Country.GetMapColor]"
					margin_bottom = 3
				}
			
				textbox = {
					block "parentanchor" {}
					text = "PRIMARY_WARGOALS"
					autoresize = yes
					align = nobaseline
					margin = { 5 0 }
					default_format = "#title"
					margin_top = 3
				}
			}

			textbox = {
				block "wargoal_primary_datamodel_visibility_empty" {
					visible = "[IsDataModelEmpty(DiplomaticPlay.GetInitiatorPrimaryWarGoals)]"
				}

				block "parentanchor" {}
				text = "NO_PRIMARY_WARGOALS"
				autoresize = yes
				align = nobaseline
				margin = { 5 0 }
				using = empty_state_text_properties
				margin_top = 3

			}

			flowcontainer = {
				spacing = 2
				direction = vertical

				block "wargoal_primary_datamodel_visibility" {
					visible = "[Not(IsDataModelEmpty(DiplomaticPlay.GetInitiatorPrimaryWarGoals))]"
				}

				block "wargoal_primary_datamodel" {
					datamodel = "[DiplomaticPlay.GetInitiatorPrimaryWarGoals]"
				}
				
				item = {
					container = {
						war_goal_item = {
							visible = "[WarGoal.HoldsArticle]"

							blockoverride "war_goal_tooltip" {
								tooltipwidget = {
									RegularTooltip_WarGoalArticle = {
										datacontext = "[WarGoal.GetArticleDraft]"
									}
								}
							}
						}

						war_goal_item = {
							visible = "[Not(WarGoal.HoldsArticle)]"
						}

						icon = {
							visible = "[WarGoal.IsPrimaryDemand]"
							using = highlighted_active_square_selection
						}
					}
				}
			}

			divider_clean = {}

			textbox = {
				block "parentanchor" {}
				text = "SECONDARY_WARGOALS"
				autoresize = yes
				align = nobaseline
				margin = { 5 0 }
				default_format = "#title"
				margin_top = 3

			}

			textbox = {
				block "wargoal_secondary_datamodel_visibility_empty" {
					visible = "[IsDataModelEmpty(DiplomaticPlay.GetInitiatorSecondaryWarGoals)]"
				}

				block "parentanchor" {}
				text = "NO_SECONDARY_WARGOALS"
				autoresize = yes
				align = nobaseline
				margin = { 5 0 }
				using = empty_state_text_properties
				margin_top = 3

			}

			flowcontainer = {
				spacing = 2
				direction = vertical

				block "wargoal_secondary_datamodel_visibility" {
					visible = "[Not(IsDataModelEmpty(DiplomaticPlay.GetInitiatorSecondaryWarGoals))]"
				}
				
				block "wargoal_secondary_datamodel" {
					datamodel = "[DiplomaticPlay.GetInitiatorSecondaryWarGoals]"
				}
				
				item = {
					container = {
						war_goal_item = {
							visible = "[WarGoal.HoldsArticle]"

							blockoverride "war_goal_tooltip" {
								tooltipwidget = {
									RegularTooltip_WarGoalArticle = {
										datacontext = "[WarGoal.GetArticleDraft]"
									}
								}
							}
						}

						war_goal_item = {
							visible = "[Not(WarGoal.HoldsArticle)]"
						}

						icon = {
							visible = "[WarGoal.IsPrimaryDemand]"
							using = highlighted_active_square_selection
						}
					}
				}
			}
		}
	}

	type war_goal_item = flowcontainer {
		margin = { 0 5 }
		margin_left = 10
		spacing = 3
		minimumsize = { @diplo_play_side_width 40 }
		maximumsize = { @diplo_play_side_width -1 }
		onmousehierarchyenter = "[WarGoal.ShowHighlight]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		alwaystransparent = no
		direction = vertical

		block "war_goal_tooltip" {
			tooltipwidget = {
				RegularTooltip_WarGoal = {}
			}
		}

		background = {
			visible = "[And(Not(WarGoal.HoldsArticle), Not(WarGoal.IsPrimaryDemand))]"
			using = entry_bg_simple
			margin_left = 1
			margin_right = 1
		}

		background = {
			visible = "[And(Not(WarGoal.HoldsArticle), WarGoal.IsPrimaryDemand)]"
			using = entry_bg_simple_solid
			margin_left = 1
			margin_right = 1
		}

		background = {
			visible = "[And(WarGoal.HoldsArticle, Not(WarGoal.IsPrimaryDemand))]"
			using = paper_bg_light
			margin_left = 1
			margin_right = 1
		}

		background = {
			visible = "[And(WarGoal.HoldsArticle, WarGoal.IsPrimaryDemand)]"
			using = paper_bg
			margin_left = 1
			margin_right = 1
		}

		flowcontainer = {
			spacing = 5

			background = {
				visible = "[WarGoal.IsPrimaryDemand]"
				using = fade_right_simple
				margin = { 10 0 }
			}

			icon = {
				visible = "[WarGoal.HoldsArticle]"
				size = { 28 28 }
				parentanchor = vcenter
				texture = "[WarGoal.GetArticleType.GetIcon]"
			}

			icon = {
				visible = "[Not(WarGoal.HoldsArticle)]"
				size = { 28 28 }
				parentanchor = vcenter
				texture = "[WarGoal.GetTexture]"
			}
					
			textbox = {
				visible = "[WarGoal.IsPrimaryDemand]"
				autoresize = yes
				minimumsize = { 207 -1 }
				maximumsize = { 207 -1 }
				align = nobaseline
				parentanchor = vcenter
				multiline = yes
				margin_left = 5
				raw_text = "#b [WarGoal.GetName]#!"
			}

			textbox = {
				visible = "[And(Not(WarGoal.HoldsArticle), Not(WarGoal.IsPrimaryDemand))]"
				autoresize = yes
				minimumsize = { 207 -1 }
				maximumsize = { 207 -1 }
				align = nobaseline
				parentanchor = vcenter
				multiline = yes
				margin_left = 5
				raw_text = "[WarGoal.GetName]"
			}

			treaty_textbox = {
				visible = "[And(WarGoal.HoldsArticle, Not(WarGoal.IsPrimaryDemand))]"
				autoresize = yes
				minimumsize = { 207 -1 }
				maximumsize = { 207 -1 }
				align = nobaseline
				parentanchor = vcenter
				multiline = yes
				margin_left = 5
				raw_text = "[WarGoal.GetName]"
			}
		}

		### ARTICLE INPUT INFORMATION AREA
		war_goal_article_inputs = {
			visible = "[And(And(WarGoal.HoldsArticle, WarGoal.GetArticleType.RequiresAnyInput), Not(WarGoal.IsPrimaryDemand))]"
		}

		### ARTICLE INPUT INFORMATION AREA - PRIMARY DEMAND - CHANGES TEXTFORMATTING
		war_goal_article_inputs = {
			visible = "[And(And(WarGoal.HoldsArticle, WarGoal.GetArticleType.RequiresAnyInput), WarGoal.IsPrimaryDemand)]"
			blockoverride "treaty_textbox_default_format" {}
		}
		
		flowcontainer = {
			spacing = 5
			margin_bottom = 5

			tiny_flag = {
				parentanchor = vcenter
				datacontext = "[WarGoal.GetHolder]"
			}
			
			button = {
				visible = "[And(Not(WarGoal.IsPrimaryDemand), WarGoal.GetCreator.IsLocalPlayer)]"
				using = default_button
				size = { 175 30 }
				tooltip = "DIPLO_PLAY_MAKE_PRIMARY_DEMAND_TOOLTIP"
				enabled = "[IsValid(WarGoal.MakeWarGoalPrimaryDemand(GetPlayer.Self))]"
				onclick = "[Execute(WarGoal.MakeWarGoalPrimaryDemand(GetPlayer.Self))]"
				parentanchor = vcenter

				textbox = {
					parentanchor = vcenter
					position = { 10 0 }
					autoresize = yes
					align = nobaseline
					using = elide_fontsize_min
					max_width = 120
					text = "DIPLO_PLAY_MAKE_PRIMARY_DEMAND"
				}

				textbox = {
					parentanchor = right|vcenter
					position = { -10 0 }
					autoresize = yes
					align = nobaseline
					using = elide_fontsize_min
					max_width = 35
					raw_text = "@maneuvers![WarGoal.CalcMakePrimaryDemandManeuversCost|v]"
				}
			}
			
			textbox = {
				visible = "[WarGoal.IsPrimaryDemand]"
				size = { 175 30 }
				text = "[concept_primary_demand]"
				align = nobaseline
				parentanchor = vcenter
				margin_left = 5
			}

			icon = {
				visible = "[Not(Or(WarGoal.GetCreator.IsLocalPlayer, WarGoal.IsPrimaryDemand))]"
				size = { 25 25 }
				parentanchor = vcenter
				texture = "gfx/interface/icons/generic_icons/turns_into.dds"
			}

			tiny_flag = {
				parentanchor = vcenter
				datacontext = "[WarGoal.GetTarget]"
			}							
		}
	}

	type war_goal_article_inputs = flowcontainer {
		minimumsize = { 240 30 }
		datacontext = "[WarGoal.GetArticleDraft]"
		datacontext = "[WarGoal.GetArticleType]"

		flowcontainer = {
			direction = vertical
			spacing = 5

			### MUTUAL AGREEMENT
			treaty_textbox = {
				visible = "[ArticleDraft.HasKind('mutual')]"
				text = "[ArticleDraft.GetShortDesc]"
				autoresize = yes
				maximumsize = { 240 60 }
				align = nobaseline
				using = elide_fontsize_min
				multiline = yes
			}

			### NO INPUT DIRECTED ARTICLES
			treaty_textbox = {
				visible = "[And(Not(ArticleDraft.HasKind('mutual')), Not(ArticleDraft.RequiresAnyInput))]"
				text = "[ArticleDraft.GetShortDesc]"
				autoresize = yes
				maximumsize = { 240 60 }
				align = nobaseline
				using = elide_fontsize_min
				multiline = yes
			}

			### MONEY TRANSFER
			widget = {
				visible = "[ArticleDraft.HasType('money_transfer')]"
				size = { 230 30 }

				treaty_textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = nobaseline
					max_width = 230
					using = elide_fontsize_min
					text = "TREATY_DRAFT_SELECTED_MONEY_ARTICLE_AMOUNT"
				}
			}

			### STATE INPUT
			widget = {
				visible = "[ArticleDraft.RequiresInput('state')]"
				size = { 230 30 }
				datacontext = "[ArticleDraft.GetState]"

				treaty_textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = nobaseline
					max_width = 230
					using = elide_fontsize_min
					raw_text = "[State.GetCountry.GetFlagTextIcon] [State.GetNameNoFormatting]"
				}
			}

			### STRATEGIC REGION INPUT
			widget = {
				visible = "[ArticleDraft.RequiresInput('strategic_region')]"
				datacontext = "[ArticleDraft.GetStrategicRegion]"
				size = { 230 30 }

				treaty_textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = nobaseline
					max_width = 230
					using = elide_fontsize_min
					raw_text = "[StrategicRegion.GetNameNoFormatting]"
				}
			}

			### GOODS TRANSFER
			widget = {
				visible = "[ArticleDraft.HasType('goods_transfer')]"
				size = { 230 30 }
				datacontext = "[ArticleDraft.GetGoods]"

				widget = {
					parentanchor = vcenter
					size = { 230 30 }

					treaty_textbox = {
						text = "TREATY_DRAFT_SELECTED_ARTICLE_AMOUNT"
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						margin_left = 30
						max_width = 230
						using = elide_fontsize_min
					}

					icon = {
						texture = "[Goods.GetTexture]"
						parentanchor = vcenter
						size = { 26 26 }
					}
				}
			}

			### GOODS INPUT GENERIC
			widget = {
				visible = "[And(ArticleDraft.RequiresInput('goods'), Not(ArticleDraft.HasType('goods_transfer')))]"
				size = { 230 30 }
				datacontext = "[ArticleDraft.GetGoods]"

				widget = {
					parentanchor = vcenter
					size = { 230 30 }

					treaty_textbox = {
						text = "[Goods.GetNameNoFormatting]"
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						margin_left = 30
						max_width = 220
						using = elide_fontsize_min
					}

					icon = {
						texture = "[Goods.GetTexture]"
						parentanchor = vcenter
						size = { 26 26 }
					}
				}
			}

			### COMPANY MONOPOLY
			flowcontainer = {
				visible = "[ArticleDraft.HasType('acquire_monopoly_for_company')]"
				direction = vertical
				spacing = 5

				widget = {
					size = { 230 30 }
					datacontext = "[ArticleDraft.GetCompany]"

					treaty_textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						max_width = 230
						margin_left = 30
						using = elide_fontsize_min
						text = "[Company.GetNameNoFormatting]"
					}

					icon = {
						parentanchor = vcenter
						size = { 26 26 }
						texture = "[Company.GetCompanyType.GetIcon]"
					}
				}

				widget = {
					size = { 230 30 }
					datacontext = "[ArticleDraft.GetBuildingType]"

					treaty_textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						max_width = 230
						margin_left = 30
						using = elide_fontsize_min
						text = "[BuildingType.GetNameNoFormatting]"
					}

					icon = {
						parentanchor = vcenter
						size = { 26 26 }
						texture = "[BuildingType.GetIcon]"
					}
				}
			}

			### LAW TYPE INPUT GENERIC
			widget = {
				visible = "[ArticleDraft.RequiresInput('law_type')]"
				size = { 230 60 }
				datacontext = "[ArticleDraft.GetLawType]"

				widget = {
					parentanchor = vcenter
					size = { 230 50 }

					treaty_textbox = {
						text = "[LawType.GetNameNoFormatting]"
						parentanchor = vcenter
						autoresize = yes
						minimumsize = { 230 20 }
						maximumsize = { 230 50 }
						align = nobaseline
						margin_left = 55
						multiline = yes
						using = elide_fontsize_min
					}

					icon = {
						texture = "gfx/interface/backgrounds/round_button_bg.dds"
						parentanchor = vcenter
						size = { 50 50 }

						icon = {
							texture = "[LawType.GetTexture]"
							parentanchor = center
							size = { 70% 70% }
						}
					}
				}
			}
		}
	}
	
	### flags
	type flag_with_str_left = widget {
		size = { 170 55 }
		
		flag = {
			position = { 15 0 }
			parentanchor = left|vcenter
			mobilization_icon_flag = {}
		}

		flowcontainer = {
			position = { -5 0 }
			parentanchor = right|vcenter
			direction = vertical

			textbox = {
				autoresize = yes
				raw_text = "#variable [Country.GetBattalions|0]#! @battalions!"
				minimumsize = { 70 -1 }
				using = fontsize_large
				align = right|nobaseline
			}

			textbox = {
				autoresize = yes
				raw_text = "#variable [Country.GetWarships|0]#! @flotillas!"
				minimumsize = { 70 -1 }
				using = fontsize_large
				align = right|nobaseline
			}
		}
	}

	type flag_with_str_right = widget {
		size = { 170 55 }
		
		flag = {
			position = { -15 0 }
			parentanchor = right|vcenter

			mobilization_icon_flag = {}
		}

		flowcontainer = {
			position = { 5 0 }
			parentanchor = left|vcenter
			direction = vertical

			textbox = {
				autoresize = yes
				raw_text = "#variable @battalions! [Country.GetBattalions|0]#!"
				minimumsize = { 70 -1 }
				using = fontsize_large
				align = nobaseline
			}

			textbox = {
				autoresize = yes
				raw_text = "#variable @flotillas! [Country.GetWarships|0]#!"
				minimumsize = { 70 -1 }
				using = fontsize_large
				align = nobaseline
			}
		}
	}

	type add_wargoal_button = button {
		using = default_button
		size = { @diplo_play_side_width 40 }
		
		tooltip = "ADD_WARGOAL_TOOLTIP"
		enabled = "[DiplomaticPlay.CanAddWarGoal(GetPlayer.Self)]"
		onclick = "[InformationPanelBar.OpenAddWarGoalPanel( DiplomaticPlay.Self, GetPlayer.Self )]"

		flowcontainer = {
			parentanchor = center

			icon = {
				size = { 30 30 }
				texture = "gfx/interface/buttons/button_icons/plus.dds"
				parentanchor = vcenter
			}

			textbox = {
				text = "DIPLO_PLAY_ADD_WARGOAL"
				autoresize = yes
				align = nobaseline
				parentanchor = vcenter
			}
		}
	}

	type diplomatic_play_stance_lane_backer = flowcontainer {
		direction = vertical
		spacing = 2
		margin = { 2 0 }
		
		# header icon + move button
		flowcontainer = {
			direction = vertical
			margin_bottom = 5
			spacing = 2
			parentanchor = hcenter

			widget = {
				parentanchor = hcenter
				block "show_icon" {
					visible = no
				}

				block "lane_size" {
					size = { 150 65 }
				}

				flowcontainer = {
					spacing = 10
					parentanchor = center

					icon = {
						#block "stance_icon_position" {}
						block "icon_properties" {}
						block "icon_size" { 
							size = { 50 50 }
						}

						icon = {
							visible = "[And(DiplomaticPlay.IsInvolved( GetPlayer ), Not( DiplomaticPlay.IsTargetOrInitiator( GetPlayer )))]"
							size = { 120% 120% }
							using = highlighted_circle_selection_big
						}
					}
				}
			}
			
			widget = {
				size = { 150 65 }
				
				block "show_button" {}
			
				button_icon_round_big_action = {
					parentanchor = center
					block "stance_icon_position" {}
					block "button_size" {
						size = { 50 50 }
					}
					using = diplomatic_play_support_button_sound
					block "button_1_properties" {}												

					blockoverride "icon" {
						block "icon_properties" {}
					}
					blockoverride "icon_size" {
						block "icon_size" {
							size = { 75% 75% }
						}
					}												
				}
				
				button_icon_round_action = {
					parentanchor = center
					block "stance_icon_position" {}
					block "button_size" {
						size = { 50 50 }
					}
					using = diplomatic_play_support_button_sound
					block "button_2_properties" {}												

					blockoverride "icon" {
						block "icon_properties" {}
					}
					blockoverride "icon_size" {
						block "icon_size" {
							size = { 75% 75% }
						}
					}												
				}							
			}

			widget = {
				size = { 2 2 }
				block "show_reverse_sway_button" {
					visible = no
				}
			}
			
			widget = {
				size = { 150 65 }
				parentanchor = hcenter

				block "show_reverse_sway_button" {
					visible = no
				}
			
				button = {
					using = default_button_primary
					parentanchor = center
					using = diplomatic_play_support_button_sound

					block "button_size" {
						size = { 150 65 }
					}

					block "reverse_sway_button_properties" {}


					textbox = {
						parentanchor = center
						align = hcenter|nobaseline
						multiline = yes
						autoresize = yes
						text = "OFFER_SUPPORT"
						max_width = 80
						elide = right
						fontsize_min = 14
					}
				}

				icon = {
					parentanchor = right
					texture = "gfx/interface/icons/generic_icons/approval_icon.dds"

					block "show_reverse_sway_approval" {
						visible = no
					}				
				
					block "icon_size" {
						size = { 22 22 }
					}

					block "reverse_sway_approval_tooltip" {}
				}

				icon = {
					parentanchor = right
					texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"

					block "show_reverse_sway_disapproval" {
						visible = no
					}					
				
					block "icon_size" {
						size = { 22 22 }
					}

					block "reverse_sway_disapproval_tooltip" {}
				}				
			}

			divider_clean = {}
		}
		
		# country list
		flowcontainer = {
			direction = vertical
			block "list_datamodel" {}
			spacing = 2
			parentanchor = hcenter
			
			item = {
				widget = {
					# hack to conditionally show the correct tooltip
					widget = {
						visible = "[Not(Or(DiplomaticPlay.IsInitiator(GetPlayer.Self),DiplomaticPlay.IsTarget(GetPlayer.Self)))]"
						size = { 100% 100% }
						tooltip = "DIPLO_PLAY_COUNTRY_TOOLTIP"
					}

					background = {
						using = entry_bg_simple
					}

					icon = {
						visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, Country.Self)]"
						using = highlighted_square_selection
					}

					tiny_flag = {
						mobilization_icon_flag = {}
						parentanchor = hcenter
						position = { 0 7 }
						scale = 1.3 # for layout purposes in this specific screen, tiny_flag was slightly to small and small_flag slightly too big
					}

					flowcontainer = {
						resizeparent = yes
						direction = vertical
						minimumsize = { 150 -1 }
						margin_top = 2

						# ATTITUDE + SWAY
						container = {
							minimumsize = { 150 30 }

							# ATTITUDE LEFT (INITIATOR or TARGET)
							widget = {
								parentanchor = vcenter
								position = { 10 0 }
								size = { 28 28 }

								icon = {
									visible = "[And(Country.IsPlayer, Not(Country.IsLocalPlayer))]"
									size = { 100% 100% }
									tooltip = "ai_attitude_human_tooltip"
									texture = "gfx/interface/icons/ai_attitude_icons/human.dds"
								}

								icon = {
									visible = "[And(Not(Country.IsPlayer), Not(DiplomaticPlay.GetTarget.IsLocalPlayer))]"
									size = { 100% 100% }
									tooltip = "[Country.GetAttitudeTowards(DiplomaticPlay.GetInitiator).GetTooltip]"
									texture = "[Country.GetAttitudeTowards(DiplomaticPlay.GetInitiator).GetTexture]"
								}

								icon = {
									visible = "[DiplomaticPlay.GetTarget.IsLocalPlayer]"
									size = { 100% 100% }
									tooltip = "[Country.GetAttitudeTowards(DiplomaticPlay.GetTarget).GetTooltip]"
									texture = "[Country.GetAttitudeTowards(DiplomaticPlay.GetTarget).GetTexture]"
								}
							}

							# ATTITUDE RIGHT (TARGET)
							widget = {
								visible = "[Not(Or(And(DiplomaticPlay.HasAcceptedSway(Country.Self), Not(DiplomaticPlay.GetAcceptedSway(Country.Self).GetSwayOffer.TakesEffectImmediately)), Or(DiplomaticPlay.IsInitiator(GetPlayer.Self), DiplomaticPlay.IsTarget(GetPlayer.Self))))]"
								parentanchor = right|vcenter
								size = { 28 28 }
								position = { -10 0 }

								icon = {
									visible = "[And(Country.IsPlayer, Not(Country.IsLocalPlayer))]"
									size = { 100% 100% }
									tooltip = "ai_attitude_human_tooltip"
									texture = "gfx/interface/icons/ai_attitude_icons/human.dds"
								}

								icon = {
									visible = "[Not(Country.IsPlayer)]"
									size = { 100% 100% }
									tooltip = "[Country.GetAttitudeTowards(DiplomaticPlay.GetTarget).GetTooltip]"
									texture = "[Country.GetAttitudeTowards(DiplomaticPlay.GetTarget).GetTexture]"
								}
							}

							# HAS ACCEPTED SWAY 
							icon = {
								visible = "[And(DiplomaticPlay.HasAcceptedSway(Country.Self), Not(DiplomaticPlay.GetAcceptedSway(Country.Self).GetSwayOffer.TakesEffectImmediately))]"
								size = { 28 28 }
								parentanchor = right|vcenter
								position = { -10 0 }
								tooltip = "[DiplomaticPlay.GetAcceptedSway(Country.Self).GetSwayOffer.GetName(GetPlayer.Self,Country.Self, DiplomaticPlay.Self)]"
								texture = "[DiplomaticPlay.GetAcceptedSway(Country.Self).GetSwayOffer.GetTexture]"
							}

							# SWAY BUTTON
							container = {
								parentanchor = right|vcenter
								position = { -2 0 }

								# SWAY
								widget = {
									visible = "[Or(DiplomaticPlay.IsInitiator(GetPlayer.Self), DiplomaticPlay.IsTarget(GetPlayer.Self))]"
									size = { 34 34 }

									# APPROVAL ICON
									button_icon_round = {	
										visible = "[And(DiplomaticPlay.WouldAcceptAnySway( GetPlayer.Self, Country.Self ), Or(DiplomaticPlay.IsInitiator( GetPlayer.Self ),DiplomaticPlay.IsTarget( GetPlayer.Self )))]"
										size = { 100% 100% }
										enabled = "[DiplomaticPlay.CanSwayCountry(GetPlayer.Self, Country.Self)]"
										onclick = "[InformationPanelBar.OpenSwayCountryPanel( DiplomaticPlay.Self, Country.Self )]"
										tooltip = "SWAY_COUNTRY_TOOLTIP"

										blockoverride "bevel_margin" {
											margin = { 1 1 }
										}

										blockoverride "icon" {
											texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
										}

										blockoverride "icon_size" {
											size = { 75% 75% }
										}
									}

									# DISAPPROVAL ICON
									button_icon_round = {	
										visible = "[And(Not(DiplomaticPlay.WouldAcceptAnySway( GetPlayer.Self, Country.Self )), Or(DiplomaticPlay.IsInitiator( GetPlayer.Self ),DiplomaticPlay.IsTarget( GetPlayer.Self )))]"
										size = { 100% 100% }
										enabled = "[DiplomaticPlay.CanSwayCountry(GetPlayer.Self, Country.Self)]"
										onclick = "[InformationPanelBar.OpenSwayCountryPanel( DiplomaticPlay.Self, Country.Self )]"
										tooltip = "SWAY_COUNTRY_TOOLTIP"

										blockoverride "bevel_margin" {
											margin = { 1 1 }
										}

										blockoverride "icon" {
											texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
										}

										blockoverride "icon_size" {
											size = { 75% 75% }
										}
									}
								}
							}
						}

						widget = { size = { 2 2 }}

						flowcontainer = {
							margin_bottom = 5
							parentanchor = hcenter
							visible = "[Not(Country.IsPlayer)]"

							textbox = {
								autoresize = yes
								raw_text = "#v [DiplomaticPlay.GetInitiatorPreferenceScore(Country.Self)|+=]#!"
								tooltip = "[DiplomaticPlay.GetInitiatorPreferenceScoreDesc(Country.Self)]"
								minimumsize = { 50 -1 }
								maximumsize = { 50 -1 }
								align = hcenter|nobaseline
							}

							vertical_divider = {}

							textbox = {
								autoresize = yes
								raw_text = "#v [DiplomaticPlay.GetTargetPreferenceScore(Country.Self)|+=]#!"								
								tooltip = "[DiplomaticPlay.GetTargetPreferenceScoreDesc(Country.Self)]"
								minimumsize = { 50 -1 }
								maximumsize = { 50 -1 }
								align = hcenter|nobaseline
							}
						}

						textbox = {
							visible = "[Country.IsOtherPlayer]"
							parentanchor = hcenter
							size = { 100 28 }
							text = "[Country.GetPlayer.GetName]"
							align = hcenter|nobaseline
							margin_bottom = 5
						}

						textbox = {
							visible = "[Country.IsLocalPlayer]"
							parentanchor = hcenter
							size = { 100 28 }
							text = "YOU"
							align = hcenter|nobaseline
							margin_bottom = 5
						}

						divider_clean = {
							maximumsize = { 140 -1 }
							parentanchor = hcenter
						}

						# Military Information
						flowcontainer = {
							direction = vertical
							margin_left = 10
							margin_right = 10
							margin_bottom = 5
							margin_top = 5
							
							# Battalions
							flowcontainer = {
								tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
								maximumsize = { 130 -1 }
								
								textbox = {
									autoresize = yes
									raw_text = "@battalions![Country.GetRegularBattalions|v]"
									align = nobaseline
								}

								textbox = {
									autoresize = yes
									raw_text = " + [Country.CalcConscriptableBattalions|v]"
									align = nobaseline
									visible = "[NotZero(Country.CalcConscriptableBattalions)]"
								}
							}

							# Flotillas
							textbox = {
								raw_text = "@flotillas!#variable [Country.GetWarships|0]#!"
								tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP"
								align = nobaseline
								autoresize = yes
								visible = "[NotZero(Country.GetWarships)]"
								maximumsize = { 130 -1 }
							}

							# Mobilization
							textbox = {
								tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
								autoresize = yes
								raw_text = "COUNTRY_MOBILIZATION_SWAY_PANEL"
								align = nobaseline
								visible = "[NotZero_CFixedPoint(Country.GetMobilizationRatio)]"
								elide = left
								fontsize_min = 12
								maximumsize = { 130 -1 }
							}
						}
					}
				}
			}
		}
	}

	type diplomatic_play_stance_lane_fence_and_leaning = flowcontainer {
		direction = vertical
		spacing = 2
		margin = { 2 0 }
		
		# header icon + move button
		flowcontainer = {
			parentanchor = hcenter
			direction = vertical
			margin_bottom = 5
			spacing = 2

			widget = {
				parentanchor = hcenter
				size = { 220 65 }

				#initiator leaning no button
				widget = {
					visible = "[Or(DiplomaticPlay.IsTargetOrInitiator( GetPlayer ),Not(DiplomaticPlay.IsInvolved( GetPlayer )))]"
					parentanchor = center
					size = { 50 50 }
					position = { -85 0 }

					icon = {
						parentanchor = center
						size = { 45 45 }					
						mirror = horizontal
						tooltip = "DIPLO_PLAY_LEANING_INITIATOR_TOOLTIP"
						using = tooltip_above
						texture = "gfx/interface/icons/diplo_play_icons/stance_leaning.dds"
					}
				}

				#initiator leaning button
				widget = {
					visible = "[Or(DiplomaticPlay.IsOnTheFence( GetPlayer ),DiplomaticPlay.IsInvolved( GetPlayer ))]"
					parentanchor = center
					size = { 50 50 }
					position = { -85 0 }

					button_icon_round_big_action = {
						parentanchor = center
						visible = "[DiplomaticPlay.IsUndecidedParticipant(GetPlayer)]"
						enabled = "[DiplomaticPlay.CanLeanTowardsInitiator(GetPlayer)]"
						tooltip = "LEAN_TOWARDS_INITIATOR_DIPLOMATIC_PLAY_TOOLTIP"
						using = tooltip_above
						onclick = "[Execute(DiplomaticPlay.LeanTowardsInitiator(GetPlayer))]"
						size = { 50 50 }
						using = diplomatic_play_support_button_sound

						icon = {
							texture = "gfx/interface/icons/diplo_play_icons/stance_leaning.dds"
							mirror = horizontal
							tooltip = "DIPLO_PLAY_LEANING_INITIATOR_BUTTON_TOOLTIP"
							parentanchor = center
							size = { 75% 75% }
						}
					}

					button_icon_round_action = {
						visible = "[DiplomaticPlay.IsBacker(GetPlayer)]"
						parentanchor = center
						size = { 50 50 }
						enabled = "[DiplomaticPlay.CanLeanTowardsInitiator(GetPlayer)]"
						tooltip = "LEAN_TOWARDS_INITIATOR_DIPLOMATIC_PLAY_TOOLTIP"
						using = tooltip_above
						onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.LeanTowardsInitiator(GetPlayer))]"
						using = diplomatic_play_support_button_sound

						icon = {
							parentanchor = center
							size = { 75% 75% }
							mirror = horizontal
							tooltip = "DIPLO_PLAY_LEANING_INITIATOR_BUTTON_TOOLTIP"
							texture = "gfx/interface/icons/diplo_play_icons/stance_leaning.dds"
						}
					}		
				}

				#on the fence no button
				widget = {
					parentanchor = center
					size = { 50 50 }
					visible = "[Or(DiplomaticPlay.IsTargetOrInitiator( GetPlayer ),Not(DiplomaticPlay.IsInvolved( GetPlayer )))]"

					icon = {
						parentanchor = center
						size = { 50 50 }					
						tooltip = "DIPLO_PLAY_ON_THE_FENCE_TOOLTIP"
						using = tooltip_above
						texture = "gfx/interface/icons/diplo_play_icons/stance_on_the_fence.dds"
					}
				}

				#on the fence button
				widget = {
					parentanchor = center
					size = { 50 50 }
					visible = "[Or(DiplomaticPlay.IsOnTheFence( GetPlayer ),DiplomaticPlay.IsInvolved( GetPlayer ))]"

					button_icon_round_big_action = {
						visible = "[DiplomaticPlay.IsUndecidedParticipant(GetPlayer)]"
						parentanchor = center
						size = { 50 50 }
						enabled = "[DiplomaticPlay.CanBeOnTheFence(GetPlayer)]"
						tooltip = "LEAN_TOWARDS_INITIATOR_DIPLOMATIC_PLAY_TOOLTIP"
						using = tooltip_above
						onclick = "[Execute(DiplomaticPlay.BeOnTheFence(GetPlayer))]"
						using = diplomatic_play_support_button_sound

						icon = {
							texture = "gfx/interface/icons/diplo_play_icons/stance_on_the_fence.dds"
							tooltip = "DIPLO_PLAY_ON_THE_FENCE_TOOLTIP"
							parentanchor = center
							size = { 35 35 }
						}
					}

					button_icon_round_action = {
						visible = "[DiplomaticPlay.IsBacker(GetPlayer)]"
						parentanchor = center
						size = { 50 50 }
						enabled = "[DiplomaticPlay.CanBeOnTheFence(GetPlayer)]"
						tooltip = "BE_ON_THE_FENCE_DIPLOMATIC_PLAY_TOOLTIP"
						using = tooltip_above
						onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.BeOnTheFence(GetPlayer))]"
						using = diplomatic_play_support_button_sound

						icon = {
							parentanchor = center
							size = { 35 35 }
							tooltip = "DIPLO_PLAY_ON_THE_FENCE_TOOLTIP"
							texture = "gfx/interface/icons/diplo_play_icons/stance_on_the_fence.dds"
						}
					}		
				}

				#target leaning no button
				widget = {
					parentanchor = center
					size = { 50 50 }
					position = { 85 0 }
					visible = "[Or(DiplomaticPlay.IsTargetOrInitiator( GetPlayer ),Not(DiplomaticPlay.IsInvolved( GetPlayer )))]"

					icon = {
						parentanchor = center
						size = { 45 45 }					
						tooltip = "DIPLO_PLAY_LEANING_TARGET_TOOLTIP"
						using = tooltip_above
						texture = "gfx/interface/icons/diplo_play_icons/stance_leaning.dds"
					}
				}

				#target leaning button
				widget = {
					parentanchor = center
					size = { 50 50 }
					visible = "[Or(DiplomaticPlay.IsOnTheFence( GetPlayer ),DiplomaticPlay.IsInvolved( GetPlayer ))]"
					position = { 85 0 }

					button_icon_round_big_action = {
						visible = "[DiplomaticPlay.IsUndecidedParticipant(GetPlayer)]"
						parentanchor = center
						size = { 50 50 }
						enabled = "[DiplomaticPlay.CanLeanTowardsTarget(GetPlayer)]"
						tooltip = "LEAN_TOWARDS_TARGET_DIPLOMATIC_PLAY_TOOLTIP"
						using = tooltip_above
						onclick = "[Execute(DiplomaticPlay.LeanTowardsTarget(GetPlayer))]"
						using = diplomatic_play_support_button_sound

						icon = {
							texture = "gfx/interface/icons/diplo_play_icons/stance_leaning.dds"
							tooltip = "DIPLO_PLAY_LEANING_TARGET_BUTTON_TOOLTIP"
							parentanchor = center
							size = { 75% 75% }
						}
					}

					button_icon_round_action = {
						visible = "[DiplomaticPlay.IsBacker(GetPlayer)]"
						parentanchor = center
						size = { 50 50 }
						enabled = "[DiplomaticPlay.CanLeanTowardsTarget(GetPlayer)]"
						tooltip = "LEAN_TOWARDS_TARGET_DIPLOMATIC_PLAY_TOOLTIP"
						using = tooltip_above
						onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.LeanTowardsTarget(GetPlayer))]"
						using = diplomatic_play_support_button_sound

						icon = {
							parentanchor = center
							size = { 75% 75% }
							tooltip = "DIPLO_PLAY_LEANING_TARGET_BUTTON_TOOLTIP"
							texture = "gfx/interface/icons/diplo_play_icons/stance_leaning.dds"
						}
					}		
				}
			}

			widget = {
				size = { 2 2 }

				block "show_reverse_sway_button" {
					visible = no
				}
			}

			divider_clean = {}
		}

		# country list
		flowcontainer = {
			direction = vertical
			block "list_datamodel" {}
			spacing = 2
			parentanchor = hcenter
			allow_outside = yes
			
			item = {
				container = {
					minimumsize = { 220 -1 }

					#Leaning towards initiator
					widget = {
						visible = "[DiplomaticPlay.IsInitiatorLeaning( Country.Self )]"
						size = { 100% 100% }

						background = {
							using = fade_right_colored
							margin_left = 5
							color = "[DiplomaticPlay.GetInitiator.GetMapColor]"
						}

						#initiator arrow
						icon = {
							parentanchor = vcenter
							position = { -5 0 }
							mirror = horizontal
							size = { 45 45 }
							alpha = 0.8
							using = tooltip_se
							texture = "gfx/interface/icons/diplo_play_icons/stance_leaning.dds"
							tooltip = "DIPLO_PLAY_LEANING_INITIATOR_COUNTRY_TOOLTIP"
						}
					}

					#Leaning towards target
					widget = {
						visible = "[DiplomaticPlay.IsTargetLeaning( Country.Self )]"
						size = { 100% 100% }

						background = {
							using = fade_left_colored
							margin_right = 5
							color = "[DiplomaticPlay.GetTarget.GetMapColor]"
						}

						#target arrow
						icon = {
							parentanchor = right|vcenter
							position = { 5 0 }
							size = { 45 45 }
							alpha = 0.8
							using = tooltip_se
							texture = "gfx/interface/icons/diplo_play_icons/stance_leaning.dds"
							tooltip = "DIPLO_PLAY_LEANING_TARGET_COUNTRY_TOOLTIP"
						}
					}

					widget = {
						parentanchor = center

						widget = {
							visible = "[Not(Or(DiplomaticPlay.IsInitiator(GetPlayer.Self),DiplomaticPlay.IsTarget(GetPlayer.Self)))]"
							size = { 100% 100% }
							tooltip = "DIPLO_PLAY_COUNTRY_TOOLTIP"
						}

						background = {
							using = entry_bg_simple
						}

						icon = {
							visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, Country.Self)]"
							using = highlighted_square_selection
						}

						tiny_flag = {
							mobilization_icon_flag = {}
							parentanchor = hcenter
							position = { 0 7 }
							scale = 1.3 # for layout purposes in this specific screen, tiny_flag was slightly to small and small_flag slightly too big
						}

						flowcontainer = {
							resizeparent = yes
							direction = vertical
							minimumsize = { 150 -1 }
							margin_top = 2

							# ATTITUDE + SWAY
							container = {
								minimumsize = { 150 30 }

								# ATTITUDE LEFT (INITIATOR or TARGET)
								widget = {
									parentanchor = vcenter
									position = { 10 0 }
									size = { 28 28 }

									icon = {
										visible = "[And(Country.IsPlayer, Not(Country.IsLocalPlayer))]"
										size = { 100% 100% }
										tooltip = "ai_attitude_human_tooltip"
										texture = "gfx/interface/icons/ai_attitude_icons/human.dds"
									}

									icon = {
										visible = "[And(Not(Country.IsPlayer), Not(DiplomaticPlay.GetTarget.IsLocalPlayer))]"
										size = { 100% 100% }
										tooltip = "[Country.GetAttitudeTowards(DiplomaticPlay.GetInitiator).GetTooltip]"
										texture = "[Country.GetAttitudeTowards(DiplomaticPlay.GetInitiator).GetTexture]"
									}

									icon = {
										visible = "[DiplomaticPlay.GetTarget.IsLocalPlayer]"
										size = { 100% 100% }
										tooltip = "[Country.GetAttitudeTowards(DiplomaticPlay.GetTarget).GetTooltip]"
										texture = "[Country.GetAttitudeTowards(DiplomaticPlay.GetTarget).GetTexture]"
									}
								}

								# ATTITUDE RIGHT (TARGET)
								widget = {
									visible = "[Not(Or(And(DiplomaticPlay.HasAcceptedSway(Country.Self), Not(DiplomaticPlay.GetAcceptedSway(Country.Self).GetSwayOffer.TakesEffectImmediately)), Or(DiplomaticPlay.IsInitiator(GetPlayer.Self), DiplomaticPlay.IsTarget(GetPlayer.Self))))]"
									parentanchor = right|vcenter
									size = { 28 28 }
									position = { -10 0 }

									icon = {
										visible = "[And(Country.IsPlayer, Not(Country.IsLocalPlayer))]"
										size = { 100% 100% }
										tooltip = "ai_attitude_human_tooltip"
										texture = "gfx/interface/icons/ai_attitude_icons/human.dds"
									}

									icon = {
										visible = "[Not(Country.IsPlayer)]"
										size = { 100% 100% }
										tooltip = "[Country.GetAttitudeTowards(DiplomaticPlay.GetTarget).GetTooltip]"
										texture = "[Country.GetAttitudeTowards(DiplomaticPlay.GetTarget).GetTexture]"
									}
								}

								# HAS ACCEPTED SWAY 
								icon = {
									visible = "[And(DiplomaticPlay.HasAcceptedSway(Country.Self), Not(DiplomaticPlay.GetAcceptedSway(Country.Self).GetSwayOffer.TakesEffectImmediately))]"
									size = { 28 28 }
									parentanchor = right|vcenter
									position = { -10 0 }
									tooltip = "[DiplomaticPlay.GetAcceptedSway(Country.Self).GetSwayOffer.GetName(GetPlayer.Self,Country.Self, DiplomaticPlay.Self)]"
									texture = "[DiplomaticPlay.GetAcceptedSway(Country.Self).GetSwayOffer.GetTexture]"
								}

								# SWAY BUTTON
								container = {
									parentanchor = right|vcenter
									position = { -2 0 }

									# SWAY
									widget = {
										visible = "[Or(DiplomaticPlay.IsInitiator(GetPlayer.Self), DiplomaticPlay.IsTarget(GetPlayer.Self))]"
										size = { 34 34 }

										# APPROVAL ICON
										button_icon_round = {	
											visible = "[And(DiplomaticPlay.WouldAcceptAnySway( GetPlayer.Self, Country.Self ), Or(DiplomaticPlay.IsInitiator( GetPlayer.Self ),DiplomaticPlay.IsTarget( GetPlayer.Self )))]"
											size = { 100% 100% }
											enabled = "[DiplomaticPlay.CanSwayCountry(GetPlayer.Self, Country.Self)]"
											onclick = "[InformationPanelBar.OpenSwayCountryPanel( DiplomaticPlay.Self, Country.Self )]"
											tooltip = "SWAY_COUNTRY_TOOLTIP"

											blockoverride "bevel_margin" {
												margin = { 1 1 }
											}

											blockoverride "icon" {
												texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
											}

											blockoverride "icon_size" {
												size = { 75% 75% }
											}
										}

										# DISAPPROVAL ICON
										button_icon_round = {	
											visible = "[And(Not(DiplomaticPlay.WouldAcceptAnySway( GetPlayer.Self, Country.Self )), Or(DiplomaticPlay.IsInitiator( GetPlayer.Self ),DiplomaticPlay.IsTarget( GetPlayer.Self )))]"
											size = { 100% 100% }
											enabled = "[DiplomaticPlay.CanSwayCountry(GetPlayer.Self, Country.Self)]"
											onclick = "[InformationPanelBar.OpenSwayCountryPanel( DiplomaticPlay.Self, Country.Self )]"
											tooltip = "SWAY_COUNTRY_TOOLTIP"

											blockoverride "bevel_margin" {
												margin = { 1 1 }
											}

											blockoverride "icon" {
												texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
											}

											blockoverride "icon_size" {
												size = { 75% 75% }
											}
										}
									}
								}
							}

							widget = { size = { 2 2 }}

							flowcontainer = {
								margin_bottom = 5
								parentanchor = hcenter
								visible = "[Not(Country.IsPlayer)]"

								textbox = {
									autoresize = yes
									minimumsize = { 50 -1 }
									maximumsize = { 50 -1 }
									align = hcenter|nobaseline
									tooltip = "[DiplomaticPlay.GetInitiatorPreferenceScoreDesc(Country.Self)]"
									raw_text = "#v [DiplomaticPlay.GetInitiatorPreferenceScore(Country.Self)|+=]#!"
								}

								vertical_divider = {}

								textbox = {
									autoresize = yes
									minimumsize = { 50 -1 }
									maximumsize = { 50 -1 }
									align = hcenter|nobaseline
									tooltip = "[DiplomaticPlay.GetTargetPreferenceScoreDesc(Country.Self)]"
									raw_text = "#v [DiplomaticPlay.GetTargetPreferenceScore(Country.Self)|+=]#!"								
								}
							}

							textbox = {
								visible = "[Country.IsOtherPlayer]"
								parentanchor = hcenter
								size = { 100 28 }
								text = "[Country.GetPlayer.GetName]"
								align = hcenter|nobaseline
								margin_bottom = 5
							}

							textbox = {
								visible = "[Country.IsLocalPlayer]"
								parentanchor = hcenter
								size = { 100 28 }
								text = "YOU"
								align = hcenter|nobaseline
								margin_bottom = 5
							}

							divider_clean = {
								maximumsize = { 140 -1 }
								parentanchor = hcenter
							}

							# Military Information
							flowcontainer = {
								direction = vertical
								margin_left = 10
								margin_right = 10
								margin_bottom = 5
								margin_top = 5
								
								# Battalions
								flowcontainer = {
									tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
									maximumsize = { 130 -1 }
									
									textbox = {
										autoresize = yes
										raw_text = "@battalions![Country.GetRegularBattalions|v]"
										align = nobaseline
									}

									textbox = {
										visible = "[NotZero(Country.CalcConscriptableBattalions)]"
										autoresize = yes
										align = nobaseline
										raw_text = " + [Country.CalcConscriptableBattalions|v]"
									}
								}

								# Flotillas
								textbox = {
									visible = "[NotZero(Country.GetWarships)]"
									align = nobaseline
									autoresize = yes
									maximumsize = { 130 -1 }
									tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP"
									raw_text = "@flotillas!#variable [Country.GetWarships|0]#!"
								}

								# Mobilization
								textbox = {
									visible = "[NotZero_CFixedPoint(Country.GetMobilizationRatio)]"
									autoresize = yes
									align = nobaseline
									elide = left
									fontsize_min = 12
									maximumsize = { 130 -1 }
									tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
									raw_text = "COUNTRY_MOBILIZATION_SWAY_PANEL"
								}
							}
						}
					}
				}
			}
		}
	}
}
