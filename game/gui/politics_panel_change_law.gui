@law_sides_width = 420

types politics_panel_change_law {
	type politics_panel_change_law = fullscreen_block_window {
		name = "politics_panel_change_law"

		blockoverride "animation_state_block" {
			state = {
				name = _show
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/politics"
				}
				start_sound = {
					soundeffect = "snapshot:/Dynamic/mute_world_80"
				}
				start_sound = {
					soundeffect = "snapshot:/Dynamic/mute_vfx_war_100"

				}
			}

			state = {
				name = _hide
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/politics_stop"
				}
			}
		}

		blockoverride "window_header_name"
		{
			text = "[LabelingHelper.CapitalizeOnlyFirst(ChangeLawPanel.GetLaw.GetGroupName)]"
		}

		blockoverride "scrollarea_content"
		{
			vbox = {
				margin = { 20 5 }
				datacontext = "[GetPlayer]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					### current active law
					vbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = preferred
						margin_top = 10

						using = entry_bg_fancy

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							datamodel = "[ChangeLawPanel.GetSelectedLawAlternatives]"

							item = {
								vbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = preferred
									visible = "[Law.IsActive]"
									margin = { 15 0 }

									### icon + name
									hbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = preferred

										law_icon = {
											size = { 140 140 }
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = preferred
											margin = { 10 0 }

											widget = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = preferred
											}

											textbox = {
												layoutpolicy_horizontal = expanding
												size = { 0 30 }
												text = "CURRENTLY_ACTIVE_LAW"
												align = left|nobaseline
												using = fontsize_large
												elide = right
												fontsize_min = 14
											}

											textbox = {
												layoutpolicy_horizontal = expanding
												size = { 0 40 }
												text = "LAW"
												align = left|nobaseline
												using = fontsize_mega
												elide = right
												fontsize_min = 14
											}

											widget = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = preferred
											}
										}
									}

									### approval info
									approval_info2 = {}

									### active law
									textbox = {
										visible = "[Law.IsActive]"
										autoresize = yes
										multiline = yes
										minimumsize = { @law_sides_width -1 }
										maximumsize = { @law_sides_width -1 }
										margin = { 10 10 }
										text = "ACTIVE_LAW"
									}

									### requirements header
									textbox = {
										visible = "[Not(StringIsEmpty(Law.GetLawType.GetBlockingRequirements(GetPlayer.Self)))]"
										default_format = "#title"
										autoresize = yes
										multiline = yes
										minimumsize = { @law_sides_width -1 }
										maximumsize = { @law_sides_width -1 }
										margin = { 10 0 }
										margin_top = 10
										text = "DATA_LAW_REQUIREMENTS_HEADER"
									}

									### requirements
									textbox = {
										visible = "[Not(StringIsEmpty(Law.GetLawType.GetBlockingRequirements(GetPlayer.Self)))]"
										autoresize = yes
										multiline = yes
										minimumsize = { @law_sides_width -1 }
										maximumsize = { @law_sides_width -1 }
										margin = { 20 0 }
										margin_bottom = 10
										text = "[Law.GetLawType.GetBlockingRequirements(GetPlayer.Self)]"
									}

									### additional effects header
									textbox = {
										visible = "[Not(StringIsEmpty(Law.GetLawType.GetAdditionalEffectDesc))]"
										default_format = "#title"
										autoresize = yes
										multiline = yes
										minimumsize = { @law_sides_width -1 }
										maximumsize = { @law_sides_width -1 }
										margin = { 10 0 }
										margin_top = 10
										text = "DATA_LAW_CUSTOM_EFFECTS_HEADER"
									}

									### additional effects
									textbox = {
										visible = "[Not(StringIsEmpty(Law.GetLawType.GetAdditionalEffectDesc))]"
										autoresize = yes
										multiline = yes
										minimumsize = { @law_sides_width -1 }
										maximumsize = { @law_sides_width -1 }
										margin = { 20 0 }
										margin_bottom = 10
										text = "[Law.GetLawType.GetAdditionalEffectDesc]"
									}

									### effects header
									textbox = {
										visible = "[Not(StringIsEmpty(Law.GetLawType.GetEffectDesc(GetPlayer.Self)))]"
										default_format = "#title"
										autoresize = yes
										multiline = yes
										minimumsize = { @law_sides_width -1 }
										maximumsize = { @law_sides_width -1 }
										margin = { 10 0 }
										margin_top = 10
										text = "DATA_LAW_EFFECTS_HEADER"
									}

									### effects
									textbox = {
										visible = "[Not(StringIsEmpty(Law.GetLawType.GetEffectDesc(GetPlayer.Self)))]"
										autoresize = yes
										multiline = yes
										minimumsize = { @law_sides_width -1 }
										maximumsize = { @law_sides_width -1 }
										margin = { 20 0 }
										text = "[Law.GetLawType.GetEffectDesc(GetPlayer.Self)]"
									}

									### supported by IGs
									textbox = {
										visible = "[Law.IsSupported]"
										autoresize = yes
										multiline = yes
										minimumsize = { @law_sides_width -1 }
										maximumsize = { @law_sides_width -1 }
										margin = { 10 10 }
										text = "DATA_LAW_TOOLTIP_SUPPORTED"
									}

									### not supported by IGs
									textbox = {
										visible = "[Not(Law.IsSupported)]"
										autoresize = yes
										multiline = yes
										minimumsize = { @law_sides_width -1 }
										maximumsize = { @law_sides_width -1 }
										margin = { 10 10 }
										text = "DATA_LAW_TOOLTIP_NOT_SUPPORTED"
									}

									divider_clean = {
										blockoverride "size" {
											layoutpolicy_horizontal = expanding
											size = { 0 2 }
										}
									}

									### law lore
									textbox = {
										default_format = "#lore"
										autoresize = yes
										multiline = yes
										minimumsize = { @law_sides_width -1 }
										maximumsize = { @law_sides_width -1 }
										margin = { 20 10 }
										text = "[Law.GetDesc]"
									}
								}
							}
						}

						widget = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
						}
					}

					### list of laws
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin = { 5 0 }

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							name = "law_box"
							datamodel = "[ChangeLawPanel.GetSelectedLawAlternatives]"
							ignoreinvisible = yes
							spacing = 10

							item = {
								enactable_generic_law2 = {
									blockoverride "lawgroup" {}
									blockoverride "currently_active_law" {}
								}
							}
						}

						widget = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
						}
					}

					### enacting law
					vbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = preferred
						datacontext = "[ChangeLawPanel.GetLaw.GetGroup]"
						margin_top = 10

						background = {
							using = dark_area
							alpha = 0.35
						}
						background = {
							visible = "[ObjectsEqual(GetPlayer.GetLawBeingEnacted.GetGroup, ChangeLawPanel.GetLaw.GetGroup.Self)]"
							using = highlighted_square_selection
						}

						### not enacting
						textbox = {
							visible = "[Not(ObjectsEqual(GetPlayer.GetLawBeingEnacted.GetGroup, ChangeLawPanel.GetLaw.GetGroup.Self))]"
							minimumsize = { @law_sides_width -1 }
							maximumsize = { @law_sides_width -1 }
							margin = { 15 0 }
							autoresize = yes
							multiline = yes
							align = center|nobaseline
							using = fontsize_xxl
							alpha = 0.6
							margin_top = 300
							text = "NO_LAW_IN_THIS_LAWGROUP_IS_BEING_ENACTED"
							default_format = "#title"
						}

						### enacting
						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							visible = "[ObjectsEqual(GetPlayer.GetLawBeingEnacted.GetGroup, ChangeLawPanel.GetLaw.GetGroup.Self)]"

							vbox = {
								datacontext = "[AccessPlayer.AccessLawBeingEnacted]"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = preferred
								margin = { 15 0 }

								### icon + name
								hbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = preferred

									law_enactment_progress = {
										size = { 140 140 }
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = preferred
										margin = { 10 0 }

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = preferred
										}

										textbox = {
											layoutpolicy_horizontal = expanding
											size = { 0 30 }
											text = "CURRENT_LAW_BEING_ENACTED"
											align = left|nobaseline
											using = fontsize_large
											elide = right
											fontsize_min = 14
										}

										textbox = {
											layoutpolicy_horizontal = expanding
											size = { 0 40 }
											text = "LAW"
											align = left|nobaseline
											using = fontsize_mega
											elide = right
											fontsize_min = 14
										}

										textbox = {
											name = "tutorial_highlight_enacting_law_checkpoint_date"
											layoutpolicy_horizontal = expanding
											size = { 0 30 }
											raw_text = "[FixedPointToFloat(Law.GetCheckpointProgress)|%v1] ([Law.GetCheckpointEndDateString])"
											align = left|nobaseline
											elide = right
											fontsize_min = 14
											tooltip = LAW_NEXT_CHECKPOINT_TIME_FACTORS_TOOLTIP
										}

										widget = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = preferred
										}

										# Setbacks

										hbox = {
											layoutpolicy_horizontal = preferred
											visible = "[GreaterThan_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)0')]"
											spacing = 4
											margin = { 0 10 }

											textbox = {
												autoresize = yes
												align = left|nobaseline
												text = "LAW_ENACTMENT_SETBACKS_LABEL"
												fontsize_min = 14
												elide = right
											}

											#Setback 1
											enactment_setback = {
												visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)1')]"

												blockoverride "has_setback_visibility" {
													visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)1')]"
												}
											}

											#Setback 2
											enactment_setback = {
												visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)2')]"

												blockoverride "has_setback_visibility" {
													visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)2')]"
												}
											}

											#Setback 3
											enactment_setback = {
												visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)3')]"

												blockoverride "has_setback_visibility" {
													visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)3')]"
												}
											}

											#Setback 4
											enactment_setback = {
												visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)4')]"

												blockoverride "has_setback_visibility" {
													visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)4')]"
												}
											}

											#Setback 5
											enactment_setback = {
												visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)5')]"

												blockoverride "has_setback_visibility" {
													visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)5')]"
												}
											}

											#Setback 6
											enactment_setback = {
												visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)6')]"

												blockoverride "has_setback_visibility" {
													visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)6')]"
												}
											}

											expand = {}
										}
									}
								}

								hbox = {
									layoutpolicy_horizontal = preferred
									layoutpolicy_vertical = expanding
									spacing = 20

									# Successes
									vbox = {
										layoutpolicy_horizontal = expanding


										hbox = {
											layoutpolicy_horizontal = expanding

											vbox = {
												layoutpolicy_horizontal = expanding

												#Phase 0
												enactment_phase = {
													blockoverride "active_size" {
														layoutpolicy_horizontal = expanding
														size = { 0 35 }
													}

													blockoverride "past_size" {
														layoutpolicy_horizontal = expanding
														size = { 0 25 }
													}

													blockoverride "not_reached_size" {
														layoutpolicy_horizontal = expanding
														size = { 0 25 }
													}
												}

												#Phase 1
												enactment_phase = {
													blockoverride "current_phase_visibility" {
														visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)1')]"
													}

													blockoverride "past_phase_visibility" {
														visible = "[GreaterThan_int32(Law.GetEnactmentPhase, '(int32)1')]"
													}

													blockoverride "not_reached_phase_visibility" {
														visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)1')]"
													}

													blockoverride "phase_name" {
														text = "[Law.GetCountry.GetCustom('enactment_phase_1')]"
													}

													blockoverride "active_size" {
														layoutpolicy_horizontal = expanding
														size = { 0 35 }
													}

													blockoverride "past_size" {
														layoutpolicy_horizontal = expanding
														size = { 0 25 }
													}

													blockoverride "not_reached_size" {
														layoutpolicy_horizontal = expanding
														size = { 0 25 }
													}
												}

												#Phase 2
												enactment_phase = {
													blockoverride "current_phase_visibility" {
														visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)2')]"
													}

													blockoverride "past_phase_visibility" {
														visible = "[GreaterThan_int32(Law.GetEnactmentPhase, '(int32)2')]"
													}

													blockoverride "not_reached_phase_visibility" {
														visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)2')]"
													}

													blockoverride "phase_name" {
														text = "[Law.GetCountry.GetCustom('enactment_phase_2')]"
													}

													blockoverride "active_size" {
														layoutpolicy_horizontal = expanding
														size = { 0 35 }
													}

													blockoverride "past_size" {
														layoutpolicy_horizontal = expanding
														size = { 0 25 }
													}

													blockoverride "not_reached_size" {
														layoutpolicy_horizontal = expanding
														size = { 0 25 }
													}
												}
											}
										}
									}
								}

								widget = { size = { 10 10 }}

								### approval info
								approval_info2 = {}

								widget = { size = { 10 10 }}

								vbox = {
									layoutpolicy_horizontal = preferred
									layoutpolicy_vertical = preferred
									margin = { 15 10 }

									background = {
										using = entry_bg_simple
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = preferred
										margin = { 10 10 }
										spacing = 10

										hbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = preferred
											spacing = 5

											textbox = {
												name = "tutorial_highlight_enacting_law_success_chance"
												alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointSuccessChance, '(CFixedPoint)0'))]"
												layoutpolicy_horizontal = expanding
												size = { 0 25 }
												using = fontsize_large
												align = left|nobaseline
												elide = right
												fontsize_min = 14
												text = "OUTCOME_SUCCESS"
											}
											textbox = {
												layoutpolicy_horizontal = expanding
												alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointAdvanceChance, '(CFixedPoint)0'))]"
												size = { 0 25 }
												using = fontsize_large
												align = left|nobaseline
												elide = right
												fontsize_min = 14
												text = "OUTCOME_ADVANCE"
											}
										}
										hbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = preferred
											spacing = 5

											textbox = {
												layoutpolicy_horizontal = expanding
												alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointDebateChance, '(CFixedPoint)0'))]"
												size = { 0 25 }
												using = fontsize_large
												align = left|nobaseline
												elide = right
												fontsize_min = 14
												text = "OUTCOME_DEBATE"
											}
											textbox = {
												layoutpolicy_horizontal = expanding
												alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointStallChance, '(CFixedPoint)0'))]"
												size = { 0 25 }
												using = fontsize_large
												align = left|nobaseline
												elide = right
												fontsize_min = 14
												text = "OUTCOME_STALL"
											}
										}
									}
								}
							}

							### info text
							textbox = {
								datacontext = "[GetPlayer.GetLawBeingEnacted]"
								visible = no
								text = "DATA_LAW_NAME_TOOLTIP"
								autoresize = yes
								multiline = yes
								minimumsize = { @law_sides_width -1 }
								maximumsize = { @law_sides_width -1 }
								margin = { 25 10 }
							}

							datacontext = "[GetPlayer.GetLawBeingEnacted]"

							### requirements header
							textbox = {
								visible = "[Not(StringIsEmpty(Law.GetLawType.GetBlockingRequirements(GetPlayer.Self)))]"
								default_format = "#title"
								autoresize = yes
								multiline = yes
								minimumsize = { @law_sides_width -1 }
								maximumsize = { @law_sides_width -1 }
								margin = { 25 0 }
								margin_top = 10
								text = "DATA_LAW_REQUIREMENTS_HEADER"
							}

							### requirements
							textbox = {
								visible = "[Not(StringIsEmpty(Law.GetLawType.GetBlockingRequirements(GetPlayer.Self)))]"
								autoresize = yes
								multiline = yes
								minimumsize = { @law_sides_width -1 }
								maximumsize = { @law_sides_width -1 }
								margin = { 35 0 }
								margin_bottom = 10
								text = "[Law.GetLawType.GetBlockingRequirements(GetPlayer.Self)]"
							}

							### additional effects header
							textbox = {
								visible = "[Not(StringIsEmpty(Law.GetLawType.GetAdditionalEffectDesc))]"
								default_format = "#title"
								autoresize = yes
								multiline = yes
								minimumsize = { @law_sides_width -1 }
								maximumsize = { @law_sides_width -1 }
								margin = { 25 0 }
								margin_top = 10
								text = "DATA_LAW_CUSTOM_EFFECTS_HEADER"
							}

							### additional effects
							textbox = {
								visible = "[Not(StringIsEmpty(Law.GetLawType.GetAdditionalEffectDesc))]"
								autoresize = yes
								multiline = yes
								minimumsize = { @law_sides_width -1 }
								maximumsize = { @law_sides_width -1 }
								margin = { 35 0 }
								margin_bottom = 10
								text = "[Law.GetLawType.GetAdditionalEffectDesc]"
							}

							### effects header
							textbox = {
								visible = "[Not(StringIsEmpty(Law.GetLawType.GetEffectDesc(GetPlayer.Self)))]"
								default_format = "#title"
								autoresize = yes
								multiline = yes
								minimumsize = { @law_sides_width -1 }
								maximumsize = { @law_sides_width -1 }
								margin = { 25 0 }
								margin_top = 10
								text = "DATA_LAW_EFFECTS_HEADER"
							}

							### effects
							textbox = {
								visible = "[Not(StringIsEmpty(Law.GetLawType.GetEffectDesc(GetPlayer.Self)))]"
								autoresize = yes
								multiline = yes
								minimumsize = { @law_sides_width -1 }
								maximumsize = { @law_sides_width -1 }
								margin = { 35 0 }
								text = "[Law.GetLawType.GetEffectDesc(GetPlayer.Self)]"
							}

							### supported by IGs
							textbox = {
								visible = "[Law.IsSupported]"
								autoresize = yes
								multiline = yes
								minimumsize = { @law_sides_width -1 }
								maximumsize = { @law_sides_width -1 }
								margin = { 25 10 }
								text = "DATA_LAW_TOOLTIP_SUPPORTED"
							}

							### not supported by IGs
							textbox = {
								visible = "[Not(Law.IsSupported)]"
								autoresize = yes
								multiline = yes
								minimumsize = { @law_sides_width -1 }
								maximumsize = { @law_sides_width -1 }
								margin = { 25 10 }
								text = "DATA_LAW_TOOLTIP_NOT_SUPPORTED"
							}

							divider_clean = {
								blockoverride "size" {
									layoutpolicy_horizontal = expanding
									size = { 0 2 }
								}
							}

							### law lore
							textbox = {
								default_format = "#lore"
								autoresize = yes
								multiline = yes
								minimumsize = { @law_sides_width -1 }
								maximumsize = { @law_sides_width -1 }
								margin = { 35 10 }
								text = "[Law.GetDesc]"
							}
						}

						widget = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
						}
					}
				}
			}
		}
	}
}
