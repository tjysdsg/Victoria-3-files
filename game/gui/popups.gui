types notifications {
	type notification_popup = default_popup {
		blockoverride "sound" {
			state = {
				name = sound
				trigger_on_create = yes
				start_sound = {
					soundeffect = "[PlayerMessageItem.GetOnCreatedSoundEvent]"
				}
			}
		}
	}

	type default_notification = notification_popup {
		blockoverride "window_header_name" {
			text = "[PlayerMessageItem.GetName]"
		}

		blockoverride "header_close_button_visibility" {
			visible = yes
		}
		blockoverride "header_close_button" {
			onclick = "[PopupManager.CloseMessage(PlayerMessageItem.AccessSelf)]"
			shortcut = "close_window"
		}

		blockoverride "scrollarea_content" {
			flowcontainer = {
				resizeparent = yes
				direction = vertical
				margin_top = 10
				margin_bottom = 15

				textbox = {
					autoresize = yes
					maximumsize = { 530 -1 }
					multiline = yes
					text = "[PlayerMessageItem.GetDescription]"
					using = fontsize_large
				}

				block "extra_info" {}
			}
		}

		blockoverride "fixed_bottom" {
			flowcontainer = {
				margin = { 10 10 }
				using = default_list_position

				button = {
					using = default_button
					size = { 200 40 }
					text = "OK"
					parentanchor = hcenter
					onclick = "[PopupManager.CloseMessage(PlayerMessageItem.AccessSelf)]"
					
					tooltip = "CONFIRM"
					input_action = "confirm"
				}
			}
		}
	}

	type popup_textbox = textbox {
		autoresize = yes
		align = nobaseline
		parentanchor = hcenter
		max_width = 330
		fontsize_min = 12
		elide = right

		block "text" {
			raw_text = "Replace me!"
		}
	}
	
	type base_general_information_window = container {
		
		parentanchor = center
		using = clickthrough_blocker
		layer = confirmation

		state = {
			trigger_on_create = yes
			name = 1
			next = 2

			alpha = 0
			position_y = -50
		}
		state = {
			name = 2
			duration = 0.25
			using = Animation_Curve_Default

			alpha = 1
			position_y = 0
		}

		background = {
			using = default_background
		}
		background = {
			using = frame_small
		}
		
		flowcontainer = {
			direction = vertical
			margin = { 40 20 }
			spacing = 20
			
			textbox = {
				block "text_size" {
					minimumsize = { 300 -1 }
					maximumsize = { 300 -1 }
				}
				
				multiline = yes
				text = "[GeneralInformationWindow.GetTitle]"
				autoresize = yes
			}

			textbox = {
				block "text_size" {
					minimumsize = { 300 -1 }
					maximumsize = { 300 -1 }
				}
				
				multiline = yes
				text = "[GeneralInformationWindow.GetText]"
				autoresize = yes
			}
			
			flowcontainer = {
				direction = horizontal
				using = default_list_position
				spacing = 20

				button = {
					using = default_button
					using = close_button_sound
					size = { 140 40 }
					text = "OK_BUTTON"
					shortcut = "close_window"

					block "answer_no_handler" {
						onclick = "[PopupManager.CloseGeneralInformationWindow]"
					}
				}
			}
		}
	}

	### CONFIRMATION WINDOW
	type default_confirmation_window = container {
		parentanchor = center
		using = clickthrough_blocker
		layer = confirmation

		state = {
			trigger_on_create = yes
			name = 1
			next = 2

			alpha = 0
			position_y = -50
		}
		state = {
			name = 2
			duration = 0.25
			using = Animation_Curve_Default

			alpha = 1
			position_y = 0
		}

		background = {
			using = default_background
		}
		background = {
			using = frame_small
		}

		flowcontainer = {
			direction = vertical
			margin = { 40 20 }
			spacing = 20

			textbox = {
				block "description_size" {
					minimumsize = { 300 -1 }
					maximumsize = { 300 -1 }
				}
				
				multiline = yes
				text = "[ConfirmationWindow.GetDesc]"
				autoresize = yes
			}

			flowcontainer = {
				direction = horizontal
				using = default_list_position
				spacing = 20

				button = {
					using = default_button
					using = close_button_sound
					size = { 140 40 }
					text = "CONFIRM_NO"
					shortcut = "close_window"

					block "answer_no_handler" {
						onclick = "[PopupManager.AnswerNo(ConfirmationWindow.Self)]"
					}
				}
				button = {
					name = "confirmation_button"
					using = default_button_primary_action
					using = confirm_button_sound
					size = { 140 40 }
					text = "CONFIRM_YES"
					
					tooltip = "CONFIRM"
					input_action = "confirm"

					block "answer_yes_handler" {
						onclick = "[PopupManager.AnswerYes(ConfirmationWindow.Self)]"
					}
				}
			}
		}
	}
}

base_general_information_window = {
	name = "general_information_window"
}

### DIPLOMATIC ACTION NOTIFICATION (WITH AI REASONS)
default_notification =  {
	name = "diplomatic_action_with_reasons_notification_popup"

	blockoverride "extra_info"
	{
		flowcontainer = {
			visible = "[Not(PlayerMessageItem.GetCountry.IsPlayer)]"
			datacontext = "[PlayerMessageItem.GetDiplomaticAction]"
			margin_top = 10

			textbox = {
				visible = "[And(Not(DiplomaticAction.IsPromisingObligation),Not(DiplomaticAction.IsCallingInObligation))]"
				text = "[DiplomaticAction.GetWillAcceptBreakdownNoObligation]"
				autoresize = yes
				multiline = yes
				maximumsize = { 420 -1 }
			}

			textbox = {
				visible = "[DiplomaticAction.IsPromisingObligation]"
				text = "[DiplomaticAction.GetWillAcceptBreakdownWithOweObligation]"
				autoresize = yes
				multiline = yes
				maximumsize = { 480 -1 }
			}

			textbox = {
				visible = "[DiplomaticAction.IsCallingInObligation]"
				text = "[DiplomaticAction.GetWillAcceptBreakdownWithCallInObligation]"
				autoresize = yes
				multiline = yes
				maximumsize = { 480 -1 }
			}			
		}
	}
}

### ACQUIRED TECHNOLOGY
notification_popup = {
	name = "acquired_technology_popup"
	using = default_fade_in

	blockoverride "behind_window" {
		### VFX
		vfx = {
			blockoverride "size" {
				size = { 800% 800% }
			}
			blockoverride "parent_anchor" {
				parentanchor = hcenter|vcenter
			}
			blockoverride "entity_instance" {
				entity_instance = vfx_entity_ui_celebration_behind_window
			}			
		}
	}
	blockoverride "window_header_name" {
		text = "TECHNOLOGY_AQUIRED_POPUP_HEADER"
	}

	blockoverride "header_close_button_visibility" {
		visible = yes
	}
	blockoverride "header_close_button" {
		onclick = "[PopupManager.CloseMessage(PlayerMessageItem.AccessSelf)]"
	}

	blockoverride "scrollarea_content" {
		
		flowcontainer = {
			resizeparent = yes
		
			margin_top = 15
			margin_bottom = 20
			using = default_list_position
			direction = vertical
			datacontext = "[PlayerMessageItem.GetScopeTechnology]"

			widget = {
				parentanchor = hcenter
				size = { 610 200 }

				widget = {
					parentanchor = hcenter
					size = { 610 200 }

					state = {
						name = start
						next = 2
						trigger_on_create = yes
						duration = 0
						alpha = 0
						size = { 0 200 }
						position = { 50 0 }
					}
					state = {
						name = 2
						duration = 0.7
						alpha = 1
						position = { 0 0 }
						size = { 610 200 }
						using = Animation_Curve_Default
					}

					icon = {
						size = { 100% 100% }
						using = entry_bg
						using = rotate_glow_overlay_blue_stop
						using = shimmer_fade_in
					}
				}

				widget = {
					size = { 607 193 }
					parentanchor = vcenter
					position = { 2 0 }

					background = {
						using = dark_area
					}

					### IMAGE
					icon = {
						size = { 437 193 }
						texture = "gfx/interface/icons/invention_icons/bg_tech_society.dds"
						using = rotate_glow_overlay_blue

						modify_texture = {
							texture = "gfx/interface/masks/fade_horizontal_right.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}

						state = {
							name = start
							next = 2
							trigger_on_create = yes
							duration = 0
							alpha = 0
						}
						state = {
							name = 2
							duration = 2
							alpha = 1
							using = Animation_Curve_Default
						}
					}


					### ICON
					widget = {
						position = { 0 0 }
						size = { 200 200 }
						parentanchor = vcenter

						### GLOW
						icon = {
							using = rotate_glow_blue
							position = { 0 0 }
							parentanchor = center
							size = { 170 170 }

							state = {
								name = start
								next = 2
								trigger_on_create = yes
								scale = 0.2
								duration = 0
								alpha = 0
							}
							state = {
								name = 2
								scale = 1
								duration = 0.5
								alpha = 0.4
								using = Animation_Curve_Default
							}
						}

						### BG
						icon = {
							size = { 180 180 }
							parentanchor = center
							texture = "gfx/interface/backgrounds/round_frame_dec.dds"

							using = rotate_glow_overlay_blue

							modify_texture = {
								name = "glow"
								texture = "gfx/interface/animation/shimmer.dds"
								blend_mode = colordodge
								translate_uv = { 0 0 }
							}

							state = {
								name = start
								next = 2
								trigger_on_create = yes
								scale = 0.5
								duration = 0
								alpha = 0.2

								modify_texture = {
									name = "glow"
									translate_uv = { -0.5 -0.5 }
								}
							}
							state = {
								name = 2
								scale = 1
								duration = 0.5
								alpha = 1
								using = Animation_Curve_Default

								modify_texture = {
									name = "glow"
									translate_uv = { 1 1 }
								}
							}

							### ICON
							icon = {
								parentanchor = hcenter
								size = { 170 170 }
								texture = "[Technology.GetTexture]"

								modify_texture = {
									name = "glow"
									texture = "gfx/interface/animation/shimmer.dds"
									blend_mode = colordodge
									translate_uv = { 0 0 }
								}

								state = {
									name = start
									next = 2
									trigger_on_create = yes
									scale = 0.3
									duration = 0
									alpha = 0

									modify_texture = {
										name = "glow"
										translate_uv = { -0.5 -0.5 }
									}
								}
								state = {
									name = 2
									scale = 1
									duration = 0.5
									alpha = 1
									using = Animation_Curve_Default

									modify_texture = {
										name = "glow"
										translate_uv = { 1 1 }
									}
								}
							}

							### ERA
							icon = {
								size = { 53 53 }
								parentanchor = bottom
								texture = "gfx/interface/backgrounds/round_button_bg.dds"

								textbox = {
									datacontext = "[Technology.GetEra]"
									text = TECHNOLOGY_TYPE_DESCRIPTION
									autoresize = yes
									using = fontsize_xxl
									parentanchor = center
									align = nobaseline
									position = { 0 -2 }
								}
							}
						}
					}
				}

				textbox = {
					position = { -20 0 }
					text = "TECHNOLOGY_LORE_TEXT"
					autoresize = yes
					maximumsize = { 360 185 }
					minimumsize = { 360 -1 }
					multiline = yes
					fontsize_min = 12
					parentanchor = right|vcenter

					state = {
						name = start
						next = 2
						trigger_on_create = yes
						duration = 0
						alpha = 0
						position = { -20 -30 }
					}
					state = {
						name = 2
						duration = 0.4
						alpha = 1
						position = { -20 0 }
						using = Animation_Curve_Default
					}
				}
			}

			textbox = {
				margin_top = 20
				parentanchor = hcenter
				text = "TECHNOLOGY_UNLOCKS_TEXT"
				autoresize = yes
				maximumsize = { 600 -1 }
				minimumsize = { 600 -1 }
				multiline = yes
			}
		}
	}

	blockoverride "fixed_bottom" {
		button = {
			using = default_list_position
			using = default_button
			text = "OK"
			onclick = "[PopupManager.CloseMessage(PlayerMessageItem.AccessSelf)]"
			size = { 280 40 }
			
			tooltip = "CONFIRM"
			input_action = "confirm"
		}
	}
}

### LAW CHANGED
notification_popup = {
	name = "law_changed_popup"

	blockoverride "window_header_name" {
		text = "WE_NOW_HAVE_LAW"
	}

	blockoverride "header_close_button_visibility" {
		visible = yes
	}
	blockoverride "header_close_button" {
		onclick = "[PopupManager.CloseMessage(PlayerMessageItem.AccessSelf)]"
		shortcut = "close_window"
	}

	blockoverride "scrollarea_content" {
		flowcontainer = {
			resizeparent = yes
			margin_top = 10
			using = default_list_position
			direction = vertical
			margin_left = 10
			margin_right = 10
			datacontext = "[PlayerMessageItem.GetLaw]"

			widget = {
				parentanchor = hcenter
				size = { 610 200 }

				widget = {
					parentanchor = hcenter
					size = { 610 200 }

					state = {
						name = start
						next = 2
						trigger_on_create = yes
						duration = 0
						alpha = 0
						size = { 0 200 }
						position = { 0 0 }
					}
					state = {
						name = 2
						duration = 0.7
						alpha = 1
						position = { 0 0 }
						size = { 610 200 }
						using = Animation_Curve_Default
					}

					icon = {
						size = { 100% 100% }
						using = entry_bg
						using = rotate_glow_overlay_blue_stop
						using = shimmer_fade_in
					}
				}

				widget = {
					size = { 607 190 }
					parentanchor = center

					### IMAGE
					icon = {
						size = { 437 193 }
						texture = "gfx/interface/illustrations/government/government_illustration.dds"
						using = rotate_glow_overlay_blue

						modify_texture = {
							texture = "gfx/interface/masks/fade_horizontal_right.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}

						modify_texture = {
							texture = "gfx/interface/masks/fade_horizontal_left.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}

						modify_texture = {
							texture = "gfx/interface/masks/fade_vertical_bottom.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = alphamultiply
						}

						state = {
							name = start
							next = 2
							trigger_on_create = yes
							duration = 0
							alpha = 0
						}
						state = {
							name = 2
							duration = 2
							alpha = 1
							using = Animation_Curve_Default
						}
					}


					### ICON
					widget = {
						position = { 0 0 }
						size = { 200 200 }
						parentanchor = vcenter

						### GLOW
						icon = {
							using = rotate_glow_blue
							position = { 0 0 }
							parentanchor = center
							size = { 170 170 }

							state = {
								name = start
								next = 2
								trigger_on_create = yes
								scale = 0.2
								duration = 0
								alpha = 0
							}
							state = {
								name = 2
								scale = 1
								duration = 0.5
								alpha = 0.4
								using = Animation_Curve_Default
							}
						}

						### BG
						icon = {
							size = { 180 180 }
							parentanchor = center

							using = rotate_glow_overlay_blue

							modify_texture = {
								name = "glow"
								texture = "gfx/interface/animation/shimmer.dds"
								blend_mode = colordodge
								translate_uv = { 0 0 }
							}

							state = {
								name = start
								next = 2
								trigger_on_create = yes
								scale = 0.5
								duration = 0
								alpha = 0.2

								modify_texture = {
									name = "glow"
									translate_uv = { -0.5 -0.5 }
								}
							}
							state = {
								name = 2
								scale = 1
								duration = 0.5
								alpha = 1
								using = Animation_Curve_Default

								modify_texture = {
									name = "glow"
									translate_uv = { 1 1 }
								}
							}

							button_icon_round = {
								parentanchor = center
								tooltip = "GO_TO_BUTTON_LAW"
								using = tooltip_above
								onclick = "[InformationPanelBar.OpenChangeLaw(Law.AccessSelf)]"

								blockoverride "size" {
									size = { 60% 60% }
								}

								blockoverride "icon" {
									texture = "[Law.GetTexture]"
								}
								blockoverride "icon_size" {
									size = { 75% 75% }
								}
							}
						}
					}
				}

				textbox = {
					parentanchor = right|vcenter
					position = { -40 0 }
					text = "LAW_LORE_HEADER"
					autoresize = yes
					maximumsize = { 320 -1 }
					minimumsize = { 320 -1 }
					multiline = yes
					align = nobaseline

					state = {
						name = start
						next = 2
						trigger_on_create = yes
						duration = 0
						alpha = 0
						position = { -40 -30 }
					}
					state = {
						name = 2
						duration = 0.4
						alpha = 1
						position = { -40 0 }
						using = Animation_Curve_Default
					}
				}
			}

			flowcontainer = {
				margin_top = 20
				margin_left = 30
				direction = vertical
				minimumsize = { 610 -1 }
				maximumsize = { 610 -1 }

				textbox = {
					raw_text = "#title [Law.GetNameNoFormatting]#!"
					autoresize = yes
					multiline = yes
					using = fontsize_xxl
					maximumsize = { 600 -1 }
					align = nobaseline
				}

				textbox = {
					raw_text = "[PlayerMessageItem.GetLaw.GetTooltipNoRequirements]"
					autoresize = yes
					multiline = yes
					maximumsize = { 600 -1 }
					align = nobaseline
				}	
			}

			textbox = {
				margin_left = 30
				visible = "[PlayerMessageItem.GetPrevLaw.IsValid]"
				text = "PREVIOUS_LAW_POPUP_HEADER"
				autoresize = yes
				multiline = yes
				maximumsize = { 600 -1 }
				margin_bottom = 20
			}

			textbox = {
				visible = no
				text = "ENACT_APPROVAL_CHANGES"
				autoresize = yes
				multiline = yes
				maximumsize = { 600 -1 }
				align = nobaseline
			}

			textbox = {
				visible = no
				raw_text = "[PlayerMessageItem.GetLaw.GetIGsEnactmentList]"
				autoresize = yes
				multiline = yes
				maximumsize = { 600 -1 }
				margin_bottom = 20
				align = nobaseline
			}
		}
	}

	blockoverride "fixed_bottom" {
		button = {
			using = default_list_position
			using = default_button
			size = { 400 40 }
			text = "OK"
			onclick = "[PopupManager.CloseMessage(PlayerMessageItem.AccessSelf)]"			
			tooltip = "CONFIRM"
			input_action = "confirm"
		}
	}
}

### DIPLO ACTION WINDOW
default_popup_two_lines =  {
	datacontext = "[DiplomaticActionWindow.GetDiplomaticAction]"

	state = {
		name = _show
		#trigger_on_create = yes
		#start_sound = {
		#	soundeffect = "event:/SFX/UI/Global/popup_show"
		#}
		#alpha = 1
		#duration = 0
	}
	name = "diplomatic_action_window"

	blockoverride "header_close_button_visibility" {
		visible = yes
	}

	blockoverride "header_close_button" {
		onclick = "[PopupManager.HideDiplomaticActionConfirmation]"
		shortcut = "close_window"
	}

	blockoverride "window_header_name" {
		datacontext = "[DiplomaticActionWindow.GetDiplomaticAction]"
		text = "DIPLOMATIC_ACTION_HEADER"
	}

	blockoverride "second_text" {
		datacontext = "[DiplomaticActionWindow.GetDiplomaticAction]"
		text = "DIPLOMATIC_ACTION_SECOND_HEADER"
	}

	blockoverride "second_text_properties" {
		position = { 0 50 }
		align = hcenter|nobaseline
		max_width = 510
		fontsize_min = 12
		elide = right
	}

	blockoverride "scrollarea_content"
	{
		flowcontainer = {
			direction = vertical
			resizeparent = yes
			margin_top = 10
			
			flowcontainer = {
				visible = "[Not(DiplomaticActionWindow.HasStateSelectionTarget)]"	
				direction = vertical

				textbox = {
					visible = "[Not(StringIsEmpty(DiplomaticAction.GetPopupDesc))]"
					minimumsize = { 525 -1 }
					maximumsize = { 525 -1 }
					multiline = yes
					align = nobaseline
					autoresize = yes
					margin_bottom = 10
					text = "[DiplomaticAction.GetPopupDesc]"
				}
				
				flowcontainer = {
					direction = vertical
					visible = "[And(Not(IsDataModelEmpty( AccessPlayer.AccessVioSovWars( DiplomaticAction.GetSecondCountry ))), DiplomaticAction.ViolatesSovereignty)]"

					textbox = {
						autoresize = yes
						align = left|nobaseline
						text = "violate_sovereignty_wars"
					}

					dynamicgridbox = {
						datamodel = "[AccessPlayer.AccessVioSovWars( DiplomaticAction.GetSecondCountry )]"

						item = {
							textbox = {
								autoresize = yes
								align = left|nobaseline
								text = "[War.GetName|v]"
							}
						}
					}

					widget = {
						size = { 10 10 }
					}

					textbox = {
						autoresize = yes
						align = left|nobaseline
						text = "violate_sovereignty_countries"
						datacontext = "[DiplomaticAction.GetSecondCountry]"
					}

					dynamicgridbox = {
						datamodel = "[AccessPlayer.AccessVioSovInterestedCountries( DiplomaticAction.GetSecondCountry )]"
						flipdirection = yes

						item = {
							tiny_flag = { }
						}
					}
				}

				flowcontainer = {
					visible = "[DiplomaticAction.CanCallInObligation]"
					margin_top = 10
					margin_bottom = 10
					spacing = 5

					checkbutton = {
						size = { 25 25 }
						parentanchor = vcenter
						using = check_button
						onclick = "[DiplomaticActionWindow.ToggleCallInObligation]"
						checked = "[DiplomaticActionWindow.WillCallInObligation]"
					}

					textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						text = "USE_OBLIGATION"
					}
				}

				flowcontainer = {
					visible = "[DiplomaticAction.CanPotentiallyOweObligation]"
					margin_top = 10
					margin_bottom = 10
					spacing = 5

					checkbutton = {
						size = { 25 25 }
						parentanchor = vcenter
						using = check_button
						enabled = "[DiplomaticAction.CanOweObligation]"
						onclick = "[DiplomaticActionWindow.ToggleOweObligation]"
						checked = "[DiplomaticActionWindow.WillOweObligation]"
					}

					textbox = {
						parentanchor = vcenter
						autoresize = yes
						align = nobaseline
						text = "OWE_OBLIGATION"
					}
				}
				
				flowcontainer = {				
					visible = "[Or(DiplomaticActionWindow.CanSelectFirstState,DiplomaticActionWindow.CanSelectSecondState)]"
					parentanchor = hcenter
					direction = horizontal
					spacing = 10
						
					flowcontainer = {
						visible = "[DiplomaticActionWindow.CanSelectFirstState]"
						direction = vertical
						spacing = 10
						margin = { 20 20 }

						background = {
							using = entry_bg_simple
						}

						popup_textbox = {
							datacontext = "[DiplomaticAction.GetFirstCountry]"

							blockoverride "text" {
								text = "DIPLOMATIC_ACTION_STATE_HEADER"
							}
						}

						popup_textbox = {
							visible = "[Not(DiplomaticActionWindow.GetFirstState.IsValid)]"
							using = fontsize_xxl
							using = empty_state_text_properties

							blockoverride "text" {
								text = "NO_STATE_SELECTED"
							}
						}

						popup_textbox = {
							visible = "[DiplomaticActionWindow.GetFirstState.IsValid]"
							using = fontsize_xxl

							blockoverride "text" {
								text = "[DiplomaticActionWindow.GetFirstState.GetName]"
							}
						}
						
						button = {
							visible = "[Not(DiplomaticActionWindow.GetFirstState.IsValid)]"
							using = default_button
							parentanchor = hcenter
							size = { 140 42 }
							text = "SELECT_STATE"
							onclick = "[DiplomaticActionWindow.SetStateSelectionTarget(DiplomaticAction.GetFirstCountry)]"
						}
						
						flowcontainer = {
							visible = "[DiplomaticActionWindow.GetFirstState.IsValid]"
							parentanchor = hcenter
							margin = { 5 5 }
							spacing = 10					

							button = {
								using = default_button
								size = { 140 42 }
								text = "CHANGE_STATE"
								onclick = "[DiplomaticActionWindow.SetStateSelectionTarget(DiplomaticAction.GetFirstCountry)]"
							}
							
							button = {
								using = default_button
								size = { 140 42 }
								text = "CLEAR_STATE"
								onclick = "[DiplomaticActionWindow.ClearFirstState]"
							}
						}
					}

					flowcontainer = {
						visible = "[DiplomaticActionWindow.CanSelectSecondState]"
						direction = vertical
						spacing = 10
						margin = { 20 20 }

						background = {
							using = entry_bg_simple
						}
						
						popup_textbox = {
							datacontext = "[DiplomaticAction.GetSecondCountry]"

							blockoverride "text" {
								text = "DIPLOMATIC_ACTION_STATE_HEADER"
							}
						}

						popup_textbox = {
							visible = "[Not(DiplomaticActionWindow.GetSecondState.IsValid)]"
							using = fontsize_xxl
							using = empty_state_text_properties

							blockoverride "text" {
								text = "NO_STATE_SELECTED"
							}
						}

						popup_textbox = {
							visible = "[DiplomaticActionWindow.GetSecondState.IsValid]"
							using = fontsize_xxl

							blockoverride "text" {
								text = "[DiplomaticActionWindow.GetSecondState.GetName]"
							}
						}
						
						button = {
							visible = "[Not(DiplomaticActionWindow.GetSecondState.IsValid)]"
							using = default_button
							parentanchor = hcenter
							size = { 140 42 }
							text = "SELECT_STATE"
							onclick = "[DiplomaticActionWindow.SetStateSelectionTarget(DiplomaticAction.GetSecondCountry)]"
						}

						flowcontainer = {
							visible = "[DiplomaticActionWindow.GetSecondState.IsValid]"
							parentanchor = hcenter
							margin = { 5 5 }
							spacing = 10					

							button = {
								using = default_button
								size = { 140 42 }
								text = "CHANGE_STATE"
								onclick = "[DiplomaticActionWindow.SetStateSelectionTarget(DiplomaticAction.GetSecondCountry)]"
							}
							
							button = {
								using = default_button
								size = { 140 42 }
								text = "CLEAR_STATE"
								onclick = "[DiplomaticActionWindow.ClearSecondState]"
							}
						}
					}						
				}

				flowcontainer = {
					visible = "[DiplomaticAction.RequiresApproval]"
					margin_top = 10

					flowcontainer = {
						visible = "[Not(DiplomaticActionWindow.IsUsingObligation)]"
						minimumsize = { 525 -1 }
						
						flowcontainer = {
							direction = vertical					

							textbox = {
								autoresize = yes
								align = nobaseline
								text = "[DiplomaticAction.GetWillAcceptDescNoObligation]"
							}
						
							textbox = {
								margin_left = 20
								autoresize = yes
								align = nobaseline
								text = "[DiplomaticAction.GetWillAcceptBreakdownNoObligation]"
							}	
						}						
					}

					flowcontainer = {
						visible = "[DiplomaticActionWindow.WillCallInObligation]"
						minimumsize = { 525 -1 }

						flowcontainer = {
							direction = vertical
						
							textbox = {
								autoresize = yes
								align = nobaseline
								text = "[DiplomaticAction.GetWillAcceptDescWithCallInObligation]"
							}
							
							textbox = {
								margin_left = 20
								autoresize = yes
								align = nobaseline
								text = "[DiplomaticAction.GetWillAcceptBreakdownWithCallInObligation]"
							}	
						}				
					}

					flowcontainer = {
						visible = "[DiplomaticActionWindow.WillOweObligation]"
						minimumsize = { 525 -1 }										

						flowcontainer = {
							direction = vertical
						
							textbox = {
								autoresize = yes
								align = nobaseline
								text = "[DiplomaticAction.GetWillAcceptDescWithOweObligation]"
							}
							
							textbox = {
								margin_left = 20
								autoresize = yes
								align = nobaseline
								text = "[DiplomaticAction.GetWillAcceptBreakdownWithOweObligation]"
							}	
						}
					}
				}
			}
			
			flowcontainer = {
				visible = "[DiplomaticActionWindow.HasStateSelectionTarget]"
				minimumsize = { 575 -1 } 
				direction = vertical
				parentanchor = hcenter
				widgetanchor = hcenter

				flowcontainer = {
					datamodel = "[DiplomaticActionWindow.AccessPossibleStates]"
					direction = vertical
					spacing = 15

					item = {					
						container = {
							tooltipwidget = {
								FancyTooltip_State = {}
							}

							minimumsize = { 575 80 } 
							maximumsize = { 575 80 } 
							parentanchor = hcenter
							
							background = {
								using = Background_Area
								margin = { 0 5 }
							}

							textbox = {
								parentanchor = vcenter
								position = { 10 0 }
								align = nobaseline
								autoresize = yes
								max_width = 200
								fontsize_min = 12
								elide = right
								raw_text = "[State.GetCountry.GetFlagTextIcon] [State.GetName]"
							}

							flowcontainer = {
								direction = vertical
								position = { 220 5 }

								textbox = {
									align = nobaseline
									autoresize = yes
									max_width = 170
									elide = right
									fontsize_min = 12
									text = "STATE_YEARLY_GDP"
								}
								
								textbox = {
									align = nobaseline
									autoresize = yes
									max_width = 170
									elide = right
									fontsize_min = 12
									text = "STATE_POPULATION_WITH_ICON"
								}

								textbox = {
									visible = "[State.IsIncorporated]"
									align = nobaseline
									autoresize = yes
									max_width = 170
									elide = right
									fontsize_min = 12
									text = "STATE_INCORPORATED_SHORT_WITH_ICON"
								}

								textbox = {
									visible = "[Not(State.IsIncorporated)]"
									align = nobaseline
									autoresize = yes
									max_width = 170
									elide = right
									fontsize_min = 12
									text = "STATE_UNINCORPORATED_SHORT_WITH_ICON"
								}
							}
							

							button = {
								using = default_button
								position = { -20 0 }
								size = { 150 42 }
								text = "SELECT"
								parentanchor = vcenter|right
								onclick = "[DiplomaticActionWindow.SelectState(State.Self)]"
								onclick = "[DiplomaticActionWindow.ClearStateSelectionTarget]"
							}								
						}
					}
				}

				empty_state = {
					blockoverride "visible" {
						visible = "[IsDataModelEmpty(DiplomaticActionWindow.AccessPossibleStates)]"
					}

					blockoverride "text" {
						text = "NO_AVAILABLE_STATES"
					}
				}	
			}				
		}
	}

	blockoverride "fixed_bottom" {
		button = {
			visible = "[DiplomaticActionWindow.HasStateSelectionTarget]"
			using = default_button
			size = { 250 42 }
			text = "BACK"
			onclick = "[DiplomaticActionWindow.ClearStateSelectionTarget]"
			parentanchor = hcenter
			align = hcenter
		}				
	
	
		flowcontainer = {
			visible = "[Not(DiplomaticActionWindow.HasStateSelectionTarget)]"
			using = default_list_position
			direction = horizontal
			margin_top = 20
			spacing = 20
			
			button = {
				using = default_button
				using = close_button_sound
				size = { 250 42 }
				text = "CANCEL"
				onclick = "[PopupManager.HideDiplomaticActionConfirmation]"
				shortcut = "close_window"
			}

			button = {
				using = default_button_primary_action
				clicksound = "[DiplomaticActionWindow.GetConfirmationSound]"
				using = ui_pointer_over
				size = { 250 42 }
				text = "CONFIRM"

				onclick = "[Execute(DiplomaticActionWindow.ExecuteAction)]"
				onclick = "[DiplomaticActionWindow.ShowMapNotification]"
				onclick = "[PopupManager.HideDiplomaticActionConfirmation]"
				enabled = "[IsValid(DiplomaticActionWindow.ExecuteAction)]"

				tooltip = "[DiplomaticActionWindow.GetConfirmationTooltip]"
				input_action = "confirm"
			}
		}
	}
}

### RELEASE COUNTRY WINDOW
default_popup =  {
	name = "release_country_window"

	flag = {
		datacontext = "[GetPlayer]"
		position = { 55 30 }
	}

	flag_icon = {
		texture = "[ReleaseCountryWindow.GetCountryCreation.GetDefinition.GetFlag('formation').GetMediumFlagTexture]"
		frame = "[ReleaseCountryWindow.GetCountryCreation.GetDefinition.GetFlag('formation').GetMediumFlagFrame]"
		framesize = "[GetMediumFlagFrameSize]"
		blockoverride "flag_tooltip" {}
		parentanchor = right
		widgetanchor = right
		position = { -55 30 }
	}

	blockoverride "window_header_name" {
		text = "RELEASE_COUNTRY_HEADER"
		datacontext = "[ReleaseCountryWindow.GetCountryCreation]"
	}

	blockoverride "scrollarea_content"
	{
		flowcontainer = {
			direction = vertical
			resizeparent = yes
			margin_top = 10

			# Question for player:
			textbox = {
				minimumsize = { 525 -1 }
				maximumsize = { 525 -1 }
				multiline = yes
				align = left|top
				autoresize = yes
				margin_bottom = 10
				text = "[ReleaseCountryWindow.GetPopupQuestion]"
			}

			# Checkbox + textbox: Release Country as Independent
			flowcontainer = {
				direction = horizontal
				margin_top = 10
				margin_bottom = 10
				tooltip = "[ReleaseCountryWindow.GetMakeIndependentTooltip]"

				button_radio = {
					parentanchor = vcenter
					onclick = "[ReleaseCountryWindow.ToggleMakeIndependent]"
					visible = "[Not(ReleaseCountryWindow.WillMakeIndependent)]"
					enabled = "[And(ReleaseCountryWindow.CanMakeIndependent, ReleaseCountryWindow.CanMakeOwnSubject)]"
					size = { 25 25 }
					using = check_button_sound
				}

				button_radio = {
					parentanchor = vcenter
					onclick = "[ReleaseCountryWindow.ToggleMakeIndependent]"
					enabled = "[And(ReleaseCountryWindow.CanMakeIndependent, ReleaseCountryWindow.CanMakeOwnSubject)]"
					visible = "[ReleaseCountryWindow.WillMakeIndependent]"
					size = { 25 25 }
					frame = 2
					using = check_button_sound
				}

				textbox = {
					text = RELEASE_COUNTRY_AS_INDEPENDENT
					autoresize = yes
					margin_left = 10
					widgetanchor = left|vcenter
					parentanchor = left|vcenter
				}
			}

			# Checkbox + textbox: Release Country as own Subject
			flowcontainer = {
				direction = horizontal
				margin_top = 10
				margin_bottom = 10
				tooltip = "[ReleaseCountryWindow.GetMakeOwnSubjectTooltip]"

				button_radio = {
					using = check_button_sound
					parentanchor = vcenter
					onclick = "[ReleaseCountryWindow.ToggleMakeOwnSubject]"
					visible = "[Not(ReleaseCountryWindow.WillMakeOwnSubject)]"
					enabled = "[ReleaseCountryWindow.CanMakeOwnSubject]"
					size = { 25 25 }
				}

				button_radio = {
					using = check_button_sound
					parentanchor = vcenter
					onclick = "[ReleaseCountryWindow.ToggleMakeOwnSubject]"
					enabled = "[ReleaseCountryWindow.CanMakeOwnSubject]"
					visible = "[ReleaseCountryWindow.WillMakeOwnSubject]"
					size = { 25 25 }
					frame = 2
				}

				textbox = {
					text = RELEASE_COUNTRY_AS_OWN_SUBJECT
					autoresize = yes
					margin_left = 10
					widgetanchor = left|vcenter
					parentanchor = left|vcenter
				}
			}

			# Checkbox + textbox: Play as released country
			flowcontainer = {
				direction = horizontal
				margin_top = 10
				margin_bottom = 10
				tooltip = "[ReleaseCountryWindow.GetPlayAsReleasedTooltip]"

				checkbutton = {
					parentanchor = vcenter
					enabled = "[ReleaseCountryWindow.CanPlayAsReleased]"
					onclick = "[ReleaseCountryWindow.TogglePlayAsReleased]"
					checked = "[ReleaseCountryWindow.WillPlayAsReleased]"
					using = check_button
					size = { 25 25 }
				}

				textbox = {
					datacontext = "[ReleaseCountryWindow.GetCountryCreation]"
					text = RELEASE_COUNTRY_PLAY_AS
					autoresize = yes
					margin_left = 10
					widgetanchor = left|vcenter
					parentanchor = left|vcenter
				}
			}
		}
	}

	blockoverride "fixed_bottom" {
		flowcontainer = {
			using = default_list_position
			direction = horizontal
			margin_top = 20
			spacing = 20

			button = {
				using = default_button
				using = close_button_sound
				size = { 250 42 }
				text = "CANCEL"
				onclick = "[PopupManager.HideReleaseCountryConfirmation]"
				shortcut = "close_window"
			}

			button = {
				using = default_button_primary_action
				size = { 250 42 }
				text = "RELEASE"
				enabled = "[IsValid(ReleaseCountryWindow.ReleaseCountry)]"
				onclick = "[Execute(ReleaseCountryWindow.ReleaseCountry)]"
				onclick = "[PopupManager.HideReleaseCountryConfirmation]"
				
				tooltip = "CONFIRM"
				input_action = "confirm"
			}
		}
	}
}

### NATIONALIZE BUILDING WINDOW
default_popup_two_lines =  {
	name = "nationalize_building_window"

	blockoverride "window_header_name" {
		text = "NATIONALIZE_BUILDING_HEADER"
	}

	blockoverride "second_text" {
		text = "NATIONALIZE_BUILDINGS_DESCRIPTION"
	}

	block "header_close_button_visibility" {
		visible = yes
	}

	blockoverride "header_close_button_visibility"
	{
		visible = yes
	}

	blockoverride "header_close_button" {
		visible = yes

		onclick = "[PopupManager.HideNationalizeBuildingWindow]"
		shortcut = "close_window"
	}

	blockoverride "entire_scrollarea" {
		widget = {
			size = { 1220 500 }

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				spacing = 20

				hbox = {
					name = "main_area"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					spacing = 20

					vbox = {
						name = "left_ownerships"
						minimumsize = { 680 -1 } #not sure why i need to force the width here to be half minus the spacing and not just use layoutpolicy_horizontal = expanding. If I use layoutpolicy, the margins and spacings mess with the equal size both sides should have
						maximumsize = { 680 -1 }
						layoutpolicy_vertical = expanding

						hbox = {
							name = "building_list_none_all"
							layoutpolicy_horizontal = expanding

							margin = { 5 5 }
							spacing = 10

							overlappingitembox = {
								name = "buildings"

								layoutpolicy_horizontal = expanding
								size = { 0 60 }

								margin = { 5 5 }
								spacing = 5

								background = {
									using = dark_area
									alpha = 0.1
								}

								datamodel = "[NationalizeBuildingWindow.GetBuildingTypeGroups]"

								item = {
									button = { # must be a button to be shown at the front on mouse over
										size = { 50 50 }
										datacontext = "[NationalizeBuildingTypeGroup.GetBuildingType]"

										tooltip = "NATIONALIZE_BUILDING_TYPE_GROUP_TOOLTIP"
										using = tooltip_se

										icon = { #nested in an icon so it does not get the highlight or click effects
											size = { 100% 100% }
											texture = "[BuildingType.GetIcon]"

											textbox = {
												parentanchor = right|bottom
												autoresize = yes
												align = nobaseline
												using = fontsize_small
												max_width = 50
												elide = right
												raw_text = "#v [NationalizeBuildingTypeGroup.GetCurrentLevels]#!/[NationalizeBuildingTypeGroup.GetMaxLevels]"
											}
										}
									}
								}
							}

							hbox = {
								name = "none_all"
								layoutpolicy_horizontal = preferred
								layoutpolicy_vertical = preferred
								spacing = 5

								button = {
									visible = "[Not(EqualTo_int32( NationalizeBuildingWindow.GetNumLevelsToNationalize, '(int32)0' ))]"
									size = { 100 35 }
									using = default_button
									onclick = "[NationalizeBuildingWindow.SetNationalizeToNone]"


									textbox = {
										size = { 100% 100% }
										align = hcenter|nobaseline
										text = "NONE"
									}
								}

								widget = {
									visible = "[EqualTo_int32( NationalizeBuildingWindow.GetNumLevelsToNationalize, '(int32)0' )]"
									size = { 100 35 }

									background = {
										using = paper_bg
									}

									textbox = {
										size = { 100% 100% }
										align = hcenter|nobaseline
										text = "NONE"
									}
									
									icon = {
										using = highlighted_square_selection
									}
								}

								button = {
									visible =  "[Not(NationalizeBuildingWindow.IsNationalizingAll)]"
									size = { 100 35 }
									using = default_button
									enabled = "[NationalizeBuildingWindow.HasNationalizableGroup]"
									onclick = "[NationalizeBuildingWindow.SetNationalizeToAll]"

									textbox = {
										size = { 100% 100% }
										align = hcenter|nobaseline
										text = "ALL"
									}
								}

								widget = {
									visible =  "[NationalizeBuildingWindow.IsNationalizingAll]"
									size = { 100 35 }

									background = {
										using = paper_bg
									}

									textbox = {
										size = { 100% 100% }
										align = hcenter|nobaseline
										text = "ALL"
									}
									
									icon = {
										using = highlighted_square_selection
									}
								}
							}
						}

						hbox = {
							name = "sort_buttons"
							layoutpolicy_horizontal = expanding

							sort_button = {
								layoutpolicy_horizontal = expanding
								text = "OWNER"
								tooltip = "SORT_BY_OWNERSHIP"
								align = nobaseline
								onclick = "[NationalizeBuildingWindow.Sort('ownership')]"
							}

							sort_button = {
								layoutpolicy_horizontal = expanding
								text = "concept_building_levels_short"
								tooltip = "SORT_BY_OWNED_LEVELS"
								align = nobaseline
								onclick = "[NationalizeBuildingWindow.Sort('levels')]"
							}
						}


						scrollarea = {
							name = "ownerships_scrollarea"
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							scrollbarpolicy_horizontal = always_off

							scrollbar_vertical = {
								using = vertical_scrollbar
							}

							background = {
								using = default_background
							}

							scrollwidget = {

								vbox = {
									layoutpolicy_horizontal = expanding
									vbox = {
										layoutpolicy_horizontal = expanding
										datamodel = "[NationalizeBuildingWindow.GetBuildingGroups]"

										item = {
											hbox = {
												enabled = "[NationalizeBuildingGroup.IsNationalizable]"
												name = "ownership_group_entry"
												layoutpolicy_horizontal = expanding
												tooltip = "NATIONALIZE_BUILD_GROUP_TOOLTIP"

												margin = { 10 5 }
												margin_right = 20
												spacing = 10

												background = {
													using = fade_right_entry_header_colored

													color = "[NationalizeBuildingGroup.GetColor]"
												}

												hbox = {
													name = "icon_and_name"
													layoutpolicy_horizontal = expanding
													spacing = 5
													datacontext = "[NationalizeBuildingGroup.GetInvestor]"

													widget = {
														name = "icon"
														size = { 35 35 }

														tiny_flag_no_interact = {
															parentanchor = center
														}
													}

													textbox = {
														layoutpolicy_horizontal = expanding
														text = "[NationalizeBuildingGroup.GetName]"
														align = nobaseline
														elide = right
													}

													widget = {
														size = { 35 35 }
														visible = "[NationalizeBuildingGroup.IsPrivate]"
													
														button_icon_round = {
															visible = "[NationalizeBuildingGroup.HasFilter('all')]"
															size = { 35 35 }
															onclick = "[RightClickMenuManager.ToggleNationalizePrivatelyOwnedFilter(NationalizeBuildingGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
															tooltip = "PRIVATELY_OWNED_FILTER_BUTTON_TOOLTIP_ALL"
	
															blockoverride "icon" {
																texture = "gfx/interface/icons/building_icons/building_browser_filter_icons/filter_icons_all.dds"
															}
	
															blockoverride "icon_size" {
																size = { 75% 75% }
															}
														}
	
														button_icon_round = {
															visible = "[NationalizeBuildingGroup.HasFilter('companies')]"
															size = { 32 32 }
															onclick = "[RightClickMenuManager.ToggleNationalizePrivatelyOwnedFilter(NationalizeBuildingGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
															tooltip = "PRIVATELY_OWNED_FILTER_BUTTON_TOOLTIP_COMPANIES"
	
															blockoverride "icon" {
																texture = "gfx/interface/main_hud/companies_btn.dds"
															}
														}
	
														button_icon_round = {
															visible = "[NationalizeBuildingGroup.HasFilter('manor_house')]"
															size = { 32 32 }
															onclick = "[RightClickMenuManager.ToggleNationalizePrivatelyOwnedFilter(NationalizeBuildingGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
															tooltip = "PRIVATELY_OWNED_FILTER_BUTTON_TOOLTIP_MANOR_HOUSE"
	
															blockoverride "icon" {
																texture = "[GetBuildingType('building_manor_house').GetIcon]"
															}
														}
	
														button_icon_round = {
															visible = "[NationalizeBuildingGroup.HasFilter('financial_district')]"
															size = { 32 32 }
															onclick = "[RightClickMenuManager.ToggleNationalizePrivatelyOwnedFilter(NationalizeBuildingGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
															tooltip = "PRIVATELY_OWNED_FILTER_BUTTON_TOOLTIP_FINANCIAL_DISTRICT"
	
															blockoverride "icon" {
																texture = "[GetBuildingType('building_financial_district').GetIcon]"
															}
														}
														
														button_icon_round = {
															visible = "[NationalizeBuildingGroup.HasFilter('self')]"
															size = { 32 32 }
															onclick = "[RightClickMenuManager.ToggleNationalizePrivatelyOwnedFilter(NationalizeBuildingGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
															tooltip = "PRIVATELY_OWNED_FILTER_BUTTON_TOOLTIP_WORKER_OWNED"
	
															blockoverride "icon" {
																texture = "gfx/interface/icons/generic_icons/population.dds"
															}
														}
													}
												}
												
												widget = {
													name = "levels_input"
													size = { 320 28 }

													scrollbar = {
														parentanchor = vcenter
														direction = horizontal
														size = { 200 20 }
														value = "[NationalizeBuildingGroup.GetNumSelectedLevels]"
														onvaluechanged = "[NationalizeBuildingGroup.OnSelectedLevelsSliderValueChanged]"

														min = 0.0
														max = "[IntToFixedPoint(NationalizeBuildingGroup.GetMaxLevels)]"
														step = 1.0
														wheelstep = 1.0 #crollwheel input

														track = {
															using = SettingsValueTrack
														}

														slider = {
															block "settings_value_slider"
															{
																button = {
																	using = scrollbar_slider
																	size = { 12 20 }
																	parentanchor = vcenter
																}
															}
														}

														dec_button = {
															using = SettingsValueDecButton
														}

														inc_button = {
															using = SettingsValueIncButton
														}
													}

													flowcontainer = {
														parentanchor = vcenter
														position = { 210 0 }
														layoutpolicy_horizontal = preferred

														widget = {
															name = "editbox_area"
															size = { 60 28 }
															parentanchor = vcenter

															editbox = {
																background = {
																	using = text_edit_bg
																}

																text = "[NationalizeBuildingGroup.GetNumSelectedLevels]"
																ontextedited = "[NationalizeBuildingGroup.OnSelectedLevelsEditboxValueChanged]"

																size = { 100% 100% }
																align = left|nobaseline #would be nice to align right, but it makes the text cursor appear in the wrong spot
																margin = { 5 5 }

																maxcharacters = 5
																alwaystransparent = no
															}
														}

														textbox = {
															parentanchor = vcenter
															autoresize = yes
															align = nobaseline
															raw_text = "/[NationalizeBuildingGroup.GetMaxLevels]"
														}
													}

												}
											}
										}
									}

									expand = {}
								}
							}
						}
					}

					vertical_divider = {
						blockoverride "size"
						{
							layoutpolicy_vertical = expanding
						}
					}

					vbox = {
						name = "right_effects"
						minimumsize = { 490 -1 } #not sure why i need to force the width here to be half minus the spacing and not just use layoutpolicy_horizontal = expanding. If I use layoutpolicy, the margins and spacings mess with the equal size both sides should have
						maximumsize = { 490 -1 }
						layoutpolicy_vertical = expanding
						spacing = 10

						vbox = {
							layoutpolicy_horizontal = expanding

							textbox = {
								layoutpolicy_horizontal = expanding
								text = "NATIONALIZE_EFFECTS_HEADER"
								autoresize = yes
								align = hcenter|nobaseline
								margin_bottom = 2
							}

							nationalize_effect_divider = {}
						}

						scrollarea = {
							name = "effects_scrollarea"
							layoutpolicy_vertical = expanding
							layoutpolicy_horizontal = expanding

							scrollbarpolicy_horizontal = always_off

							scrollbar_vertical = {
								using = vertical_scrollbar
							}

							scrollwidget = {

								vbox = {
									margin_right = 10

									vbox = {
										layoutpolicy_horizontal = expanding
										max_width = 200

										margin = { 0 20 }
										spacing = 10

										background = {
											using = default_background
										}

										nationalize_effect = {
											layoutpolicy_horizontal = expanding

											blockoverride "nationalize_effect_icon"
											{
												texture = "gfx/interface/icons/topbar/bureaucracy_icon.dds"
											}

											blockoverride "nationalize_effect_text"
											{
												text = "NATIONALIZE_EFFECTS_MAINTENANCE"
											}

										}

										nationalize_effect_divider = {
											visible = "[Not(NationalizeBuildingWindow.WillGiveCompensation)]"
										}

										nationalize_effect = {
											visible = "[Not(NationalizeBuildingWindow.WillGiveCompensation)]"

											layoutpolicy_horizontal = expanding

											blockoverride "nationalize_effect_icon"
											{
												texture = "gfx/interface/icons/timed_modifier_icons/modifier_coins_negative.dds"
											}

											blockoverride "nationalize_effect_text"
											{
												text = "BUILDING_NATIONALIZE_NO_COMPENSATION_DESC"
											}

										}

										nationalize_effect_divider = {
											visible = "[Not(StringIsEmpty(NationalizeBuildingWindow.GetDamagedRelationsListDesc))]"
										}

										nationalize_effect = {
											visible = "[Not(StringIsEmpty(NationalizeBuildingWindow.GetDamagedRelationsListDesc))]"

											layoutpolicy_horizontal = expanding

											blockoverride "nationalize_effect_icon"
											{
												texture = "gfx/interface/icons/lens_toolbar_icons/damage_relations.dds"
											}

											blockoverride "nationalize_effect_text"
											{
												text = "NATIONALIZE_EFFECT_RELATIONS"
											}
										}

										nationalize_effect_divider = {
											visible = "[Not(StringIsEmpty(NationalizeBuildingWindow.GetPopRadicalizationListDesc))]"

										}

										nationalize_effect = {
											visible = "[Not(StringIsEmpty(NationalizeBuildingWindow.GetPopRadicalizationListDesc))]"

											layoutpolicy_horizontal = expanding

											blockoverride "nationalize_effect_icon"
											{
												texture = "gfx/interface/icons/generic_icons/population_radical.dds"
											}

											blockoverride "nationalize_effect_text"
											{
												text = "NATIONALIZE_EFFECT_RADICALS"
											}
										}

										expand = {}
									}

									expand = {}
								}
							}
						}

						vbox = {
							name = "compensation"
							layoutpolicy_horizontal = expanding
							margin = { 10 10 }
							spacing = 5

							background = {
								using = entry_bg_simple
							}


							hbox = {
								name = "line1"
								layoutpolicy_horizontal = expanding
								spacing = 5

							  	button_checkbox = {
									onclick = "[NationalizeBuildingWindow.ToggleGiveCompensation]"
									enabled = "[NationalizeBuildingWindow.CanToggleCompensation]"
									checked = "[NationalizeBuildingWindow.WillGiveCompensation]"
									size = { 30 30 }
									using = check_button_sound
									tooltip = "[NationalizeBuildingWindow.GetCanToggleCompensationTooltip]"
									using = tooltip_ne
								}

								textbox = {
									layoutpolicy_horizontal = expanding
									autoresize = yes
									align = nobaseline
									text = "BUILDING_NATIONALIZATION_WITH_COMPENSATION"
								}
							}
							
							textbox = {
								name = "line2"
								visible = "[GreaterThan_int32(NationalizeBuildingWindow.GetNumLevelsToNationalize, '(int32)0')]"
								layoutpolicy_horizontal = expanding
								autoresize = yes
								align = nobaseline
								text = "NATIONALIZE_COMPENSATION_AMOUNT"
								tooltip = "BUILDING_NATIONALIZE_COMPENSATION_TOOLTIP"
							}
							
							textbox = {
								visible = "[Not(GreaterThan_int32(NationalizeBuildingWindow.GetNumLevelsToNationalize, '(int32)0'))]"
								layoutpolicy_horizontal = expanding
								autoresize = yes
								align = nobaseline
								text = "NATIONALIZE_COMPENSATION_AMOUNT"
							}
						}
					}
				}

				hbox = {
					name = "bottom_area"
					layoutpolicy_horizontal = expanding

					button = {
						using = default_button
						using = close_button_sound
						size = { 400 42 }
						text = "CANCEL"
						onclick = "[PopupManager.HideNationalizeBuildingWindow]"
						shortcut = "close_window"
					}

					button = {
						using = default_button_primary_action
						size = { 400 42 }
						text = "NATIONALIZE"
						enabled = "[NationalizeBuildingWindow.NationalizeBuildingGroupsIsValid]"
						onclick = "[NationalizeBuildingWindow.NationalizeBuildingGroupsConfirm]"
						onclick = "[PopupManager.HideNationalizeBuildingWindow]"
						clicksound = "event:/SFX/UI/BuildingOwnership/building_nationalize_confirm"
						tooltip = "[NationalizeBuildingWindow.NationalizeBuildingGroupsGetDesc]"
					}
				}
			}
		}
	}
}

types nationalize_popup_types
{
	type nationalize_effect_divider = divider_clean {
		blockoverride "size"
		{
			size =  { 400 2 }
		}
	}

	type nationalize_effect = hbox {
		spacing = 20
		margin_left = 20

		icon = {
			name = "icon"
			block "nationalize_effect_icon"
			{
				visible = no
				#texture = ?
			}

			size = { 50 50 }
		}

		textbox = {
			name = "text"
			block "nationalize_effect_text"
			{
				visible = no
				#text = ?
			}

			autoresize = yes
			multiline = yes
			align = nobaseline
			min_width = 370
			max_width = 370
		}

		expand = {}
	}
}


### SWAY OFFER
default_popup = {
	name = "sway_offer"

	blockoverride "window_header_name" {
		text = "SWAY_OFFER_TITLE_SELECTOR"
	}

	blockoverride "header_close_button_visibility" {
		visible = yes
	}
	blockoverride "header_close_button" {
		onclick = "[PopupManager.HideProposal(Proposal.AccessSelf)]"
		shortcut = "close_window"
	}

	blockoverride "scrollarea_content"
	{
		flowcontainer = {
			resizeparent = yes
			direction = vertical
			margin_top = 10
			datacontext = "[Proposal.GetDiplomaticPlay.GetIncomingSwayByTargetAndSwayer(Proposal.GetActor.Self, Proposal.GetRecipient.Self)]"
	
			textbox = {
				autoresize = yes
				maximumsize = { 530 -1 }
				minimumsize = { 530 100 }
				multiline = yes
				text = "[Sway.GetProposalDesc]"
				using = fontsize_large
				align = left|nobaseline
			}			
		}
	}

	blockoverride "fixed_bottom" {
		flowcontainer = {
			using = default_list_position
			direction = horizontal
			margin_top = 20
			spacing = 20

			button = {
				using = default_button
				using = close_button_sound
				size = { 220 42 }
				text = "DECLINE"
				onclick = "[Execute(Proposal.GetDiplomaticPlay.GetIncomingSway(Proposal.GetActor.Self, Proposal.GetRecipient.Self).RejectSway)]"
				onclick = "[PopupManager.CloseProposal(Proposal.AccessSelf)]"
				enabled = "[IsValid(Proposal.GetDiplomaticPlay.GetIncomingSway(Proposal.GetActor.Self, Proposal.GetRecipient.Self).RejectSway)]"
				tooltip = "[GetDesc(Proposal.GetDiplomaticPlay.GetIncomingSway(Proposal.GetActor.Self, Proposal.GetRecipient.Self).RejectSway)]"
				shortcut = "close_window"
			}

			button = {
				using = default_button_primary_action
				using = confirm_button_sound
				size = { 220 42 }
				text = "ACCEPT"
				onclick = "[Execute(Proposal.GetDiplomaticPlay.GetIncomingSway(Proposal.GetActor.Self, Proposal.GetRecipient.Self).AcceptSway)]"
				onclick = "[PopupManager.CloseProposal(Proposal.AccessSelf)]"
				enabled = "[IsValid(Proposal.GetDiplomaticPlay.GetIncomingSway(Proposal.GetActor.Self, Proposal.GetRecipient.Self).AcceptSway)]"
				tooltip = "[GetDesc(Proposal.GetDiplomaticPlay.GetIncomingSway(Proposal.GetActor.Self, Proposal.GetRecipient.Self).AcceptSway)]"
				
				input_action = "confirm"
			}
		}
	}
}


### DIPLOMATIC DEMAND
default_popup = {
	name = "diplomatic_demand"

	blockoverride "window_header_name" {
		text = "DIPLOMATIC_DEMAND"
	}

	blockoverride "header_close_button_visibility" {
		visible = yes
	}
	blockoverride "header_close_button" {
		onclick = "[PopupManager.HideProposal(Proposal.AccessSelf)]"
		shortcut = "close_window"
	}

	blockoverride "scrollarea_content"
	{
		flowcontainer = {
			resizeparent = yes
			direction = vertical
			margin_top = 10

			textbox = {
				autoresize = yes
				maximumsize = { 530 -1 }
				minimumsize = { 530 100 }
				multiline = yes
				text = "[Proposal.GetDiplomaticDemand.GetProposalDesc]"
				using = fontsize_large
				align = left|nobaseline
			}			
		}
	}

	blockoverride "fixed_bottom" {
		flowcontainer = {
			using = default_list_position
			direction = horizontal
			margin_top = 20
			spacing = 20

			button = {
				using = default_button
				using = close_button_sound
				size = { 220 42 }
				text = "DECLINE"
				onclick = "[Execute(Proposal.GetDiplomaticDemand.RejectDiplomaticDemand)]"
				onclick = "[PopupManager.CloseProposal(Proposal.AccessSelf)]"
				enabled = "[IsValid(Proposal.GetDiplomaticDemand.RejectDiplomaticDemand)]"
				tooltip = "[GetDesc(Proposal.GetDiplomaticDemand.RejectDiplomaticDemand)]"
				shortcut = "close_window"
			}

			button = {
				using = default_button_primary_action
				using = confirm_button_sound
				size = { 220 42 }
				text = "ACCEPT"
				onclick = "[Execute(Proposal.GetDiplomaticDemand.AcceptDiplomaticDemand)]"
				onclick = "[PopupManager.CloseProposal(Proposal.AccessSelf)]"
				enabled = "[IsValid(Proposal.GetDiplomaticDemand.AcceptDiplomaticDemand)]"
				tooltip = "[GetDesc(Proposal.GetDiplomaticDemand.AcceptDiplomaticDemand)]"
				
				input_action = "confirm"
			}
		}
	}
}

### DIPLOMATIC PROPOSAL
default_popup = {
	name = "diplomatic_proposal"

	blockoverride "window_header_name" {
		text = "DIPLOMATIC_PROPOSAL_TITLE"
	}

	blockoverride "header_close_button_visibility" {
		visible = yes
	}
	blockoverride "header_close_button" {
		onclick = "[PopupManager.HideProposal(Proposal.AccessSelf)]"
		shortcut = "close_window"
	}

	blockoverride "scrollarea_content"
	{
		flowcontainer = {
			resizeparent = yes
			direction = vertical
			margin_top = 10
			margin_bottom = 15

			textbox = {
				autoresize = yes
				maximumsize = { 530 -1 }
				multiline = yes
				text = "DIPLOMATIC_PROPOSAL_OFFER_OBLIGATION_DESC"
				using = fontsize_large
				visible = "[Proposal.GetDiplomaticAction.IsPromisingObligation]"
			}
			
			textbox = {
				autoresize = yes
				maximumsize = { 530 -1 }
				multiline = yes
				text = "DIPLOMATIC_PROPOSAL_CALL_IN_OBLIGATION_DESC"
				using = fontsize_large
				visible = "[Proposal.GetDiplomaticAction.IsCallingInObligation]"
			}			

			textbox = {
				autoresize = yes
				maximumsize = { 530 -1 }
				multiline = yes
				text = "DIPLOMATIC_PROPOSAL_DESC"
				using = fontsize_large
				visible = "[And(Not(Proposal.GetDiplomaticAction.IsPromisingObligation),Not(Proposal.GetDiplomaticAction.IsCallingInObligation))]"
			}

			flowcontainer = {
				direction = vertical
				visible = "[Proposal.GetDiplomaticAction.ViolatesSovereignty]"

				widget = {
					size = { 10 10 }
				}

				textbox = {
					autoresize = yes
					align = left|nobaseline
					text = "violate_sovereignty_wars"
				}

				dynamicgridbox = {
					datamodel = "[Proposal.GetDiplomaticAction.AccessFirstCountry.AccessVioSovWars( GetPlayer.Self )]"

					item = {
						textbox = {
							autoresize = yes
							align = left|nobaseline
							text = "[War.GetName|v]"
						}
					}
				}
			}
		}
	}

	blockoverride "fixed_bottom" {
		flowcontainer = {
			margin = { 10 10 }
			using = default_list_position
			spacing = 20

			button = {
				using = default_button
				using = close_button_sound
				size = { 250 42 }
				text = "DECLINE"
				shortcut = "close_window"
				onclick = "[Execute(Proposal.GetDiplomaticAction.DeclineActionProposal)]"
				enabled = "[IsValid(Proposal.GetDiplomaticAction.DeclineActionProposal)]"
				tooltip = "[GetDesc(Proposal.GetDiplomaticAction.DeclineActionProposal)]"
				visible = "[Not(Proposal.GetDiplomaticAction.IsCallingInObligation)]"
			}
			
			button = {
				using = default_button
				using = close_button_sound
				size = { 250 42 }
				text = "DECLINE_WARNING"
				shortcut = "close_window"
				onclick = "[Execute(Proposal.GetDiplomaticAction.DeclineActionProposal)]"
				enabled = "[IsValid(Proposal.GetDiplomaticAction.DeclineActionProposal)]"
				tooltip = "THEY_CALL_IN_OBLIGATION"
				visible = "[Proposal.GetDiplomaticAction.IsCallingInObligation]"
			}			

			button = {
				using = default_button_primary_action
				using = confirm_button_sound
				size = { 250 42 }
				text = "ACCEPT"
				onclick = "[Execute(Proposal.GetDiplomaticAction.AcceptActionProposal)]"
				enabled = "[IsValid(Proposal.GetDiplomaticAction.AcceptActionProposal)]"
				tooltip = "[GetDesc(Proposal.GetDiplomaticAction.AcceptActionProposal)]"

				input_action = "confirm"
			}
		}
	}
}

### DIPLOMATIC PROPOSAL BREAK
default_popup = {
	name = "diplomatic_proposal_break"

	blockoverride "window_header_name" {
		text = "DIPLOMATIC_PROPOSAL_BREAK_TITLE"
	}

	blockoverride "header_close_button_visibility" {
		visible = yes
	}
	blockoverride "header_close_button" {
		onclick = "[PopupManager.HideProposal(Proposal.AccessSelf)]"
		shortcut = "close_window"
	}

	blockoverride "scrollarea_content"
	{
		flowcontainer = {
			resizeparent = yes
			direction = vertical
			margin_top = 10
			margin_bottom = 15

			textbox = {
				autoresize = yes
				maximumsize = { 530 -1 }
				multiline = yes
				text = "DIPLOMATIC_PROPOSAL_BREAK_DESC"
				using = fontsize_large
			}
		}
	}

	blockoverride "fixed_bottom" {
		flowcontainer = {
			margin = { 10 10 }
			using = default_list_position
			spacing = 20

			button = {
				using = default_button
				using = close_button_sound
				size = { 250 42 }
				text = "DECLINE"
				onclick = "[Execute(Proposal.GetDiplomaticAction.DeclineActionProposal)]"
				onclick = "[PopupManager.CloseProposal(Proposal.AccessSelf)]"
				enabled = "[IsValid(Proposal.GetDiplomaticAction.DeclineActionProposal)]"
				tooltip = "[GetDesc(Proposal.GetDiplomaticAction.DeclineActionProposal)]"
				shortcut = "close_window"
			}

			button = {
				using = default_button_primary_action
				using = confirm_button_sound
				size = { 250 42 }
				text = "ACCEPT"
				onclick = "[Execute(Proposal.GetDiplomaticAction.AcceptActionProposal)]"
				onclick = "[PopupManager.CloseProposal(Proposal.AccessSelf)]"
				enabled = "[IsValid(Proposal.GetDiplomaticAction.AcceptActionProposal)]"
				tooltip = "[GetDesc(Proposal.GetDiplomaticAction.AcceptActionProposal)]"
				
				input_action = "confirm"
			}
		}
	}
}

### DIPLOMATIC PLAY CONFIRMATION
default_popup =  {
	name = "diplomatic_play_confirmation"

	state = {
		name = _show
		#trigger_on_create = yes
		#start_sound = {
		#	soundeffect = "event:/SFX/UI/Global/popup_show"
		#}
		#alpha = 1
		#duration = 0
	}

	blockoverride "header_close_button_visibility" {}

	blockoverride "header_close_button" {
		onclick = "[PopupManager.HideDiplomaticPlayConfirmation]"
		shortcut = "close_window"
	}

	blockoverride "window_header_name" {
		text = "DIPLOMATIC_PLAY_CONFIRMATION_HEADER"
		datacontext = "[DiplomaticPlayConfirmation.GetType]"
	}

	blockoverride "scrollarea_content"
	{
		flowcontainer = {
			resizeparent = yes
			direction = vertical
			margin_top = 10
			margin_bottom = 15
			margin_left = 20
			margin_right = 20
			
			minimumsize = { 600 -1 } 
			#maximumsize = { 600 400 }

			flowcontainer = {
				visible = "[DiplomaticPlayConfirmation.IsSelectingCountryCreation]"
				direction = vertical
				parentanchor = hcenter
				widgetanchor = hcenter	

				flowcontainer = {
					datamodel = "[DiplomaticPlayConfirmation.AccessCountryCreations]"
					direction = vertical
					spacing = 15

					item = {					
						container = {
							datacontext = "[DiplomaticPlayConfirmation.GetTargetCountry]"
							tooltip = "DIPLOMATIC_PLAY_COUNTRY_CREATION_TOOLTIP"
					
							minimumsize = { 575 80 } 
							maximumsize = { 575 80 } 
							parentanchor = hcenter
							
							background = {
								using = Background_Area
								margin = { 0 5 }
							}							
							
							flag_icon = {
								datacontext = "[CountryCreation.GetDefinition]"
								position = { 20 0 }
								texture = "[CountryDefinition.GetFlag('formation').GetLargeFlagTexture]"
								frame = "[CountryDefinition.GetFlag('formation').GetLargeFlagFrame]"
								framesize = "[GetLargeFlagFrameSize]"
								blockoverride "flag_tooltip" {}		
								parentanchor = vcenter							
							}

							textbox = {
								text = "[CountryCreation.GetName]"
								position = { 100 0 }
								parentanchor = vcenter
								align = nobaseline
								autoresize = yes
							}
							
							textbox = {
								text = "DIPLOMATIC_PLAY_NUM_RELEASABLE_STATES"
								position = { 300 0 }
								size = { 100 0 }
								align = right|nobaseline
								parentanchor = vcenter
							}							

							button = {
								using = default_button
								position = { -20 0 }
								size = { 150 42 }
								text = "SELECT"
								parentanchor = vcenter|right
								onclick = "[DiplomaticPlayConfirmation.SetCountryDefinition(CountryCreation.GetDefinition)]"
								onclick = "[DiplomaticPlayConfirmation.ToggleSelectCountryCreation]"
							}								
						}
					}
				}							
			}

			flowcontainer = {
				visible = "[Not(DiplomaticPlayConfirmation.IsSelectingCountryCreation)]"
				direction = vertical
				parentanchor = hcenter
				spacing = 10				
				
				textbox = {
					maximumsize = { 575 -1 }
					multiline = yes
					autoresize = yes
					align = nobaseline
					text = "[DiplomaticPlayConfirmation.GetDescription]"
				}
				
				flowcontainer = {
					visible = "[DiplomaticPlayConfirmation.GetType.GetWarGoalType.TargetsCountryCreation]"
					minimumsize = { 600 100 }
					direction = vertical
					parentanchor = hcenter
					spacing = 10
					margin = { 10 10 }

					background = {
						using = entry_bg_simple
					}
					
					textbox = {
						text = "DIPLOMATIC_PLAY_NO_COUNTRY_CREATION_SELECTED"
						visible = "[Not(DiplomaticPlayConfirmation.GetCountryDefinition.IsValid)]"
						autoresize = yes
						align = nobaseline
						parentanchor = hcenter
						using = empty_state_text_properties
					}

					flowcontainer = {
						visible = "[DiplomaticPlayConfirmation.GetCountryDefinition.IsValid]"
						parentanchor = hcenter
						spacing = 10

						flag_icon = {
							size = { 33 24 }
							texture = "[DiplomaticPlayConfirmation.GetCountryDefinition.GetFlag('formation').GetLargeFlagTexture]"
							frame = "[DiplomaticPlayConfirmation.GetCountryDefinition.GetFlag('formation').GetLargeFlagFrame]"
							framesize = "[GetLargeFlagFrameSize]"
							blockoverride "flag_tooltip" {}
							parentanchor = vcenter
						}

						textbox = {
							text = "LIBERATE_TARGET_COUNTRY_FROM_COUNTRY"
							autoresize = yes
							align = nobaseline
							parentanchor = vcenter
							using = fontsize_xl
						}
					}

					button = {
						visible = "[Not(DiplomaticPlayConfirmation.GetCountryDefinition.IsValid)]"
						using = default_button
						parentanchor = hcenter
						size = { 250 42 }
						text = "SELECT_TARGET"
						onclick = "[DiplomaticPlayConfirmation.ToggleSelectCountryCreation]"
					}

					button = {
						visible = "[DiplomaticPlayConfirmation.GetCountryDefinition.IsValid]"
						using = default_button
						parentanchor = hcenter
						size = { 250 42 }
						text = "CHANGE_TARGET"
						onclick = "[DiplomaticPlayConfirmation.ToggleSelectCountryCreation]"
					}
				}				

				start_diplo_play_table = {
					blockoverride "table_datamodel" {
						datamodel = "[DiplomaticPlayConfirmation.AccessInitiatorCountries]"
					}

					blockoverride "table_header_1" {
						text = "OUR_SIDE"
					}

					blockoverride "vertical_dividers" {}
				}

				start_diplo_play_table = {
					blockoverride "table_datamodel" {
						datamodel = "[DiplomaticPlayConfirmation.AccessTargetCountries]"
					}

					blockoverride "table_header_1" {
						text = "ENEMY_SIDE"
					}

					blockoverride "vertical_dividers" {}
				}

				start_diplo_play_table = {
					visible = "[Not(IsDataModelEmpty(DiplomaticPlayConfirmation.AccessUndecidedCountries))]"

					blockoverride "table_datamodel" {
						datamodel = "[DiplomaticPlayConfirmation.AccessUndecidedCountries]"
					}

					blockoverride "item_visibility" {
						visible = "[And(Not(ObjectsEqual(Country.Self, DiplomaticPlayConfirmation.GetInitiatorCountry.Self)), Not(ObjectsEqual(Country.Self, DiplomaticPlayConfirmation.GetTargetCountry.Self)))]"
					}

					blockoverride "table_header_1" {
						text = "DIPLO_PLAY_STANCE_UNDECIDED"
					}

					blockoverride "table_header_4" {
						text = "DIPLO_PLAY_SUPPORT_INITIATOR"
					}

					blockoverride "table_header_5" {
						text = "DIPLO_PLAY_SUPPORT_TARGET"
					}

					blockoverride "table_header_6" {
						text = "PREFERENCE_PREDICTION"
					}

					blockoverride "table_value_4" {
						raw_text = "DIPLO_PLAY_SUPPORT_INITIATOR_LABEL"
						tooltip = "[DiplomaticPlayConfirmation.PredictCannotJoinOrPreferenceForInitiatorDesc(Country.Self)]"					
					}

					blockoverride "table_value_5" {
						raw_text = "DIPLO_PLAY_SUPPORT_TARGET_LABEL"
						tooltip = "[DiplomaticPlayConfirmation.PredictCannotJoinOrPreferenceForTargetDesc(Country.Self)]"		
					}

					blockoverride "table_value_6" {
						raw_text = "PREFERENCE_LABEL"	
					}

					blockoverride "table_value_6_alignment" {
						align = hcenter|nobaseline
					}
				}

				widget = {
					visible = "[Not(IsDataModelEmpty(DiplomaticPlayConfirmation.AccessUndecidedCountries))]" 
					size = { 5 5 }
				}
			}			
		}	
	}

	blockoverride "fixed_bottom" {
		button = {
			visible = "[DiplomaticPlayConfirmation.IsSelectingCountryCreation]"
			using = default_button
			size = { 250 42 }
			text = "BACK"
			onclick = "[DiplomaticPlayConfirmation.ToggleSelectCountryCreation]"
			parentanchor = hcenter
			align = hcenter
		}	
	
		flowcontainer = {
			direction = vertical
			visible = "[Not(DiplomaticPlayConfirmation.IsSelectingCountryCreation)]"
			margin_left = 20
			
			# Checkbox + textbox: Force Diplomatic Play
			flowcontainer = {
				direction = horizontal
				tooltip = "FORCE_DIPLOMATIC_PLAY_TOOLTIP"

				button_radio = {
					parentanchor = vcenter
					onclick = "[DiplomaticPlayConfirmation.ToggleForceDiplomaticPlay]"
					visible = "[Not(DiplomaticPlayConfirmation.WillForceDiplomaticPlay)]"
					size = { 25 25 }
					using = check_button_sound
				}

				button_radio = {
					parentanchor = vcenter
					onclick = "[DiplomaticPlayConfirmation.ToggleForceDiplomaticPlay]"
					visible = "[DiplomaticPlayConfirmation.WillForceDiplomaticPlay]"
					size = { 25 25 }
					frame = 2
					using = check_button_sound
				}

				textbox = {
					text = FORCE_DIPLOMATIC_PLAY
					autoresize = yes
					margin_left = 5
					widgetanchor = left|vcenter
					parentanchor = left|vcenter
				}	

				textbox = {
					text = "DIPLOMATIC_DEMAND_ACCEPTANCE"	
					visible = "[Not(DiplomaticPlayConfirmation.WillForceDiplomaticPlay)]"
					autoresize = yes
					margin_left = 5
					widgetanchor = left|vcenter
					parentanchor = left|vcenter
				}				
			}
			
			container = {
				minimumsize = { 525 40 }
				maximumsize = { 600 40 }
			
				textbox = {
					text = "DIPLOMATIC_PLAY_NOT_FORCED_WARNING"
					visible = "[Not(DiplomaticPlayConfirmation.WillForceDiplomaticPlay)]"
					autoresize = yes
					widgetanchor = left|vcenter
					parentanchor = left|vcenter
				}	

				textbox = {
					text = "DIPLOMATIC_PLAY_FORCED_WARNING"
					visible = "[DiplomaticPlayConfirmation.WillForceDiplomaticPlay]"
					autoresize = yes
					widgetanchor = left|vcenter
					parentanchor = left|vcenter
				}				
			}
		}		
	
		flowcontainer = {
			visible = "[Not(DiplomaticPlayConfirmation.IsSelectingCountryCreation)]"
			using = default_list_position
			direction = horizontal
			margin_top = 20
			spacing = 20		

			button = {
				using = default_button
				using = close_button_sound
				size = { 250 42 }
				text = "CANCEL"
				onclick = "[PopupManager.HideDiplomaticPlayConfirmation]"
				shortcut = "close_window"
			}

			button = {
				using = default_button_primary_action
				clicksound = "[DiplomaticPlayConfirmation.GetConfirmationSound]"
				using = ui_pointer_over
				size = { 250 42 }
				text = "CONFIRM"
				onclick = "[Execute(DiplomaticPlayConfirmation.ConfirmAction)]"
				onclick = "[DiplomaticPlayConfirmation.ShowMapNotification]"
				onclick = "[PopupManager.HideDiplomaticPlayConfirmation]"
				enabled = "[IsValid(DiplomaticPlayConfirmation.ConfirmAction)]"
				input_action = "confirm"
				
				tooltip = "CONFIRM"		
			}
		}
	}
}

### PRODUCTION METHOD CONFIRMATION
default_popup = {
	name = "production_method_confirmation_popup"

	blockoverride "window_header_name" {
		text = "PRODUCTION_METHOD_CONFIRMATION_TITLE"
	}

	blockoverride "scrollarea_content" {
		textbox = {
			minimumsize = { 525 -1 }
			maximumsize = { 525 -1 }
			multiline = yes
			text = "PRODUCTION_METHOD_CONFIRMATION_DESC"
			autoresize = yes
			resizeparent = yes
			parentanchor = center
			align = center

			margin_bottom = 50
		}
	}

	blockoverride "fixed_bottom" {
		container = {
			button = {
				using = default_button
				using = close_button_sound
				size = { 140 40 }
				text = "PRODUCTION_METHOD_CONFIRMATION_CANCEL"
				onclick = "[ProductionMethodConfirmationPopup.Cancel]"
				shortcut = "close_window"
			}

			button = {
				using = default_button
				using = confirm_button_sound
				position = { 215 0 }
				size = { 140 40 }
				text = "PRODUCTION_METHOD_CONFIRMATION_EXEMPT"
				tooltip = "PRODUCTION_METHOD_CONFIRMATION_EXEMPT_TOOLTIP"
				visible = "[ProductionMethodConfirmationPopup.CanExempt]"
				onclick = "[ProductionMethodConfirmationPopup.Exempt]"
			}

			button = {
				using = default_button_primary_action
				using = confirm_button_sound
				position = { 450 0 }
				size = { 140 40 }
				text = "PRODUCTION_METHOD_CONFIRMATION_CONTINUE"
				tooltip = "PRODUCTION_METHOD_CONFIRMATION_CONTINUE_TOOLTIP"
				onclick = "[ProductionMethodConfirmationPopup.Continue]"
				input_action = "confirm"
			}
		}
	}
}

### TREATY PROPOSAL
default_popup_vbox = {
	name = "treaty_proposal"
	datacontext = "[Proposal.GetTreaty]"

	blockoverride "window_header_name" {
		text = "[Treaty.GetName]"
	}

	blockoverride "header_close_button_visibility" {
		visible = yes
	}

	blockoverride "header_close_button" {
		onclick = "[PopupManager.HideProposal(Proposal.AccessSelf)]"
		shortcut = "close_window"
	}

	blockoverride "side_margins" {
		margin = { 25 0 }
	}

	blockoverride "top_margin" {
		margin_top = 90
	}

	blockoverride "scrollarea_size" {
		size = { 540 640 }
	}

	blockoverride "scrollarea_content_vbox"
	{
		treaty = {
			name = "content_container"

			background = {
				using = paper_bg_light
			}

			blockoverride "unsigned_seal_visibility" {
				visible = yes
			}

			blockoverride "binding_period_textboxes" {
				### BINDING PERIOD
				treaty_textbox = {
					visible = "[NotZero(Treaty.GetBindingDays)]"
					align = nobaseline
					autoresize = yes
					max_width = 230
					using = elide_fontsize_min
					text = "TREATY_BINDING_PERIOD"
				}

				### NO BINDING PERIOD SET TO BEGIN WITH
				treaty_textbox = {
					visible = "[IsZero(Treaty.GetBindingDays)]"
					align = nobaseline
					autoresize = yes
					max_width = 230
					using = elide_fontsize_min
					text = "TREATY_NO_BINDING_PERIOD_NO_CONCEPT"
				}
			}
		}
	}

	blockoverride "fixed_bottom" {
		flowcontainer = {
			margin = { 0 10 }
			spacing = 3

			button = {
				using = default_button_action
				using = close_button_sound
				size = { 180 42 }
				text = "DECLINE"
				onclick = "[Execute(Proposal.GetTreaty.DeclineTreatyProposal)]"
				onclick = "[PopupManager.CloseProposal(Proposal.AccessSelf)]"
				enabled = "[IsValid(Proposal.GetTreaty.DeclineTreatyProposal)]"
				tooltip = "[GetDesc(Proposal.GetTreaty.DeclineTreatyProposal)]"
				using = tooltip_se
				shortcut = "close_window"
			}

			button = {
				using = default_button
				size = { 180 42 }
				text = "NEGOTIATE"
				enabled = "[Not(Proposal.GetTreaty.IsEnforced)]"
				onclick = "[InformationPanelBar.OpenTreatyDraftPanel(Proposal.GetTreaty.Self)]"
				onclick = "[PopupManager.CloseProposal(Proposal.AccessSelf)]"
				tooltip = "TREATY_PROPOSAL_NEGOTIATE_TOOLTIP" #todo PRCAL-38358
				using = tooltip_se

			}

			button = {
				using = default_button_primary_action
				using = confirm_button_sound
				size = { 180 42 }
				text = "ACCEPT"
				onclick = "[Execute(Proposal.GetTreaty.AcceptTreatyProposal)]"
				onclick = "[PopupManager.CloseProposal(Proposal.AccessSelf)]"
				enabled = "[IsValid(Proposal.GetTreaty.AcceptTreatyProposal)]"
				tooltip = "[GetDesc(Proposal.GetTreaty.AcceptTreatyProposal)]"
				using = tooltip_se
				input_action = "confirm"
			}
		}
	}
}

default_confirmation_window = {
	name = "confirmation_window"
}

default_confirmation_window = {
	name = "reform_government_confirmation_window"
	blockoverride "answer_yes_handler" {
		onclick = "[PopupManager.AnswerYes(ConfirmationWindow.Self)]"
		onclick = "[GetVariableSystem.Toggle('reform_government')]"
	}
}

default_confirmation_window = {
	name = "company_confirmation_window"

	blockoverride "description_size" {
		maximumsize = { 400 -1 }
		minimumsize = { 400 -1 }
	}
}

default_confirmation_window = {
	name = "company_charter_confirmation_window"

	blockoverride "window_header_name" {
		text = "GRANT_COMPANY_CHARTER_CONFIRMATION_HEADER"
	}

	blockoverride "scrollarea_content" {
		icon = {
			size = { 100 100 }
			parentanchor = hcenter
			alwaystransparent = yes
			texture = "gfx/interface/portraits/portrait_frame_head.dds" #ingela
			
			icon = {
				size = { 75% 75% }
				parentanchor = center
				alwaystransparent = yes
				texture = "[CompanyCharterType.GetIcon]"
			}
		}
	}
}

container =  {
	name = "confirmation_window_frontend"
	parentanchor = center
	using = clickthrough_blocker
	layer = confirmation

	state = {
		trigger_on_create = yes
		name = 1
		next = 2

		alpha = 0
		position_y = -50
	}
	state = {
		name = 2
		duration = 0.25
		using = Animation_Curve_Default

		alpha = 1
		position_y = 0
	}

	background = {
		using = default_background
	}
	background = {
		using = frame_small
	}

	flowcontainer = {
		direction = vertical
		margin = { 40 20 }
		spacing = 20

		textbox = {
			maximumsize = { 300 -1 }
			minimumsize = { 300 -1 }
			multiline = yes
			text = "[FrontEndLoadConfirmationWindow.GetDesc]"
			autoresize = yes
		}

		flowcontainer = {
			direction = horizontal
			using = default_list_position
			spacing = 20

			button = {
				using = default_button
				using = close_button_sound
				size = { 140 40 }
				text = "CONFIRM_NO"
				onclick = "[FrontEndLoadConfirmationWindow.AnswerNo]"
				shortcut = "close_window"
			}
			button = {
				using = default_button_primary_action
				using = confirm_button_sound
				size = { 140 40 }
				text = "CONFIRM_YES"
				onclick = "[FrontEndLoadConfirmationWindow.AnswerYes]"
				
				tooltip = "CONFIRM"
				input_action = "confirm"
			}
		}
	}
}

###### CUSTOM WINDOW BELOW THIS POINT

### WAR POPUP

### numbers
@attacker_defender_height = 475
@attacker_defender_lists_height = 380
@attacker_defender_bg_duration = 0.45
@attacker_defender_info_duration = 0.3
@attacker_defender_divider_duration = 1.5
@header_items_duration = 0.4
@header_items_delay = 0.15
@smoke_effect_duration = 4

notification_popup = {
	name = "war_started"
	size = { 190 720 }
	alpha = 0
	blockoverride "content" {}
	datacontext = "[PlayerMessageItem.GetDiploPlay.AccessWar]"

	state = {
		name = start
		next = 2
		trigger_on_create = yes
		duration = 1
		size = { 990 720 }
		using = Animation_Curve_EaseOut
		alpha = 1
		using = Snapshot_Mute_World_80
		on_start = "[PdxGuiTriggerAllAnimations('war_popup')]"
		start_sound = {
			soundeffect = "event:/SFX/UI/Popups/war_breaking_out"
		}
	}
	state = {
		name = 2
		duration = 0.4
		on_finish = "[PdxGuiTriggerAllAnimations('war_popup_attacker_defender')]"
	}

	#cameracontrolwidget = {
	#	name = "vfx_to_arms_background"
	#	parentanchor = bottom|hcenter
	#	position = { 0 400 }
	#	
	#	size = { 100% 100% }
	#	camera_position = { 0 0 -2 }
	#	entity_instance = vfx_entity_ui_to_arms_background
	#	alwaystransparent = yes
	#	ignore_in_debug_draw = yes
	#	gfxtype = jomini_entitygfx
	#}

	#vfx = {
	#	blockoverride "parentanchor" {
	#		 parentanchor = bottom|hcenter
	#	}
	#	blockoverride "position" {
	#		position = { 0 400 }
	#	}
	#	blockoverride "camera_position" {
	#		camera_position = { 0 0 -2 }
	#	}
	#	blockoverride "entity_instance" {
	#		entity_instance = vfx_entity_ui_to_arms_background
	#	}
	#}

	vfx = {
		blockoverride "size" {
			size = { 100% 100% }
		}
		blockoverride "position" {
			position = { 0 345 }
		}
		blockoverride "parent_anchor" {
			parentanchor = bottom|hcenter
		}
		blockoverride "camera_position" {
			camera_position = { 0 0 -2 }
		}
		blockoverride "entity_instance" {
			entity_instance = vfx_ui_plane_war_panel_fire_plane_entity
		}			
	}
	
	## TOP ANIMATION
	blockoverride "behind_window" {

		widget = {
			position = { 0 -85 }
			parentanchor = hcenter
			size = { 800 100 }

			state = {
				name = war_popup
				next = 2
				duration = @header_items_delay
				on_start = "[PdxGuiTriggerAllAnimations('war_popup_header_gun_01')]"
			}
			state = {
				name = 2
				next = 3
				duration = @header_items_delay
				on_start = "[PdxGuiTriggerAllAnimations('war_popup_header_gun_02')]"
			}
			state = {
				name = 3
				next = 4
				duration = @header_items_delay
				on_start = "[PdxGuiTriggerAllAnimations('war_popup_header_flag_01')]"
			}
			state = {
				name = 4
				next = 5
				duration = @header_items_delay
				on_start = "[PdxGuiTriggerAllAnimations('war_popup_header_flag_02')]"
			}
			state = {
				name = 5
				on_start = "[PdxGuiTriggerAllAnimations('war_popup_header_helmet')]"
			}

			### bg
			icon = {
				texture = "gfx/interface/war/war_popup_header_bg.dds"
				parentanchor = bottom|hcenter
				position = { 0 0 }
				size = { 663 62 }
				alpha = 0
				scale = 0.1

				state = {
					name = war_popup
					alpha = 1
					scale = 1
					duration = 0.6
					using = Animation_Curve_EaseOut
					on_start = "[PdxGuiTriggerAllAnimations('war_popup_header_shimmer')]"
				}

				modify_texture = {
					name = "glow"
					texture = "gfx/interface/animation/shimmer.dds"
					blend_mode = colordodge
					translate_uv = { 1 1 }
				}

				state = {
					name = war_popup_header_shimmer
					duration = 2
					using = Animation_Curve_EaseOut

					modify_texture = {
						name = "glow"
						translate_uv = { -1 -1 }
					}
				}
			}

			icon = {
				position = { 0 -90 }
				parentanchor = hcenter
				using = rotate_glow_animation_02
				size = { 330 330 }
				alpha = 0

				state = {
					name = war_popup
					alpha = 0.4
					duration = 2
				}
			}

			### guns
			icon = {
				texture = "gfx/interface/war/war_popup_header_animation_gun.dds"
				parentanchor = bottom|hcenter
				position = { -360 -120 }
				size = { 205 68 }
				alpha = 0
				scale = 10

				state = {
					name = war_popup_header_gun_01
					position = { -90 10 }
					duration = @header_items_duration
					using = Animation_Curve_EaseOut
					alpha = 1
					scale = 1
				}
			}
			icon = {
				texture = "gfx/interface/war/war_popup_header_animation_gun.dds"
				parentanchor = bottom|hcenter
				mirror = horizontal
				position = { 360 -120 }
				size = { 205 68 }
				alpha = 0
				scale = 10

				state = {
					name = war_popup_header_gun_02
					position = { 90 10 }
					duration = @header_items_duration
					using = Animation_Curve_EaseOut
					alpha = 1
					scale = 1
				}
			}

			### flags
			icon = {
				texture = "gfx/interface/war/war_popup_header_animation_flag.dds"
				parentanchor = bottom|hcenter
				position = { -220 -110 }
				size = { 174 96 }
				scale = 10
				alpha = 0

				state = {
					name = war_popup_header_flag_01
					position = { -30 0 }
					duration = @header_items_duration
					using = Animation_Curve_EaseOut
					alpha = 1
					scale = 1
				}
			}
			icon = {
				texture = "gfx/interface/war/war_popup_header_animation_flag.dds"
				parentanchor = bottom|hcenter
				position = { 220 -110 }
				mirror = horizontal
				size = { 174 96 }
				scale = 10
				alpha = 0

				state = {
					name = war_popup_header_flag_02
					position = { 30 0 }
					duration = @header_items_duration
					using = Animation_Curve_EaseOut
					alpha = 1
					scale = 1
				}
			}

			### helmet
			icon = {
				texture = "gfx/interface/war/war_popup_header_animation_helmet.dds"
				parentanchor = bottom|hcenter
				position = { 0 -220 }
				size = { 75 115 }
				scale = 10
				alpha = 0

				state = {
					name = war_popup_header_helmet
					position = { 0 -5 }
					duration = @header_items_duration
					using = Animation_Curve_EaseOut
					alpha = 1
					scale = 0.9
				}
			}
		}
	}

	### HEADER TEXT + FLAGS
	container = {
		parentanchor = top|hcenter
		minimumsize = { 920 -1 }
		position = { 0 24 }

		### header
		textbox = {
			using = header_font
			using = header_font_size
			size = { 880 50 }
			text = "[War.GetStartWarTitleForPlayer]"
			multiline = yes
			elide = right
			fontsize_min = 16
			align = center|nobaseline
			parentanchor = hcenter
			alpha = 0

			state = {
				name = war_popup
				next = 2
				alpha = 0
				duration = 0.5
			}
			state = {
				name = 2
				alpha = 1
				duration = 1.5
				using = Animation_Curve_Default
			}
		}
	}

	### DESCRIPTION
	textbox = {
		position = { 0 90 }
		autoresize = yes
		multiline = yes
		maximumsize = { 920 -1 }
		minimumsize = { 920 -1 }
		text = "[War.GetStartWarDescriptionForPlayer]"
		align = center|nobaseline
		parentanchor = hcenter
		alpha = 0

		state = {
			name = war_popup
			next = 2
			alpha = 0
			duration = 1
		}
		state = {
			name = 2
			alpha = 1
			duration = 1.5
			using = Animation_Curve_Default
		}
	}

	### ATTACKER / DEFENDER
	container = {
		parentanchor = top|hcenter
		minimumsize = { 920 -1 }
		position = { 0 150 }

		### ATTACKING SIDE
		widget = {
			position = { 10 0 }
			size = { 420 @attacker_defender_height }

			### BG + HEADER
			widget = {
				size = { 0 @attacker_defender_height }
				alpha = 0
				parentanchor = hcenter

				state = {
					name = war_popup_attacker_defender
					size = { 420 @attacker_defender_height }
					duration = @attacker_defender_bg_duration
					using = Animation_Curve_Default
					alpha = 1
					on_finish = "[PdxGuiTriggerAllAnimations('war_popup_attacker_info')]"
				}

				using = entry_bg_fancy

				### HEADER
				default_header_clean = {
					blockoverride "header_mask" {
						using = frame_small_mask_top
					}
					blockoverride "text" {
						text = "ATTACKER"
					}
					blockoverride "size" {
						size = { 100% 38 }
					}
				}
			}

			### ATTACKER INFO
			flowcontainer = {
				parentanchor = hcenter
				position = { 0 50 }
				spacing = 3
				alpha = 0

				state = {
					name = war_popup_attacker_info
					duration = @attacker_defender_info_duration
					using = Animation_Curve_Default
					alpha = 1
				}

				### ATTACKER ALLIES
				flowcontainer = {
					direction = vertical
					spacing = 5

					textbox = {
						autoresize = yes
						maximumsize = { 180 -1 }
						elide = right
						text = "BELLIGERENTS"
						default_format = "#title"
						parentanchor = hcenter
						align = center|nobaseline
					}

					scrollarea = {
						size = { 170 @attacker_defender_lists_height }
						scrollbarpolicy_horizontal = always_off
						scrollbar_vertical = {
							using = vertical_scrollbar
						}

						scrollwidget = {
							flowcontainer = {
								datamodel = "[War.AccessAttackers]"
								direction = vertical
								spacing = 15

								item = {
									flag_with_str_left = {
										datacontext = "[WarParticipant.GetCountry]"
									}
								}
							}
						}
					}
				}

				vertical_divider_full = {
					blockoverride "size" {
						size = { 0 0 }
					}
					alpha = 0

					state = {
						name = war_popup_attacker_info
						size = { 0 400 }
						duration = @attacker_defender_divider_duration
						using = Animation_Curve_Default
						alpha = 1
					}
				}

				### ATTACKER WARGOALS
				flowcontainer = {
					direction = vertical
					spacing = 5

					textbox = {
						autoresize = yes
						maximumsize = { 180 -1 }
						elide = right
						text = "WARGOALS"
						default_format = "#title"
						parentanchor = hcenter
						align = center|nobaseline
					}

					scrollarea = {
						size = { 190 @attacker_defender_lists_height }
						scrollbarpolicy_horizontal = always_off
						scrollbar_vertical = {
							using = vertical_scrollbar
						}

						scrollwidget = {
							dynamicgridbox = {
								parentanchor = hcenter
								datamodel = "[War.GetAttackersWarGoals]"

								item = {
									small_wargoal_item = {}
								}
							}
						}
					}
				}
			}
		}

		### DEFENDING SIDE
		widget = {
			parentanchor = right
			position = { -10 0 }
			size = { 420 @attacker_defender_height }

			### BG + HEADER
			widget = {
				size = { 0 @attacker_defender_height }
				alpha = 0
				parentanchor = hcenter

				state = {
					name = war_popup_attacker_defender
					size = { 420 @attacker_defender_height }
					duration = @attacker_defender_bg_duration
					using = Animation_Curve_Default
					alpha = 1
					on_finish = "[PdxGuiTriggerAllAnimations('war_popup_defender_info')]"
				}

				using = entry_bg_fancy

				### HEADER
				default_header_clean = {
					blockoverride "header_mask" {
						using = frame_small_mask_top
					}
					blockoverride "text" {
						text = "DEFENDER"
					}
					blockoverride "size" {
						size = { 100% 38 }
					}
				}
			}

			### DEFENDER INFO
			flowcontainer = {
				parentanchor = hcenter
				position = { 0 50 }
				spacing = 3
				alpha = 0

				state = {
					name = war_popup_defender_info
					duration = @attacker_defender_info_duration
					using = Animation_Curve_Default
					alpha = 1
				}

				### DEFENDER WARGOALS
				flowcontainer = {
					direction = vertical
					spacing = 5

					textbox = {
						autoresize = yes
						maximumsize = { 180 -1 }
						elide = right
						text = "WARGOALS"
						default_format = "#title"
						parentanchor = hcenter
						align = center|nobaseline
					}

					scrollarea = {
						size = { 190 @attacker_defender_lists_height }
						scrollbarpolicy_horizontal = always_off
						scrollbar_vertical = {
							using = vertical_scrollbar
						}

						scrollwidget = {
							dynamicgridbox = {
								parentanchor = hcenter
								datamodel = "[War.GetDefendersWarGoals]"

								item = {
									small_wargoal_item = {}
								}
							}
						}
					}
				}

				vertical_divider_full = {
					blockoverride "size" {
						size = { 0 0 }
					}
					alpha = 0

					state = {
						name = war_popup_defender_info
						size = { 0 400 }
						duration = @attacker_defender_divider_duration
						using = Animation_Curve_Default
						alpha = 1
					}
				}

				### DEFENDER ALLIES
				flowcontainer = {
					direction = vertical
					spacing = 5

					textbox = {
						autoresize = yes
						maximumsize = { 180 -1 }
						elide = right
						text = "BELLIGERENTS"
						default_format = "#title"
						parentanchor = hcenter
						align = center|nobaseline
					}

					scrollarea = {
						size = { 170 @attacker_defender_lists_height }
						scrollbarpolicy_horizontal = always_off
						scrollbar_vertical = {
							using = vertical_scrollbar
						}

						scrollwidget = {
							flowcontainer = {
								datamodel = "[War.AccessDefenders]"
								direction = vertical
								spacing = 15

								item = {
									flag_with_str_right = {
										datacontext = "[WarParticipant.GetCountry]"
									}
								}
							}
						}
					}
				}
			}
		}
	}

	### CLOSE BUTTON
	widget = {
		parentanchor = hcenter|bottom
		size = { 350 50 }
		position = { 0 -25 }
		

		vfx = {
			blockoverride "size" {
				size = { 800% 800% }
			}
			blockoverride "parent_anchor" {
				parentanchor = center
			}
			blockoverride "entity_instance" {
				entity_instance = vfx_entity_ui_to_arms_button
			}			
		}

		button = {
			using = default_button_primary_big
			size = { 100% 100% }
			text = "TO_ARMS"
			using = fontsize_xxl
			onclick = "[PopupManager.CloseMessage(PlayerMessageItem.AccessSelf)]"
			shortcut = "close_window"
			alpha = 0
			using = war_to_arms_button_sound

			state = {
				name = war_popup
				alpha = 1
				size = { 350 50 }
				duration = 1.5
				using = Animation_Curve_Default
			}
		}
	}

	### SMOKE ANIMATION
	
	### TOP LEFT
	icon = {
		texture = "gfx/interface/war/war_popup_smoke.dds"
		parentanchor = top|left
		position = { -100 -100 }
		size = { 500 500 }
		alwaystransparent = yes

		modify_texture = {
			name = mask_01
			texture = "gfx/interface/war/war_popup_smoke_mask_01.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = alphamultiply

			translate_uv = { 0 0 }
		}
		modify_texture = {
			name = mask_02
			texture = "gfx/interface/war/war_popup_smoke_mask_01.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = alphamultiply

			translate_uv = { -0.5 -0.5 }
		}

		state = {
			name = war_popup
			duration = @smoke_effect_duration
			using = Animation_Curve_EaseOut

			modify_texture = {
				name = mask_01
				translate_uv = { 1 1 }
			}
			modify_texture = {
				name = mask_02
				translate_uv = { 1 1 }
			}
		}
		
	}

	### CENTER LEFT
	icon = {
		texture = "gfx/interface/war/war_popup_smoke.dds"
		parentanchor = vcenter|left
		position = { -100 0 }
		size = { 700 700 }
		alwaystransparent = yes

		modify_texture = {
			name = mask_01
			texture = "gfx/interface/war/war_popup_smoke_mask_01.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = alphamultiply

			translate_uv = { 0 0 }
		}
		modify_texture = {
			name = mask_02
			texture = "gfx/interface/war/war_popup_smoke_mask_01.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = alphamultiply

			translate_uv = { -0.5 0 }
		}

		state = {
			name = war_popup
			duration = @smoke_effect_duration
			using = Animation_Curve_EaseOut

			modify_texture = {
				name = mask_01
				translate_uv = { 1 0 }
			}
			modify_texture = {
				name = mask_02
				translate_uv = { 1 0 }
			}
		}
	}

	### BOTTOM LEFT
	icon = {
		texture = "gfx/interface/war/war_popup_smoke.dds"
		parentanchor = bottom|left
		position = { -100 100 }
		size = { 500 500 }
		alwaystransparent = yes

		modify_texture = {
			name = mask_01
			texture = "gfx/interface/war/war_popup_smoke_mask_01.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = alphamultiply

			translate_uv = { 0 0 }
		}
		modify_texture = {
			name = mask_02
			texture = "gfx/interface/war/war_popup_smoke_mask_01.dds"
			spriteType = Corneredstretched
			spriteborder = { -0.1 0.1 }
			blend_mode = alphamultiply

			translate_uv = { -0.5 0.5 }
		}

		state = {
			name = war_popup
			duration = @smoke_effect_duration
			using = Animation_Curve_EaseOut

			modify_texture = {
				name = mask_01
				translate_uv = { 1 -1 }
			}
			modify_texture = {
				name = mask_02
				translate_uv = { 1 -1 }
			}
		}
	}

	### TOP RIGHT
	icon = {
		texture = "gfx/interface/war/war_popup_smoke.dds"
		parentanchor = top|right
		position = { 100 -100 }
		size = { 500 500 }
		alwaystransparent = yes

		modify_texture = {
			name = mask_01
			texture = "gfx/interface/war/war_popup_smoke_mask_01.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = alphamultiply

			translate_uv = { 0 0 }
		}
		modify_texture = {
			name = mask_02
			texture = "gfx/interface/war/war_popup_smoke_mask_01.dds"
			spriteType = Corneredstretched
			spriteborder = { 0.1 -0.1 }
			blend_mode = alphamultiply

			translate_uv = { 0.5 -0.5 }
		}

		state = {
			name = war_popup
			duration = @smoke_effect_duration
			using = Animation_Curve_EaseOut

			modify_texture = {
				name = mask_01
				translate_uv = { -1 1 }
			}
			modify_texture = {
				name = mask_02
				translate_uv = { -1 1 }
			}
		}
	}

	### CENTER RIGHT
	icon = {
		texture = "gfx/interface/war/war_popup_smoke.dds"
		parentanchor = vcenter|right
		position = { 100 0 }
		size = { 700 700 }
		alwaystransparent = yes

		modify_texture = {
			name = mask_01
			texture = "gfx/interface/war/war_popup_smoke_mask_01.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = alphamultiply

			translate_uv = { 0 0 }
		}
		modify_texture = {
			name = mask_02
			texture = "gfx/interface/war/war_popup_smoke_mask_01.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = alphamultiply

			translate_uv = { 0.5 0 }
		}

		state = {
			name = war_popup
			duration = @smoke_effect_duration
			using = Animation_Curve_EaseOut

			modify_texture = {
				name = mask_01
				translate_uv = { -1 0 }
			}
			modify_texture = {
				name = mask_02
				translate_uv = { -1 0 }
			}
		}
	}

	### BOTTOM RIGHT
	icon = {
		texture = "gfx/interface/war/war_popup_smoke.dds"
		parentanchor = bottom|right
		position = { 100 100 }
		size = { 500 500 }
		alwaystransparent = yes

		modify_texture = {
			name = mask_01
			texture = "gfx/interface/war/war_popup_smoke_mask_01.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = alphamultiply

			translate_uv = { 0 0 }
		}
		modify_texture = {
			name = mask_02
			texture = "gfx/interface/war/war_popup_smoke_mask_01.dds"
			spriteType = Corneredstretched
			spriteborder = { 0 0 }
			blend_mode = alphamultiply

			translate_uv = { 0.5 0.5 }
		}

		state = {
			name = war_popup
			duration = @smoke_effect_duration
			using = Animation_Curve_EaseOut

			modify_texture = {
				name = mask_01
				translate_uv = { -1 -1 }
			}
			modify_texture = {
				name = mask_02
				translate_uv = { -1 -1 }
			}
		}
	}
}

### PEACE SIGNED
notification_popup = {
	name = "peace_signed_popup"
	using = default_fade_in
	datacontext = "[PlayerMessageItem.GetScopeDiploPlay]"

	blockoverride "window_header_name" {
		text = "PEACE_TOAST_TITLE"
	}

	blockoverride "header_close_button_visibility" {
		visible = yes
	}
	blockoverride "header_close_button" {
		onclick = "[PopupManager.CloseMessage(PlayerMessageItem.AccessSelf)]"
		shortcut = "close_window"
	}

	blockoverride "scrollarea_content" {
		flowcontainer = {
			direction = vertical
			resizeparent = yes
			margin = { 10 10 }

			container = {
				parentanchor = hcenter
				minimumsize = { 480 -1 }

				### CENTER DIVIDER
				vertical_divider = {
					parentanchor = hcenter
				}

				flowcontainer = {
					parentanchor = hcenter
					direction = vertical
					spacing = 20

					### PRESSED WARGOALS
					container = {
						minimumsize = { 460 -1 }

						### ATTACKERS
						flowcontainer = {
							position = { 0 5 }
							parentanchor = left
							direction = vertical
							minimumsize = { 228 -1 }

							textbox = {
								text = WAR_PANEL_INITIATOR_WARGOALS
								autoresize = yes
								align = center|nobaseline
								parentanchor = hcenter
							}
							dynamicgridbox = {
								using = default_list_position
								datamodel = "[DiplomaticPlay.GetAllWarGoalsOfInitiatorSide]"

								item = {
									small_wargoal_item_with_checkmark = {}
								}
							}
						}

						### DEFENDERS
						flowcontainer = {
							position = { 0 5 }
							parentanchor = right
							direction = vertical
							minimumsize = { 228 -1 }

							textbox = {
								text = WAR_PANEL_TARGET_WARGOALS
								autoresize = yes
								align = center|nobaseline
								parentanchor = hcenter
							}
							dynamicgridbox = {
								using = default_list_position
								datamodel = "[DiplomaticPlay.GetAllWarGoalsOfTargetSide]"

								item = {
									small_wargoal_item_with_checkmark = {}
								}
							}
						}
					}
				}
			}

			widget = {
				size = { 15 15 }
			}

			textbox = {
				text = "PEACE_SIGNED_DATE"
				autoresize = yes
				align = center|nobaseline
				parentanchor = hcenter
				using = fontsize_large
			}
		}
	}

	blockoverride "fixed_bottom" {
		button = {
			using = default_list_position
			using = default_button
			text = "OK"
			onclick = "[PopupManager.CloseMessage(PlayerMessageItem.AccessSelf)]"
			size = { 610 40 }
			
			tooltip = "CONFIRM"
			input_action = "confirm"
		}
	}
}

### CAPITULATION
notification_popup = {
	name = "capitulation_popup"
	using = default_fade_in
	datacontext = "[PlayerMessageItem.GetScopeDiploPlay]"
	datacontext = "[PlayerMessageItem.GetScopeTargetCountry]"

	blockoverride "window_header_name" {
		text = "CAPITULATION_TITLE"
	}

	blockoverride "header_close_button_visibility" {
		visible = yes
	}
	blockoverride "header_close_button" {
		onclick = "[PopupManager.CloseMessage(PlayerMessageItem.AccessSelf)]"
		shortcut = "close_window"
	}

	blockoverride "scrollarea_content" {
		flowcontainer = {
			direction = vertical
			resizeparent = yes
			margin = { 10 10 }

			textbox = {
				text = "CAPITULATION_ENFORCED"
				autoresize = yes
				align = center|nobaseline
				parentanchor = hcenter
				using = fontsize_large
			}

			widget = {
				size = { 15 15 }
			}

			dynamicgridbox = {
				using = default_list_position
				#direction = horizontal
				datamodel = "[DiplomaticPlay.AccessExecutedWarGoalsAgainst(Country.Self)]"

				item = {
					small_wargoal_item_with_checkmark = {}
				}
			}
		}
	}

	blockoverride "fixed_bottom" {
		button = {
			using = default_list_position
			using = default_button
			using = default_button_sound
			text = "OK"
			onclick = "[PopupManager.CloseMessage(PlayerMessageItem.AccessSelf)]"
			size = { 610 40 }
			
			tooltip = "CONFIRM"
			input_action = "confirm"
		}
	}
}

types start_diplo_play {
	type start_diplo_play_table = flowcontainer {
		direction = vertical
		margin_top = 10

		flowcontainer = {
			textbox = {
				using = start_diplo_play_table_header
				block "table_header_1" {
					raw_text = "namn"
					visible = no
				}
				size = { 180 30 }
				align = left|nobaseline
				default_format = "#b"
				margin_left = 5
			}

			textbox = {
				using = start_diplo_play_table_header
				raw_text = "UNIT_LABEL_ARMY"
				size = { 100 30 }
				align = left|nobaseline
			}

			textbox = {
				using = start_diplo_play_table_header
				raw_text = "UNIT_LABEL_CONSCRIPTS"
				size = { 100 30 }
				align = left|nobaseline
			}

			textbox = {
				using = start_diplo_play_table_header
				raw_text = "UNIT_LABEL_NAVY"
				size = { 100 30 }
				align = left|nobaseline
			}

			block "vertical_dividers" {
				vertical_divider_full = {}
			}

			textbox = {
				using = start_diplo_play_table_header
				block "table_header_4" {
					raw_text = "initiator"
					visible = no
				}
				size = { 80 30 }
				align = hcenter|nobaseline
			}

			textbox = {
				using = start_diplo_play_table_header
				block "table_header_5" {
					raw_text = "target"
					visible = no
				}
				size = { 80 30 }
				align = hcenter|nobaseline
			}

			block "vertical_dividers" {
				vertical_divider_full = {}
			}

			textbox = {
				using = start_diplo_play_table_header
				block "table_header_6" {
					raw_text = "prediction"
					visible = no
				}
				size = { 120 30 }
				align = hcenter|nobaseline
			}
		}

		flowcontainer = {
			direction = vertical

			block "table_datamodel" {

			}

			item = {
				flowcontainer = {
					block "item_visibility" {

					}

					background = {
						visible = "[IsOdd_int32(PdxGuiWidget.GetIndexInDataModel)]"
						using = dark_area
						alpha = 0.15
					}

					textbox = {
						text = "[Country.GetName]"
						size = { 180 30 }
						align = nobaseline
						elide = right
						margin_right = 5
						margin_left = 5
					}

					textbox = {
						raw_text = "@battalions![Country.GetRegularBattalions|v]"
						tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
						alpha = "[TransparentIfZero_int32(Country.GetRegularBattalions )]"
						size = { 100 30 }
						elide = right
						align = left|nobaseline
						fontsize_min = 12
					}

					textbox = {
						raw_text = "@conscripts![Country.CalcConscriptableBattalions|v]"
						tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
						alpha = "[TransparentIfZero_int32( Country.CalcConscriptableBattalions )]"
						size = { 100 30 }
						elide = right
						align = left|nobaseline
						fontsize_min = 12
					}

					textbox = {
						raw_text = "@flotillas! [Country.GetWarships|0v]"
						tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP"
						alpha = "[TransparentIfZero_int32(Country.GetWarships)]"
						size = { 100 30 }
						elide = right
						align = left|nobaseline
						fontsize_min = 12
					}

					block "vertical_dividers" {
						vertical_divider_full = {}
					}

					textbox = {
						block "table_value_4" {
							#raw_text = "initiator"
							visible = no
						}
						size = { 80 30 }
						align = hcenter|nobaseline
					}

					textbox = {
						block "table_value_5" {
							#raw_text = "target"
							visible = no
						}
						size = { 80 30 }
						align = hcenter|nobaseline
					}

					block "vertical_dividers" {
						vertical_divider_full = {}
					}

					textbox = {
						block "table_value_6" {
							#raw_text = "prediction"
							visible = no
						}
						size = { 120 30 }
						align = hcenter|nobaseline
					}
				}
			}
		}
	}
}

template start_diplo_play_table_header {
	margin_bottom = 3
	align = right|nobaseline
	
	divider_clean = {
		parentanchor = bottom|hcenter
	}
}
