# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

@interest_group_grid_width = 108  # = @panel_width / @interest_group_grid_columns
@interest_group_grid_height = 120
@interest_group_grid_columns = 5

types political_movement_panel_types
{
	type political_movement_panel = default_block_window_two_lines {
		name = "political_movement_panel"
		enabled = yes

		datacontext = "[PoliticalMovementPanel.GetPoliticalMovement]"

		blockoverride "window_header_name"
		{
			text = "[LabelingHelper.CapitalizeOnlyFirst(PoliticalMovement.GetNameNoFormatting)]"
		}

		blockoverride "window_header_name_line_two"
		{
			text = "POLITICAL_MOVEMENT_IN_COUNTRY"
		}

		blockoverride "goto_button" {
			button_icon_goto = {
				size = { 30 30 }
				datacontext = "[PoliticalMovement.GetCountry]"
				tooltip = "GO_TO_BUTTON_COUNTRY"
				onclick = "[InformationPanelBar.OpenCountryPanel(PoliticalMovement.GetCountry.Self)]"
				input_action = "go_to_details"
			}
		}

		blockoverride "pin_visibility" {
			visible = "[ObjectsEqual(PoliticalMovement.GetCountry.Self, GetPlayer.Self)]"
		}

		blockoverride "pin_properties" {
			visible = "[PoliticalMovement.IsPinnedInOutliner]"
			onclick = "[PoliticalMovement.TogglePinInOutliner]"
			tooltip = "UNPIN_POLITICAL_MOVEMENT"
		}

		blockoverride "unpin_properties" {
			visible = "[Not(PoliticalMovement.IsPinnedInOutliner)]"
			onclick = "[PoliticalMovement.TogglePinInOutliner]"
			tooltip = "PIN_POLITICAL_MOVEMENT"
		}

		blockoverride "fixed_top"
		{
			# Non-Revolutionary Political Movement Header
			political_movement_top_illu = {
				visible = "[Not(PoliticalMovement.IsInsurrectionary)]"
				blockoverride "illu" {
					texture = "gfx/interface/illustrations/top_illus/top_illu_political_movement.dds"
				}
			}

			# Revolutionary Political Movement Header
			revolutionary_political_movement_top_illu = {
				visible = "[PoliticalMovement.IsInsurrectionary]"
				blockoverride "illu" {
					texture = "gfx/interface/illustrations/top_illus/top_illu_revolutionary_movement.dds"
				}
			}

			widget = {
				size = { 5 5 }
			}

			widget = {
				size = { 5 5 }
			}

			### TABS
			tab_buttons = {
				# Poltical Movement overview
				blockoverride "first_button" {
					text = "OVERVIEW"
				}
				blockoverride "first_button_click" {
					onclick = "[InformationPanel.SelectTab('default')]"
				}
				blockoverride "first_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('default')]"
				}
				blockoverride "first_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('default') )]"
				}
				blockoverride "first_button_selected" {
					text = "OVERVIEW"
				}	

				# Interest Groups
				blockoverride "second_button" {
					text = "NATIONALIZE_EFFECTS_HEADER"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanel.SelectTab('effects')]"
				}
				blockoverride "second_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('effects')]"
				}
				blockoverride "second_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('effects') )]"
				}
				blockoverride "second_button_selected" {
					text = "NATIONALIZE_EFFECTS_HEADER"
				}

				# Population
				blockoverride "third_button" {
					text = "SUPPORTING_POPULATION"
				}
				blockoverride "third_button_click" {
					onclick = "[InformationPanel.SelectTab('supporting_population')]"
				}
				blockoverride "third_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('supporting_population')]"
				}
				blockoverride "third_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('supporting_population') )]"
				}
				blockoverride "third_button_selected" {
					text = "SUPPORTING_POPULATION"
				}
			}
		}

		blockoverride "fixed_bottom"
		{		
			flowcontainer = {
				direction = vertical
				spacing = 5

				divider_clean = {
					size = { @panel_width_plus_14 4 }
				}

				background = {
					using = dark_area
				}

				widget = {
					size = { 5 5 }
				}

				flowcontainer = {
					parentanchor = hcenter
					spacing = 10

					button = {
						visible = "[Not(PoliticalMovement.IsSuppressed)]"
						parentanchor = vcenter
						size = { 260 40 }
						using = default_button_action
						onclick = "[Execute(PoliticalMovement.ToggleSuppression)]"
						enabled = "[IsValid(PoliticalMovement.ToggleSuppression)]"
						using = suppress_button_sound
						using = tooltip_ne
						tooltip = "TOOLTIP_SUPPRESS"

						flowcontainer = {
							parentanchor = center

							icon = {
								parentanchor = vcenter
								size = { 25 25 }
								texture = "gfx/interface/icons/generic_icons/ig_suppress.dds"
							}

							textbox = {
								maximumsize = { 160 35 }
								autoresize = yes
								fontsize_min = 12
								elide = right
								text = "SUPPRESS_SHORT"
								align = nobaseline
								parentanchor = vcenter	
							}
						}
					}

					button = {
						visible = "[PoliticalMovement.IsSuppressed]"
						parentanchor = vcenter
						using = default_button_action
						size = { 260 40 }
						onclick = "[Execute(PoliticalMovement.ToggleSuppression)]"
						enabled = "[IsValid(PoliticalMovement.ToggleSuppression)]"
						using = close_button_sound
						using = shimmer
						using = tooltip_ne
						tooltip = "TOOLTIP_SUPPRESS_NOT"

						textbox = {
							maximumsize = { 170 35 }
							autoresize = yes
							fontsize_min = 12
							elide = right
							text = "SUPPRESS_NOT_SHORT"
							align = nobaseline
							parentanchor = hcenter|vcenter
						}

						icon = {
							visible = "[PoliticalMovement.IsSuppressed]"
							using = highlighted_square_selection
						}
					}

					button = {
						visible = "[Not(PoliticalMovement.IsBolstered)]"
						name = "tutorial_highlight_promote_button"
						parentanchor = vcenter
						size = { 260 40 }
						using = default_button_action
						onclick = "[Execute(PoliticalMovement.ToggleBolstering)]"
						enabled = "[IsValid(PoliticalMovement.ToggleBolstering)]"
						using = bolster_button_sound
						using = tooltip_ne
						tooltip = "TOOLTIP_BOLSTER"

						flowcontainer = {
							parentanchor = center

							icon = {
								parentanchor = vcenter
								size = { 25 25 }
								texture = "gfx/interface/icons/generic_icons/ig_bolster.dds"
							}

							textbox = {
								maximumsize = { 160 35 }
								autoresize = yes
								fontsize_min = 12
								elide = right
								text = "BOLSTER_SHORT"
								align = nobaseline
								parentanchor = vcenter	
							}
						}
					}

					button = {
						visible = "[PoliticalMovement.IsBolstered]"
						parentanchor = vcenter
						using = default_button_action
						size = { 260 40 }
						onclick = "[Execute(PoliticalMovement.ToggleBolstering)]"
						enabled = "[IsValid(PoliticalMovement.ToggleBolstering)]"
						using = close_button_sound
						using = shimmer
						using = tooltip_ne
						tooltip = "TOOLTIP_BOLSTER_NOT"

						textbox = {
							maximumsize = { 170 35 }
							autoresize = yes
							fontsize_min = 12
							elide = right
							text = "BOLSTER_NOT_SHORT"
							align = nobaseline
							parentanchor = hcenter|vcenter	
						}

						icon = {
							visible = "[PoliticalMovement.IsBolstered]"
							using = highlighted_square_selection
						}
					}
				}

				widget = {
					size = { 10 10 }
				}
			}
		}

		blockoverride "bottom_spacing" {}
	
		blockoverride "scrollarea_content_vbox"
		{
			vbox = {
				name = "content_container"
				layoutpolicy_horizontal = preferred

				### Overview tab
				vbox = {
					visible = "[InformationPanel.IsTabSelected('default')]"
					layoutpolicy_horizontal = preferred
					using = default_content_fade
					spacing = 10
					margin_top = 10

					### Interest Groups
					vbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = expanding

						default_header = {
							blockoverride "text" {
								text = "PRESSURED_INTEREST_GROUPS"
							}
						}

						empty_state_dynamic_width = {
							visible = "[IsDataModelEmpty(PoliticalMovement.GetInfluencedInterestGroups)]"
							margin = { 0 15 }
							autoresize = yes
							max_width = 510
							text = "POLITICAL_MOVEMENT_NO_INFLUENCED_INTEREST_GROUPS"
						}

						fixedgridbox = {
							visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetInfluencedInterestGroups))]"
							flipdirection = yes
							addrow = @interest_group_grid_height
							addcolumn = @interest_group_grid_width
							datamodel_wrap = @interest_group_grid_columns
							datamodel = "[PoliticalMovement.GetInfluencedInterestGroups]"

							item = {
								widget = {
									size = { @interest_group_grid_width @interest_group_grid_height }
									tooltip = "INTEREST_GROUP_MOVEMENT_SUPPORT_CLOUT_TOOLTIP"
									using = tooltip_se

									flowcontainer = {
										parentanchor = center
										direction = vertical
										spacing = 5
										margin = { 10 5 }

										background = {
											using = entry_bg_simple_solid
											color = "[InterestGroup.GetColor]"
											alpha = 0.6

											modify_texture = {
												using = texture_velvet
											}
										}

										ig_button = {
											size = { 70 70 }
											parentanchor = hcenter
										}

										textbox = {
											name = "approval"
											parentanchor = hcenter
											align = nobaseline
											autoresize = yes
											raw_text = "#v [InterestGroup.GetFractionOfCloutSupportingMovement(PoliticalMovementPanel.GetPoliticalMovement.Self)|%0]#!"
										}
									}
								}
							}
						}
					}

					### Supporting Agitators
					vbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = expanding
						spacing = 8

						### Agitators
						default_header = {
							blockoverride "text" {
								text = "SUPPORTING_AGITATORS"
							}
						}

						dynamicgridbox = {
							visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetSupportingCharacters))]"
							layoutpolicy_vertical = preferred
							flipdirection = yes
							datamodel_wrap = 4
							datamodel = "[PoliticalMovement.GetSupportingCharacters]"

							item = {
								agitator_in_movement_panel = {
									visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetSupportingCharacters))]"
								}
							}
						}

						empty_state_dynamic_width = {
							visible = "[IsDataModelEmpty(PoliticalMovement.GetSupportingCharacters)]"
							margin = { 0 15 }
							autoresize = yes
							max_width = 510
							text = "NO_AGITATOR_IN_MOVEMENT"
						}
					}

					### Core Ideology
					vbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = preferred
						maximumsize = { @panel_width -1 }
						datacontext = "[PoliticalMovement.GetCoreIdeology]"

						### Core Ideology Header
						default_header = {
							blockoverride "textbox" {
								flowcontainer = {
									parentanchor = center
									spacing = 5

									icon = {
										parentanchor = vcenter
										size = { 35 35 }
										texture = "[Ideology.GetTexture]"
									}

									textbox = {
										parentanchor = vcenter
										autoresize = yes
										align = nobaseline
										elide = right
										using = fontsize_large
										fontsize_min = 14
										max_width = @panel_width_minus_10
										text = "CORE_IDEOLOGY_HEADER" 
									}
								}
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							margin = { 10 0 }
							margin_top = 7

							vbox = {
								layoutpolicy_horizontal = expanding
								margin_bottom = 7

								background = {
									using = entry_bg_simple
								}

								### Endorse|Neutral|Oppose Icons
								hbox = {
									layoutpolicy_horizontal = preferred
									margin = { 0 5 }

									background = {
										using = dark_area
									}

									### Endorse icon + green bg
									flowcontainer = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = preferred
										direction = vertical
										minimumsize = { 170 -1 }
										tooltip = "MOVEMENT_ENDORSE_ICON_TOOLTIP"
										using = tooltip_ne

										background = {
											using = fade_center_colored_green
											margin = { 10 0 }
										}

										icon = {
											parentanchor = hcenter
											size = { 30 30 }
											texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
										}
									}

									### Neutral icon + white bg
									flowcontainer = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = preferred
										direction = vertical
										minimumsize = { 170 -1 }
										tooltip = "MOVEMENT_INDIFFERENT_ICON_TOOLTIP"
										using = tooltip_ne

										background = {
											using = fade_center_colored_grey
											margin = { 10 0 }
										}

										icon = {
											parentanchor = hcenter
											size = { 30 30 }
											texture = "gfx/interface/icons/generic_icons/undecided_icon.dds"
										}
									}

									### Oppose icon + red bg
									flowcontainer = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = preferred
										direction = vertical
										minimumsize = { 170 -1 }
										tooltip = "MOVEMENT_OPPOSE_ICON_TOOLTIP"
										using = tooltip_ne

										background = {
											using = fade_center_colored_red
											margin = { 10 0 }
										}

										icon = {
											parentanchor = hcenter
											size = { 30 30 }
											texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
										}
									}
								}

								divider_decorative = {
									layoutpolicy_horizontal = expanding
									size = { 0 2 }
								}

								### Law Groups in the Ideology
								vbox = {
									layoutpolicy_horizontal = preferred
									layoutpolicy_vertical = preferred
									datamodel = "[Ideology.GetLawGroups]"
									margin_top = 5

									item = {
										ideology_law_group = {}
									}
								}
							}
						}
					}

					### Timed Modifiers
					vbox = {
						visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetTimedModifiers))]"
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = expanding

						default_header = {
							blockoverride "text" {
								text = "concept_timed_modifiers"
							}
						}

						vbox = {
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = expanding
							datamodel = "[PoliticalMovement.GetTimedModifiers]"
							spacing = 2

							item = {
								vbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									margin = { 10 0 }

									hbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										tooltip = "[TimedModifier.GetTooltip]"
										margin = { 10 0 }

										background = {
											using = entry_bg_simple
										}

										flowcontainer = {
											spacing = 10
											minimumsize = { -1 40 }

											icon = {
												parentanchor = vcenter
												size = { 25 25 }
												texture = "[TimedModifier.GetIcon]"
											}

											textbox = {
												parentanchor = vcenter
												autoresize = yes
												align = nobaseline
												max_width = 440
												elide = right
												fontsize_min = 12
												text = "[TimedModifier.GetName]"
											}
										}

										expand = {}

										textbox = {
											autoresize = yes
											align = nobaseline
											text = "[TimedModifier.GetRemainingDuration]"
										}
									}
								}
							}
						}
					}
				}

				### Effects tab
				vbox = {
					visible = "[InformationPanel.IsTabSelected('effects')]"
					layoutpolicy_horizontal = preferred
					using = default_content_fade
					spacing = 10
					margin_top = 10

					### Character Ideologies
					vbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = expanding
						spacing = 2

						default_header = {
							blockoverride "text" {
								text = "CHARACTER_IDEOLOGIES_HEADER"
							}
						}

						empty_state_dynamic_width = {
							visible = "[IsDataModelEmpty(PoliticalMovement.GetCharacterIdeologies)]"
							margin = { 0 15 }
							margin_top = 21
							autoresize = yes
							max_width = 510
							text = "NO_POSSIBLE_CHARACTER_IDEOLOGIES"
						}

						vbox = {
							visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetCharacterIdeologies))]"
							layoutpolicy_horizontal = preferred
							layoutpolicy_vertical = expanding

							hbox = {
								fixedgridbox = {
									visible = "[EqualTo_int32(GetDataModelSize(PoliticalMovement.GetCharacterIdeologies), '(int32)1')]"
									addrow = 60
									addcolumn = @panel_width
									datamodel = "[PoliticalMovement.GetCharacterIdeologies]"

									item = {
										widget = {
											size = { @panel_width 60 }

											widget = {
												parentanchor = center
												size = { 530 50 }

												background = {
													using = entry_bg_simple
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													spacing = 5
													margin = { 5 0 }

													icon = {
														size = { 40 40 }
														using = tooltip_above
														texture = "[Ideology.GetTexture]"
													}

													textbox = {
														layoutpolicy_horizontal = expanding
														autoresize = yes
														align = nobaseline
														elide = right
														fontsize_min = 14
														text = "[Ideology.GetNameNoFormatting]" 
													}

													tooltipwidget = {
														FancyTooltip_Ideology = {}
													}
												}
											}
										}
									}
								}

								fixedgridbox = {
									visible = "[EqualTo_int32(GetDataModelSize(PoliticalMovement.GetCharacterIdeologies), '(int32)2')]"
									addrow = 60
									addcolumn = @panel_width_half
									flipdirection = yes
									datamodel_wrap = 2
									datamodel = "[PoliticalMovement.GetCharacterIdeologies]"

									item = {
										widget = {
											size = { @panel_width_half 60 }

											widget = {
												parentanchor = center
												size = { 260 50 }

												background = {
													using = entry_bg_simple
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													spacing = 5
													margin = { 5 0 }

													icon = {
														size = { 40 40 }
														using = tooltip_above
														texture = "[Ideology.GetTexture]"
													}

													textbox = {
														layoutpolicy_horizontal = expanding
														autoresize = yes
														align = nobaseline
														elide = right
														fontsize_min = 14
														text = "[Ideology.GetNameNoFormatting]" 
													}

													tooltipwidget = {
														FancyTooltip_Ideology = {}
													}
												}
											}
										}
									}
								}

								fixedgridbox = {
									visible = "[GreaterThan_int32(GetDataModelSize(PoliticalMovement.GetCharacterIdeologies), '(int32)2')]"
									addrow = 60
									addcolumn = 170
									flipdirection = yes
									datamodel_wrap = 3
									datamodel = "[PoliticalMovement.GetCharacterIdeologies]"

									item = {
										widget = {
											size = { 170 60 }

											widget = {
												parentanchor = center
												size = { 160 50 }

												background = {
													using = entry_bg_simple
												}

												hbox = {
													layoutpolicy_horizontal = expanding
													spacing = 5
													margin = { 5 0 }

													icon = {
														size = { 40 40 }
														using = tooltip_above
														texture = "[Ideology.GetTexture]"
													}

													textbox = {
														layoutpolicy_horizontal = expanding
														autoresize = yes
														align = nobaseline
														elide = right
														fontsize_min = 14
														text = "[Ideology.GetNameNoFormatting]" 
													}

													tooltipwidget = {
														FancyTooltip_Ideology = {}
													}
												}
											}
										}
									}
								}
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								max_width = @panel_width_minus_10

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 10
									margin = { 0 5 }

									textbox = {
										autoresize = yes
										margin_left = 10
										align = nobaseline
										max_width = 500
										multiline = yes
										fontsize_min = 14
										elide = right
										default_format = "#title"
										text = "MOVEMENT_AFFECTED_INTEREST_GROUPS_DESC"
									}

									expand = {}
								}
							}
						}
					}
					
					### Laws & Radicals
					vbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = expanding
						spacing = 10

						default_header = {
							blockoverride "text" {
								text = "POLITICAL_MOVEMENT_LAWS_AND_RADICALS_HEADER"
							}
						}						

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							spacing = 5
							
							textbox = {
								visible = "[Not(GreaterThan_int64(PoliticalMovement.PredictNumberOfRadicalsEveryMonth, '(int64)0'))]"
								margin_bottom = 5
								align = nobaseline
								autoresize = yes
								multiline = yes
								max_width = 540
								elide = right
								fontsize_min = 12
								text = "POLITICAL_MOVEMENT_LOYALTY_PREDICTIONS_NONE"
							}

							textbox = {
								visible = "[GreaterThan_int64(PoliticalMovement.PredictNumberOfRadicalsEveryMonth, '(int64)0')]"
								margin_bottom = 5
								align = nobaseline
								autoresize = yes
								multiline = yes
								max_width = 540
								elide = right
								fontsize_min = 12
								text = "POLITICAL_MOVEMENT_LOYALTY_PREDICTIONS"
							}	

							divider_decorative = {
								layoutpolicy_horizontal = expanding

								blockoverride "size" {
									size = { 0 2 }
								}
							}							

							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								spacing = 2

								empty_state_dynamic_width = {
									visible = "[And(IsDataModelEmpty(PoliticalMovement.GetAffectedLawsSuccess), IsDataModelEmpty(PoliticalMovement.GetAffectedLawsStall))]"
									margin = { 0 15 }
									autoresize = yes
									max_width = 510
									text = "NO_AFFECTED_LAWS_DUE_TO_LOW_RADICALISM"
								}

								hbox = {
									visible = "[Or(Not(IsDataModelEmpty(PoliticalMovement.GetAffectedLawsSuccess)), Not(IsDataModelEmpty(PoliticalMovement.GetAffectedLawsStall)))]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding

									movement_affected_laws_column = {}

									vertical_divider_full = {
										layoutpolicy_vertical = expanding

										blockoverride "size" {
											size = { 2 0 }
										}
									}

									movement_affected_laws_column = {
										blockoverride "header_background" {
											background = {
												using = fade_center_colored_red
												margin = { 5 0 }
											}
										}

										blockoverride "header_icon" {
											texture = "gfx/interface/icons/generic_icons/red_cross.dds"
										}

										blockoverride "header_text" {
											text = "POLITICAL_MOVEMENT_AFFECTED_LAWS_STALL_HEADER"
										}

										blockoverride "empty_state_visibility" {
											visible = "[IsDataModelEmpty(PoliticalMovement.GetAffectedLawsStall)]"
										}

										blockoverride "laws_visibility" {
											visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetAffectedLawsStall))]"
										}

										blockoverride "laws_datamodel" {
											datamodel = "[PoliticalMovement.GetAffectedLawsStall]"
										}
									}
								}
							}
						}
					}					

					### Interest Groups
					vbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = expanding
						spacing = 8

						default_header = {
							blockoverride "text" {
								text = "PRESSURED_INTEREST_GROUPS"
							}
						}

						vbox = {
							visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetInfluencedInterestGroups))]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							spacing = 10
							datamodel = "[PoliticalMovement.GetInfluencedInterestGroups]"

							item = {
								interest_group_in_movement_info = {}
							}
						}

						empty_state_dynamic_width = {
							visible = "[IsDataModelEmpty(PoliticalMovement.GetInfluencedInterestGroups)]"
							margin = { 0 15 }
							autoresize = yes
							max_width = 510
							text = "POLITICAL_MOVEMENT_NO_INFLUENCED_INTEREST_GROUPS"
						}

						### NOT YET PRESSURED INTEREST GROUPS - JUST A LITTLE PRESSURE
						section_header_button = {
							blockoverride "layout" {
								size = { @panel_width_plus_14 38 }
							}

							blockoverride "left_text" {
								text = "NOT_YET_PRESSURED_INTEREST_GROUPS_HEADER"
								fontsize_min = 12
								elide = right
							}

							blockoverride "right_text" {
								section_header_right_text = {
									raw_text = "#v [Subtract_int32(GetDataModelSize(PoliticalMovement.GetSupportingInterestGroups), GetDataModelSize(PoliticalMovement.GetInfluencedInterestGroups))]#!"
								}
							}

							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle( 'political_movement_not_pressured_igs' )]"
							}

							blockoverride "onclick_showmore" {
								visible = "[Not(GetVariableSystem.Exists( 'political_movement_not_pressured_igs' ))]"
							}

							blockoverride "onclick_showless" {
								visible = "[GetVariableSystem.Exists( 'political_movement_not_pressured_igs' )]"
							}
						}

						vbox = {
							visible = "[And(GetVariableSystem.Exists( 'political_movement_not_pressured_igs' ), NotZero(Subtract_int32(GetDataModelSize(PoliticalMovement.GetSupportingInterestGroups), GetDataModelSize(PoliticalMovement.GetInfluencedInterestGroups))))]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							spacing = 10
							datamodel = "[PoliticalMovement.GetSupportingInterestGroups]"

							item = {
								interest_group_in_movement_info = {
									visible = "[Not(InterestGroup.IsInfluencedByMovement(PoliticalMovement.Self))]"
								}
							}
						}

						empty_state_dynamic_width = {
							visible = "[And(GetVariableSystem.Exists( 'political_movement_not_pressured_igs' ), IsZero(Subtract_int32(GetDataModelSize(PoliticalMovement.GetSupportingInterestGroups), GetDataModelSize(PoliticalMovement.GetInfluencedInterestGroups))))]"
							margin = { 0 15 }
							autoresize = yes
							max_width = 510
							text = "POLITICAL_MOVEMENT_NO_NON_INFLUENCED_INTEREST_GROUPS"
						}

						expand = {}
					}					
				}

				### Population tab
				vbox = {
					layoutpolicy_horizontal = preferred
					visible = "[InformationPanel.IsTabSelected('supporting_population')]"
					using = default_content_fade
					datacontext = "[GetPlayer]"

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						background = {
							using = dropdown_background
							margin = { 0 -2 }
						}

						### Pop Attraction Factors
						section_header_button = {
							blockoverride "layout" {
								size = { @panel_width_plus_14 38 }
							}

							blockoverride "left_text" {
								text = "POLITICAL_MOVEMENT_POP_ATTRACTION_FACTORS_HEADER"
								fontsize_min = 12
								elide = right
							}

							blockoverride "right_text" {}

							blockoverride "onclick" {
								onclick = "[GetVariableSystem.Toggle( 'political_movement_attraction_factors' )]"
							}

							### These visible states are flipped to have the dropdown be open by default
							blockoverride "onclick_showmore" {
								visible = "[GetVariableSystem.Exists( 'political_movement_attraction_factors' )]"
							}

							blockoverride "onclick_showless" {
								visible = "[Not(GetVariableSystem.Exists( 'political_movement_attraction_factors' ))]"
							}
						}

						empty_state_dynamic_width = {
							### This visible state is flipped to have the dropdown be open by default
							visible = "[And(Not(GetVariableSystem.Exists( 'political_movement_attraction_factors' )), IsDataModelEmpty(PoliticalMovement.GetPopSupportFactors))]"
							margin = { 0 15 }
							autoresize = yes
							max_width = 510
							text = "NO_POLITICAL_MOVEMENT_POP_ATTRACTION_FACTORS"
						}

						vbox = {
							### This visible state is flipped to have the dropdown be open by default
							visible = "[And(Not(GetVariableSystem.Exists( 'political_movement_attraction_factors' )), Not(IsDataModelEmpty(PoliticalMovement.GetPopSupportFactors)))]"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							margin = { 10 5 }
							margin_bottom = 15
							max_width = 540
							spacing = 2
							datamodel = "[PoliticalMovement.GetPopSupportFactors]"

							item = {
								textbox = {
									layoutpolicy_horizontal = expanding
									size = { 0 20 }
									align = nobaseline
									elide = right
									fontsize_min = 12
									text = "[PoliticalMovementPopSupportFactor.GetName]"
								}
							}
						}
					}

					spacer = {
						size = { 5 5 }
					}

					### Pop List
					pop_list_gridbox = {
						blockoverride "pop_list_context" {
							datacontext = "[PoliticalMovement.GetSupportingPops]"
						}

						### UX-make a Political movement tooltip variation
						#blockoverride "tooltipwidget" {		
						#	tooltipwidget = {
						#		FancyTooltip_PopTypeState = {}
						#	}
						#}
					}	
				}

				expand = {}	
			}
		}
	}

	type movement_affected_laws_column = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		spacing = 5

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5
			margin = { 10 0 }

			block "header_background" {
				background = {
					using = fade_center_colored_green
					margin = { 5 0 }
				}
			}

			expand = {}

			icon = {
				size = { 25 25 }

				block "header_icon" {
					texture = "gfx/interface/icons/generic_icons/green_checkmark.dds"
				}
			}

			textbox = {
				autoresize = yes
				align = nobaseline
				elide = right
				fontsize_min = 12
				using = fontsize_large
				max_width = 235

				block "header_text" {
					text = "POLITICAL_MOVEMENT_AFFECTED_LAWS_SUCCESS_HEADER"
				}
			}

			expand = {}
		}

		divider_clean = {
			layoutpolicy_horizontal = expanding

			blockoverride "size" {
				size =  { 0 2 }
			}
		}

		empty_state_dynamic_width = {
			block "empty_state_visibility" {
				visible = "[IsDataModelEmpty(PoliticalMovement.GetAffectedLawsSuccess)]"
			}

			margin = { 0 15 }
			autoresize = yes
			max_width = 260
			min_width = 260
			text = "NONE"
		}

		fixedgridbox = {
			block "laws_visibility" {
				visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetAffectedLawsSuccess))]"
			}

			addrow = 50
			addcolumn = 260

			block "laws_datamodel" {
				datamodel = "[PoliticalMovement.GetAffectedLawsSuccess]"
			}

			item = {
				widget = {
					size = { 260 50 }

					button = {
						parentanchor = center
						size = { 250 45 }
						using = default_button
						onclick = "[InformationPanelBar.OpenChangeLaw(Law.AccessSelf)]"

						vbox = {
							layoutpolicy_horizontal = expanding

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 5
								margin = { 10 0 }

								tooltipwidget = {
									FancyTooltip_Law = {}
								}

								movement_law_icon = {
									size = { 35 35 }
								}

								vbox = {
									layoutpolicy_horizontal = expanding

									textbox = {
										layoutpolicy_horizontal = expanding
										autoresize = yes
										align = nobaseline
										max_width = 190
										elide = right
										fontsize_min = 14
										text = "[Law.GetNameNoFormatting]"
									}
								}

								expand = {}
							}
						}
					}
				}
			}
		}

		expand = {}
	}

	type ideology_law_group = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		background = {
			using = dark_area

			modify_texture = {
				texture = "gfx/interface/illustrations/top_illus/top_illu_mask.dds"
				spriteType = Corneredstretched
				spriteborder = { 80 80 }
				texture_density = 2
				blend_mode = alphamultiply
			}
		}

		textbox = {
			layoutpolicy_horizontal = expanding
			size = { 0 30 }
			align = hcenter|nobaseline
			text = "[LawGroup.GetName]"
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			### Endorsed - Green
			ideology_laws_list = {
				blockoverride "datamodel" {
					datamodel = "[Ideology.GetEndorsedLawsInLawGroup(LawGroup.Self)]"
				}

				background = {
					using = fade_center_colored_green
					margin = { 10 5 }
				}
			}

			box_vertical_divider = {}

			### Neutral - White
			ideology_laws_list = {
				blockoverride "datamodel" {
					datamodel = "[Ideology.GetNeutralLawsInLawGroup(LawGroup.Self)]"
				}

				background = {
					using = fade_center_colored_grey
					margin = { 10 5 }
				}
			}

			box_vertical_divider = {}

			### Opposed - Red
			ideology_laws_list = {
				blockoverride "datamodel" {
					datamodel = "[Ideology.GetOpposedLawsInLawGroup(LawGroup.Self)]"
				}

				background = {
					using = fade_center_colored_red
					margin = { 10 5 }
				}
			}
		}
	}

	type ideology_laws_list = hbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		min_width = 180

		flowcontainer = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			wrap_count = 4
			margin = { 5 5 }

			block "datamodel" {}
			
			item = {
				movement_law_icon = {}
			}
		}

		expand = {}
	}

	type movement_law_icon = widget {
		size = { 40 40 }

		icon = {
			visible = "[Law.IsActive]"
			parentanchor = center
			using = rotate_glow_animation_02
			size = { 250% 250% }
			alpha = 0.5
		}

		icon = {
			visible = "[Not(Law.IsBeingEnacted)]"
			parentanchor = center
			size = { 100% 100% }
			texture = "[Law.GetTexture]"

			tooltipwidget = {
				FancyTooltip_Law = {}
			}

			icon = {
				visible = "[Law.IsActive]"
				parentanchor = bottom|right
				position = { 2 2 }
				size = { 20 20 }
				texture = "gfx/interface/icons/generic_icons/green_checkmark.dds"

				background = {
					using = fade_center_colored
					color = { 0.1 0.1 0.1 1 }
				}
			}
		}

		icon = {
			visible = "[Law.IsBeingEnacted]"
			size = { 100% 100% }
			texture = "gfx/interface/backgrounds/round_button_bg.dds"
			tooltip = "[GetPlayer.GetLawEnactmentProgressDesc]"

			round_progress_default = {
				visible = "[GetPlayer.HasProgressingLawEnactment]"
				size = { 80% 80% }
				parentanchor = center
				datacontext = "[GetPlayer.GetLawBeingEnacted]"
				value = "[FixedPointToFloat(GetPlayer.GetLawEnactmentProgress)]"
			}

			round_progress_bad = {
				visible = "[Not(GetPlayer.HasProgressingLawEnactment)]"
				size = { 80% 80% }
				parentanchor = center
				datacontext = "[GetPlayer.GetLawBeingEnacted]"
				value = "[FixedPointToFloat(GetPlayer.GetLawEnactmentProgress)]"
			}

			law_icon = {
				alpha = "[TransparentIfTrue(Not(GetPlayer.HasProgressingLawEnactment))]"
				size = { 34 34 }
				parentanchor = center
			}

			paused_icon_bad = {
				visible = "[Not(GetPlayer.HasProgressingLawEnactment)]"
				size = { 28 28 }
				parentanchor = center
			}
		}
	}

	### AGITATORS IN MOVEMENT INFO
	type agitator_in_movement_panel = widget {
		size = { 120 165 }

		widget = {
			size = { 105 80 }
			parentanchor = bottom|hcenter

			background = {
				using = entry_bg_simple
			}
		}

		character_portrait_large = {
			parentanchor = hcenter|top
			blockoverride "show_hat" {}
			blockoverride "highlight" {}
			
			### IG ICON
			character_ig_button = {
				parentanchor = bottom|left
				size = { 38 38 }
				position = { 2 0 }
				blockoverride "in_government_icon" {}
			}
			
			### IDEOLOGY
			icon = {
				parentanchor = bottom|right
				size = { 38 38 }
				position = { -2 0 }
				datacontext = "[Character.GetIdeology]"
				texture = "[Ideology.GetTexture]"
				tooltipwidget = {
					FancyTooltip_Ideology = {}
				}
			}
		}

		widget = {
			size = { 100 150 }
			parentanchor = bottom|hcenter

			flowcontainer = {
				direction = vertical
				parentanchor = bottom|hcenter
				position = { 0 -5 }
				spacing = 3

				textbox = {
					text = "POPULARITY"
					margin_top = 2
					autoresize = yes
					using = fontsize_small
					parentanchor = hcenter
					align = nobaseline
				}

				textbox = {
					tooltip = "POPULARITY_BREAKDOWN"
					text = "CHARACTER_POPULARITY"
					max_width = 90
					margin_top = 2
					autoresize = yes
					fontsize_min = 14
					elide = right
					parentanchor = hcenter
					align = nobaseline
				}
			}
		}
	}

	### INTEREST GROUP IN MOVEMENT INFO
	type interest_group_in_movement_info = widget {
		size = { 540 70 }

		background = {
			texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
			color = "[InterestGroup.GetColor]"
			alpha = 0.3

			modify_texture = {
				using = texture_velvet
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			max_width = 520
			margin_left = 10

			### IG BUTTON
			ig_button = {
				block "ig_button_size" {
					size = { 60 60 }
				}
				using = tooltip_ws
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred

				expand = {}

				hbox = {
					layoutpolicy_horizontal = preferred
					
					textbox = {
						autoresize = yes
						align = left|nobaseline
						margin_left = 10
						size = { 0 25 }
						elide = right
						text = "INTEREST_GROUP_MOVEMENT_SUPPORT_INDIVIDUALS"
					}

					expand = {}
				}

				hbox = {
					layoutpolicy_horizontal = preferred

					textbox = {
						autoresize = yes
						align = left|nobaseline
						margin_left = 10
						size = { 0 25 }
						elide = right
						using = tooltip_se
						text = "INTEREST_GROUP_MOVEMENT_SUPPORT_CLOUT"
						tooltip = "INTEREST_GROUP_MOVEMENT_SUPPORT_CLOUT_TOOLTIP"
					}

					expand = {}
				}

				expand = {}
			}			
		}
	}

	### POLITICAL MOVEMENT TOP
	type political_movement_top_illu = top_illu {
		datacontext = "[PoliticalMovement.GetCoreIdeology]"

		### SUPPOORT & ACTIVISM
		flowcontainer = {
			parentanchor = center
			spacing = 20

			dynamicgridbox = {
				parentanchor = vcenter
				flipdirection = yes
				datamodel_wrap = 2
				datamodel = "[DataModelFirst(PoliticalMovement.GetTimedModifiers,'(int32)3')]"

				item = {
					icon = {
						parentanchor = vcenter
						size = { 30 30 }
						tooltip = "[TimedModifier.GetTooltip]"
						using = tooltip_se
						texture = "[TimedModifier.GetIcon]"
					}
				}

				textbox = {
					visible = "[GreaterThan_int32(GetDataModelSize(PoliticalMovement.GetTimedModifiers), '(int32)3')]"
					parentanchor = vcenter
					autoresize = yes
					align = nobaseline
					raw_text = "#v [GetDataModelSize(DataModelSkipFirst(PoliticalMovement.GetTimedModifiers, '(int32)3'))|=]#!"

					tooltipwidget = {
						RegularTooltip_TimedModifierList = {}
					}
				}
			}

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5
				using = tooltip_se
				tooltip = "POLITICAL_MOVEMENT_POP_SUPPORT_TOOLTIP"

				icon = {
					parentanchor = vcenter
					size = { 65 65 }
					texture = "gfx/interface/icons/generic_icons/population.dds"

					bolster_icon = {
						visible = "[PoliticalMovement.IsBolstered]"
						size = { 40 40 }
						position = { -20 -10 }
						using = tooltip_ne
					}

					suppress_icon = {
						visible = "[PoliticalMovement.IsSuppressed]"
						parentanchor = bottom
						size = { 40 40 }
						position = { -20 10 }
						using = tooltip_se
					}
				}

				textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = nobaseline
					using = fontsize_xxl
					text = "[PoliticalMovement.GetNumSupportingIndividuals|Dv]"
				}
			}

			vertical_divider = {}

			flowcontainer = {
				parentanchor = vcenter
				direction = vertical
				spacing = 5

				textbox = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					align = left|nobaseline
					elide = right
					fontsize_min = 16
					using = fontsize_large
					text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL"
				}

				textbox = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					align = left|nobaseline
					elide = right
					fontsize_min = 16
					using = fontsize_large
					text = "POLITICAL_MOVEMENT_RADICALISM_WITH_LABEL"
					alpha = "[TransparentIfZero(PoliticalMovement.GetRadicalism)]"
				}
			}
		}	
	}

	### REVOLUTIONARY POLITICAL MOVEMENT TOP
	type revolutionary_political_movement_top_illu = top_illu {

		### Revolution Clock and Law button
		widget = {
			parentanchor = center
			size = { 100% 100 }

			###REVOLUTION ANIMATION###
			state = {
				#name = _show
				name = testing
				trigger_on_create = yes
				alpha = 1
				delay = 0.2
				duration = 0.7
				on_start = "[PdxGuiWidget.FindChild('revolution_header').TriggerAnimation('show')]"
				on_start = "[PdxGuiWidget.FindChild('revolution_clock').TriggerAnimation('show')]"
			}

			state = {
				#name = _hide
				name = testing2
				#trigger_on_create = yes
				#on_start = "[PdxGuiWidget.FindChild('revolution_clock').TriggerAnimation('hide')]"
				alpha = 0
				duration = 1
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				name = revolution_header
				margin_left = 15
				spacing = 10
				alpha = 0

				state = {
					name = show
					alpha = 1
					delay = 0.45
					duration = 0.1
					using = Animation_Curve_Default
				}

				widget = {
					size = { 100 100 }
					tooltip = "POLITICAL_MOVEMENT_REVOLUTION_CLOCK_CHECKPOINT_TOOLTIP"
					using = tooltip_se

					widget = {
						name = revolution_clock
						size = { 0 0 }
						parentanchor = center

						###REVOLUTION CLOCK ANIMATION###
						state = {
							name = show
							next = 2
							delay = 0.35
							size = { 180 180 }
							duration = 0.1
							using = Animation_Curve_Default
						}

						state = {
							name = 2
							size = { 100 100 }
							delay = 0.05
							duration = 0.1
							using = Animation_Curve_EaseOut
						}

						icon = {
							using = rotate_glow_animation_02
							blockoverride "rotate_animation_texture" {
								texture = "gfx/interface/animation/color_bad.dds"
							}
							size = { 250% 250% }
							parentanchor = center
						}

						round_progress_bad = {
							parentanchor = center
							size = { 80% 80% }
							position = { 0 7 }

							value = "[FixedPointToFloat(PoliticalMovement.GetCivilWar.GetClockTime)]"
						}
						
						icon = {
							size = { 100% 100% }
							texture = "gfx/interface/backgrounds/revolution_clock_frame.dds"
						}

						icon = {
							parentanchor = center
							position = { 0 5 }
							size = { 50 50 }
							texture = "[PoliticalMovement.GetTexture]"
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5

					### REVOLUTION PROGRESSBAR ###
					hbox = {
						layoutpolicy_horizontal = expanding

						widget = {
							size = { 410 30 }
							
							revolution_progress_bar = {

								blockoverride "additional_items_after_left_text" {
									flowcontainer = {
										parentanchor = vcenter
										spacing = 2
										datamodel = "[DataModelFirst(PoliticalMovement.GetTimedModifiers,'(int32)5')]"

										item = {
											icon = {
												parentanchor = vcenter
												size = { 25 25 }
												tooltip = "[TimedModifier.GetTooltip]"
												using = tooltip_se
												texture = "[TimedModifier.GetIcon]"
											}
										}

										textbox = {
											visible = "[GreaterThan_int32(GetDataModelSize(PoliticalMovement.GetTimedModifiers), '(int32)5')]"
											parentanchor = vcenter
											autoresize = yes
											align = nobaseline
											raw_text = "#v [GetDataModelSize(DataModelSkipFirst(PoliticalMovement.GetTimedModifiers, '(int32)5'))|=]#!"

											tooltipwidget = {
												RegularTooltip = {
													blockoverride "tooltip_content" {
														flowcontainer = {
															parentanchor = hcenter
															spacing = 2
															direction = vertical

															flowcontainer = {
																parentanchor = hcenter
																direction = vertical
																datamodel = "[DataModelSkipFirst(PoliticalMovement.GetTimedModifiers, '(int32)5')]"

																item = {
																	widget = {
																		size = { 500 40 }

																		vbox = {
																			layoutpolicy_horizontal = expanding
																			layoutpolicy_vertical = expanding
																			margin = { 10 0 }

																			hbox = {
																				layoutpolicy_horizontal = expanding
																				layoutpolicy_vertical = expanding
																				tooltip = "[TimedModifier.GetTooltip]"
																				margin = { 10 0 }

																				background = {
																					using = entry_bg_simple
																				}

																				flowcontainer = {
																					spacing = 10
																					minimumsize = { -1 40 }

																					icon = {
																						parentanchor = vcenter
																						size = { 25 25 }
																						texture = "[TimedModifier.GetIcon]"
																					}

																					textbox = {
																						parentanchor = vcenter
																						autoresize = yes
																						align = nobaseline
																						max_width = 440
																						elide = right
																						fontsize_min = 12
																						text = "[TimedModifier.GetName]"
																					}
																				}

																				expand = {}

																				textbox = {
																					autoresize = yes
																					align = nobaseline
																					text = "[TimedModifier.GetRemainingDuration]"
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}

						expand = {}
					}


					hbox = {
						layoutpolicy_horizontal = expanding

						hbox = {
							spacing = 5
							using = tooltip_se
							tooltip = "POLITICAL_MOVEMENT_POP_SUPPORT_TOOLTIP"

							icon = {
								size = { 45 45 }
								texture = "gfx/interface/icons/generic_icons/population.dds"
							}

							textbox = {
								autoresize = yes
								align = nobaseline
								using = fontsize_xxl
								text = "[PoliticalMovement.GetNumSupportingIndividuals|Dv]"
							}
						}

						expand = {}

						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 2
							margin_right = 25

							hbox = {
								layoutpolicy_horizontal = expanding

								expand = {}

								textbox = {
									autoresize = yes
									align = nobaseline
									elide = right
									fontsize_min = 12
									max_width = 400
									text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL"
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								expand = {}

								textbox = {
									autoresize = yes
									align = nobaseline
									elide = right
									fontsize_min = 12
									max_width = 400
									text = "POLITICAL_MOVEMENT_RADICALISM_WITH_LABEL"
								}
							}
						}
					}
				}
			}
		}

		vfx = {
			size = { 100% 220% }

			blockoverride "entity_instance" {
				entity_instance = vfx_ui_plane_war_panel_fire_plane_entity
			}
			
			alpha = 0.2
		}
	}

	### POP LIST FOR POLITICAL MOVEMENT
	type pop_list_gridbox = dynamicgridbox {
		block "pop_list_context" {}
		datamodel = "[PopList.GetItems]"

		item = {
			flowcontainer = {
				direction = vertical
				margin = { 0 3 }

				flowcontainer = {
					direction = vertical
					spacing = 0

					background = {
						using = entry_bg
					}

					### EXPANDABLE ENTRY
					widget = {
						size = { 550 110 }
						datacontext = "[PopListItem.GetPopType]"

						flowcontainer = {
							datacontext = "[PopListItem.GetFirstPop]"
							margin_left = 5
							parentanchor = vcenter
							
							pop_portrait_simple = {

								blockoverride "portrait_button" {}
								
								size = { 100 100 }
								
								background = {
									using = pop_bg
								}
								
								blockoverride "portrait_size" {
									size = { 125 125 }
								}
							}
						}

						### DROPDOWN / EXPAND
						section_header_button = {
							parentanchor = right
							position = { 0 2 }
							size = { 440 38 }
							
							blockoverride "left_text" {
								raw_text = "#bold [PopListItem.GetPopType.GetNameNoIcon]#!"
							}
							
							blockoverride "onclick" {
								onclick = "[PopListItem.ToggleExpand]"
							}
							
							blockoverride "onclick_showmore" {
								visible = "[Not(PopListItem.IsExpanded)]"
							}

							blockoverride "onclick_showless" {
								visible = "[PopListItem.IsExpanded]"
							}

							textbox = {
								parentanchor = right|vcenter
								position = { -70 0 }
								autoresize = yes
								align = nobaseline
								using = fontsize_large
								raw_text = "#v [PopListItem.GetTotalPopSize|D]#!"
							}
							
							icon = {
								size = { 45 45 }
								position = { -15 -1 }
								parentanchor = right|vcenter
								texture = "[PopListItem.GetPopType.GetTexture]"
							}
							
							widget = {
								size = { 100% 100% }
								datacontext = "[PopListItem]"

								block "tooltipwidget" {
								
									tooltipwidget = {
										FancyTooltip_PopType = {}
									}
								}
							}
						}		
						
						widget = {
							parentanchor = right
							size = { 440 50 }
							position = { -1 52 }

							# left info
							container = {
								position = { -1 -1 }
								parentanchor = left|vcenter
								
								### LARGEST INTEREST GROUPS
								block "largest_IGs" {
									flowcontainer = {
										datamodel = "[PopListItem.AccessTwoLargestIGs]"
										spacing = 5

										item = {
											ig_button = {}
										}
									}
								}
							}

							### SUPPORT AND RADICALS
							flowcontainer = {
								spacing = 2
								parentanchor = right|vcenter
								direction = vertical

								textbox = {
									parentanchor = right
									autoresize = yes
									align = right|nobaseline
									margin_right = 10
									max_width = 240
									elide = right
									fontsize_min = 14
									text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL_POP_LIST_ITEM"
								}

								flowcontainer = {
									parentanchor = right
									spacing = 2

									icon = {
										texture = "gfx/interface/icons/generic_icons/population_radical.dds"
										size = { 26 26 }
										parentanchor = vcenter
									}

									textbox = {
										autoresize = yes
										align = nobaseline|right
										parentanchor = vcenter
										margin_right = 10
										max_width = 240
										elide = right
										fontsize_min = 14

										text = "POP_SUPPORTERS_LIST_ITEM_RADICALS_TEXT"
										tooltip = "SUPPORTING_RADICALS_TOOLTIP_POP_LIST"
										alpha = "[TransparentIfZero_int64(PopListItem.GetNumRadicals)]"
									}
								}
							}
						}
					}
					
					### "N/M Pops shown" message
					textbox = {
						visible = "[And(PopListItem.IsExpanded, Not(PopListItem.IsAllPopsShown))]"
						parentanchor = left
						widgetanchor = left
						text = "POP_LIST_NOT_ALL_POPS_SHOWN"
						autoresize = yes
						align = left|nobaseline
						margin_left = 10
						margin_bottom = 5
					}

					### EXPANDED
					# We use fixedgridbox here rather than expanded_list for a better performance with long pop lists
					fixedgridbox = {
						parentanchor = hcenter
						addcolumn = @panel_width 
						addrow = 125

						minimumsize = { @panel_width -1 }
						maximumsize = { @panel_width -1 }
						using = expanded_list_bg
						visible = "[PopListItem.IsExpanded]"
						using = default_content_fade
						datamodel = "[PopListItem.GetPops]"
							
						item = {
							container = {
								parentanchor = hcenter
								name = "tutorial_highlight_pop"
								
								widget = {
									size = { @panel_width 125 }
									visible = "[Pop.IsValid]"
									
									background = {
										using = entry_bg_simple
									}
									
									### portrait + size
									button = {
										size = { 95 110 }
										position = { 5 0 }
										parentanchor = vcenter
										using = default_button
										onclick = "[InformationPanelBar.OpenPopDetailsPanel(Pop.AccessSelf)]"
										onmousehierarchyenter = "[AccessHighlightManager.HighlightState(Pop.GetState.Self)]"
										onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

										tooltipwidget = {
											FancyTooltip_PopSupporters = {}
										}

										pop_portrait_simple = {
											position = { 0 0 }
											parentanchor = bottom|hcenter
											blockoverride "portrait_button" {
												alwaystransparent = yes
											}
										}
										textbox = {
											position = { 0 4 }

											block "pop_size_info" {
												text = "[Pop.GetPoliticalMovementSupporterCount(PoliticalMovement.Self)|Dv]"
											}

											size = { 100% 25 }
											align = center|nobaseline
											using = fontsize_large
											parentanchor = top|hcenter
											
											background = {
												using = dark_area
												margin = { -5 0 }
											}
										}
									}

									### left side
									flowcontainer = {
										position = { 110 0 }
										direction = vertical
										parentanchor = left|vcenter
										
										#total size info (for workforce panel)
										block "total_info" {}
										
										flowcontainer = {
											datacontext = "[Pop.GetCountry]"
											flowcontainer = {
												direction = vertical
												
												#culture
												button = {
													size = { 200 27 }
													using = clean_button
													onclick = "[InformationPanelBar.OpenCultureInfoPanel(Pop.AccessCulture)]"
													
													datacontext = "[Pop.GetCulture]"
													tooltipwidget = {
														FancyTooltip_Culture = {}
													}
													
													textbox = {
														size = { 100% 100% }
														text = "[Pop.GetCulture.GetName]"
														elide = right
														align = left|nobaseline
														margin = { 10 0 }
													}
												}
												
												#religion
												button = {
													size = { 200 27 }
													using = clean_button
													onclick = "[InformationPanelBar.OpenReligionInfoPanel(Pop.AccessReligion)]"
													
													datacontext = "[Pop.GetReligion]"
													tooltipwidget = {
														FancyTooltip_Religion = {}
													}
													
													icon = {
														size = { 25 25 }
														
														texture = "[Religion.GetTexture]"
														parentanchor = right|vcenter
														position = { -3 0 }
													}
															
													textbox = {
														size = { 100% 100% }
														text = "[Pop.GetReligion.GetName]"
														elide = right
														align = left|nobaseline
														margin = { 10 0 }
														margin_right = 30
													}
												}
											}
											
											pop_acceptance_icon = {
												parentanchor = vcenter
												size = { 40 40 }
											}

										}
										
										block "building_and_state" {
											button = {
												size = { 200 27 }
												using = clean_button
												onclick = "[InformationPanelBar.OpenStatePanel(Pop.AccessState)]"
														
												textbox = {
													size = { 85% 100% }
													text = "[Pop.GetState.GetName]"
													elide = right
													align = left|nobaseline
													margin = { 10 0 }
												}

												tiny_flag_no_interact = {
													datacontext = "[Pop.GetState.GetCountry]"
													parentanchor = right|vcenter
													position = { -5 0 }
												}

												tooltipwidget = {
													FancyTooltip_State = {
														datacontext = "[Pop.GetState]"
													}
												}
											}
												
											button = {
												visible = "[Pop.IsEmployed]"
												size = { 200 27 }
												using = clean_button
												onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Pop.AccessBuilding)]"

												tooltipwidget = {
													FancyTooltip_Building = {
														datacontext = "[Pop.GetBuilding]"
													}
												}
												
												textbox = {
													margin_right = 35
													margin_left = 10
													text = "[Pop.GetBuilding.GetName]"
													size = { 100% 100% }
													align = nobaseline
													elide = right
													parentanchor = vcenter
												}
												icon = {
													position = { -5 0 }
													size = { 22 22 }
													texture = "[Pop.GetBuilding.GetIcon]"
													parentanchor = right|vcenter
												}
											}
											
											textbox = {
												size = { 200 27 }
												text = "UNEMPLOYED"
												align = left|nobaseline
												visible = "[Not(Pop.IsEmployed)]"
												margin = { 10 0 }
												alpha = 0.5
												elide = right
											}
										}
									}
									
									### right side
									flowcontainer = {
										direction = vertical
										parentanchor = right|vcenter
										spacing = 2

										textbox = {
											autoresize = yes
											align = nobaseline|right
											parentanchor = right
											margin_right = 10
											max_width = 240
											elide = right
											fontsize_min = 14

											text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL_POP"
											tooltip = "POLITICAL_MOVEMENT_SUPPORT_TOOLTIP_POP"
										}
										
										###IG
										flowcontainer = {
											parentanchor = right
											margin_right = 10
											spacing = 5
										
											datacontext = "[Pop.GetLargestInterestGroup]"
										
											textbox = {
												tooltip = POP_IG_ATTRACTION_HEADER_NO_CLICK
												visible = "[Pop.GetLargestInterestGroup.IsValid]"
												text = "[Pop.GetLargestInterestGroup.GetNameNoIcon]"
												size = { 145 20 }
												elide = right
												align = right|nobaseline
												parentanchor = vcenter
											}
											textbox = {
												visible = "[Not(Pop.GetLargestInterestGroup.IsValid)]"
												text = "POLITICALLY_UNALIGNED"
												tooltip = POP_IG_INACTIVE_HEADER
												size = { 145 20 }
												elide = right
												align = right|nobaseline
												parentanchor = vcenter
											}
											
											ig_button = {
												size = { 25 25 }
												blockoverride "powerful_visibility" {
													visible = "[Pop.GetLargestInterestGroup.IsPowerful]"
												}
												blockoverride "onclick" {
													onclick = "[InformationPanelBar.OpenInterestGroupPanel(Pop.GetLargestInterestGroup.Self)]"
												}
												blockoverride "tooltip" {
													tooltip = POP_IG_ATTRACTION_HEADER
												}
											}	
										}

										textbox = {
											autoresize = yes
											align = nobaseline|right
											parentanchor = right
											margin_right = 10
											max_width = 240
											elide = right
											fontsize_min = 14

											text = "POP_SUPPORTERS_RADICALS_TEXT"
											tooltip = "SUPPORTING_RADICALS_TOOLTIP_POP"
											alpha = "[TransparentIfZero_int64(Pop.GetPoliticalMovementSupportersRadicals(PoliticalMovement.Self))]"
										}

										textbox = {
											autoresize = yes
											align = nobaseline|right
											parentanchor = right
											margin_right = 10
											max_width = 240
											elide = right
											fontsize_min = 14

											text = "POP_SUPPORTERS_LITERACY_TEXT"
											tooltip = "POP_POPULATION_LITERACY"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
