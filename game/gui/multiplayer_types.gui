### this is an imported file. please make as little changes to this file as possible.
### when you make a change please mark it very clearly using a pair of comment lines with the text '### v3' and '### to here'
### texture paths and audio event ids are an exception to this and can be changed without marking

types JominiServerBrowser {

	type JominiMultiplayerPushButton = button {
		block "jomini_multiplayer_push_button"
		{
			texture = "gfx/editor_gui/editor_button.dds"
			gfxtype = framedbuttongfx
			spriteType = CorneredStretched
			spriteborder = { 4 4 }
			effectname = "NoHighlight"
			framesize = { 16 16 }
			upframe = 1
			downframe = 2
			overframe = 3
			disableframe = 4
			intersectionmask = yes
		}
	}

	type JominiServerBrowserWindow = window {
		name = "JominiServerBrowser"
		size = { 955 92% }

		movable = no

		state = {
			name = _show

			using = Animation_FadeIn_Standard
			using = Sound_WindowShow_Standard
		}

		state = {
			name = _hide

			using = Animation_FadeOut_Standard
			using = Sound_WindowHide_Standard
		}

		block "serverbrowser_background" {}

		vbox = {
			spacing = 5
			using = Window_Margins_Sidebar
			margin_right = 20

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "JOMINI_MULTIPLAYER_SERVER_BROWSER_HEADER"
				}

				blockoverride "button_close" {
					visible = no
				}
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_top = 15
				margin_left = 10
				spacing = 10

				### PUBLIC GAME ###
				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5
					margin = { 5 0 }
					margin_right = 10

					text_single = {
						text = "JOMINI_MULTIPLAYER_PUBLIC_GAMES"
						layoutpolicy_horizontal = expanding
						align = left
						default_format = "#low"
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 20

						JominiMultiplayerCheckbutton = {
							blockoverride "checkbutton"
							{
								onclick = "[JominiServerBrowserGui.ToggleHasPasswordFilter]"
								checked = "[Not( JominiServerBrowserGui.IsHasPasswordFilterSet )]"
							}

							blockoverride "label"
							{
								text = "JOMINI_MULTIPLAYER_GUI_SERVER_FILTER_LABEL_HAS_PASSWORD"
								align = nobaseline
							}
						}

						JominiMultiplayerCheckbutton = {
							blockoverride "checkbutton"
							{
								onclick = "[JominiServerBrowserGui.ToggleSameVersionFilter]"
								checked = "[JominiServerBrowserGui.IsSameVersionFilterSet]"
							}

							blockoverride "label"
							{
								text = "FILTER_SAME_VERSION"
								align = nobaseline
							}
						}

						JominiMultiplayerCheckbutton = {
							visible = "[JominiMultiplayerIsCrossplayFilterAvailable]"

							blockoverride "checkbutton"
							{
								onclick = "[JominiServerBrowserGui.ToggleCrossPlatformFilter]"
								checked = "[Not(JominiServerBrowserGui.IsCrossPlatformFilterSet)]"
								enabled = "[JominiMultiplayerIsCrossplayEnabled]"
							}

							blockoverride "label"
							{
								text = "JOMINI_MULTIPLAYER_GUI_SERVER_FILTER_LABEL_CROSSPLAY_ENABLED"
								align = nobaseline
							}
						}

						editbox_search_field = {
							layoutpolicy_horizontal = expanding
							blockoverride "editbox_properties"
							{
								name = "game_name_filter_editbox" #not used in code
								ontextedited = "[JominiServerBrowserGui.OnFilterTextEdit]"
								focus_on_visible = yes
							}
						}

						button_group = {
							onclick = "[JominiServerBrowserGui.RefreshServers]"

							hbox = {
								spacing = 5
								text_single = {
									text = "REFRESH"
									align = nobaseline
								}

								button_change = {
									name = "scan_button"
								}
							}
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5
					margin_top = 20
					margin_left = 10

					### SERVER/GAME NAME ###
					button_standard_list = {
						size = { 260 33 }
						onclick = "[JominiServerBrowserGui.Sort( 'name' )]"
						tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_SERVER_NAME"
						using = tooltip_ne

						hbox = {
							spacing = 5
							margin_left = 10

							text_single = {
								layoutpolicy_vertical = expanding
								align = nobaseline
								text = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_LABEL_SERVER_NAME"
								max_width = 250
							}

							expand = {}

							vbox = {
								layoutpolicy_vertical = expanding

								JominiMultiplayerSortButtonAsc = {
									visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'name' ) )]"
								}

								JominiMultiplayerSortButtonDesc = {
									visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'name' ) )]"
								}
							}
						}
					}

					### PLAYERS ###
					button_standard_list = {
						size = { 140 33 }
						onclick = "[JominiServerBrowserGui.Sort( 'players_count' )]"
						tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_PLAYERS"
						using = tooltip_ne

						hbox = {
							spacing = 5
							margin_left = 10

							text_single = {
								layoutpolicy_vertical = expanding
								align = nobaseline
								text = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_LABEL_PLAYERS"
							}

							expand = {}

							vbox = {
								layoutpolicy_vertical = expanding

								JominiMultiplayerSortButtonAsc = {
									visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'players_count' ) )]"
								}

								JominiMultiplayerSortButtonDesc = {
									visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'players_count' ) )]"
								}
							}
						}
					}

					### STATUS ###
					button_standard_list = {
						size = { 150 33 }
						onclick = "[JominiServerBrowserGui.Sort( 'status' )]"
						tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_STATUS"
						using = tooltip_ne

						hbox = {
							spacing = 5
							margin = { 5 0 }

							text_single = {
								layoutpolicy_vertical = expanding
								align = nobaseline
								text = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_LABEL_STATUS"
							}

							expand = {}

							vbox = {
								layoutpolicy_vertical = expanding

								JominiMultiplayerSortButtonAsc = {
									visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'status' ) )]"
								}

								JominiMultiplayerSortButtonDesc = {
									visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'status' ) )]"
								}
							}
						}
					}

					### CHECKSUM ###
					button_standard_list = {
						size = { 145 33 }
						onclick = "[JominiServerBrowserGui.Sort( 'version' )]"
						tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_VERSION"
						using = tooltip_ne

						hbox = {
							spacing = 5
							margin_left = 10

							text_single = {
								layoutpolicy_vertical = expanding
								minimumsize = { 70 0 }
								align = nobaseline
								text = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_LABEL_VERSION"
							}

							expand = {}

							vbox = {
								layoutpolicy_vertical = expanding

								JominiMultiplayerSortButtonAsc = {
									visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'version' ) )]"
								}

								JominiMultiplayerSortButtonDesc = {
									visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'version' ) )]"
								}
							}
						}
					}

					### PASSWORD ###
					button_standard_list = {
						size = { 80 33 }
						onclick = "[JominiServerBrowserGui.Sort( 'has_password' )]"
						tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_SORT_TT_PASSWORD"
						using = tooltip_ne

						hbox = {
							margin_left = 10

							icon_has_password = {}

							expand = {}

							vbox = {
								layoutpolicy_vertical = expanding

								JominiMultiplayerSortButtonAsc = {
									visible = "[And( JominiServerBrowserGui.IsSortAscending, JominiServerBrowserGui.IsSortedBy( 'has_password' ) )]"
								}

								JominiMultiplayerSortButtonDesc = {
									visible = "[And( Not( JominiServerBrowserGui.IsSortAscending ), JominiServerBrowserGui.IsSortedBy( 'has_password' ) )]"
								}
							}
						}
					}

					spacer = {
						size = { 110 1 }
					}
				}

				scrollbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					blockoverride "scrollbox_content"
					{
						vbox = {
							datamodel = "[JominiServerBrowserGui.AccessServers]"
							layoutpolicy_horizontal = expanding
							spacing = 5

							item = {
								hbox = {
									layoutpolicy_horizontal = expanding

									### v3 action button
									button = {
										using = default_button_action
										size = { 170 33 }
									#button_standard_clean = {
										layoutpolicy_horizontal = expanding
										onclick = "[JominiServer.Join]"
										tooltip_enabled = "[Not(JominiServer.IsSameVersion)]"
										tooltip = "JOMINI_MULTIPLAYER_GUI_VERSION_MISMATCH_SERVER_BROWSER"
										enabled = "[JominiServer.IsSameVersion]"

										hbox = {
											layoutpolicy_horizontal = expanding
											spacing = 5

											widget = {
												size = { 255 33 }

												hbox = {
													margin_left = 10

													text_single = {
														layoutpolicy_horizontal = expanding
														autoresize = no
														align = left|nobaseline
														text = "[JominiServer.GetName]"
														default_format = "#high"
													}
												}
											}

											widget = {
												size = { 140 33 }

												hbox = {
													margin_left = 10

													text_single = {
														layoutpolicy_horizontal = expanding
														autoresize = no
														align = left|nobaseline
														text = "[JominiServer.GetNumPlayers] / [JominiServer.GetMaxPlayers]"
														default_format = "#high"
													}
												}
											}

											widget = {
												size = { 140 33 }

												hbox = {
													margin_left = 10

													text_single = {
														layoutpolicy_horizontal = expanding
														autoresize = no
														align = left|nobaseline
														text = "[JominiServer.GetStatus]"
														default_format = "#high"
													}
												}
											}

											### CHECKSUM ###
											widget = {
												size = { 150 33 }

												hbox = {
													margin_left = 10

													text_single = {
														layoutpolicy_horizontal = expanding
														autoresize = no
														align = left|nobaseline
														text = "[JominiServer.GetVersion]"
														default_format = "#high"
													}
												}
											}

											widget = {
												size = { 50 33 }

												hbox = {
													margin_left = 10

													icon_has_password = {
														visible = "[JominiServer.GetHasPassword]"
														tooltip = "JOMINI_MULTIPLAYER_GUI_SERVER_PASSWORD_PROTECTED_TOOLTIP"
													}

													expand = {}
												}
											}

											widget = {
												size = { 115 33 }

												hbox = {
													layoutpolicy_horizontal = expanding
													margin_right = 5
													margin_left = 10

													expand = {}

													text_single = {
														align = left|nobaseline
														max_width = 80

														text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_JOIN_BUTTON_IN_LIST"
														default_format = "#high"
													}

													widget = {
														size = { 20 20 }
														allow_outside = yes

														button_play = {
															parentanchor = center
															alwaystransparent = yes
														}
													}
												}
											}

											expand = {
												layoutpolicy_horizontal = expanding
											}
										}
									}
								}
							}
						}
					}

					blockoverride "scrollbox_empty"
					{
						text = "JOMINI_MULTIPLAYER_SERVER_BROWSER_EMPTY"
						layoutpolicy_vertical = expanding
						visible = "[Or( IsDataModelEmpty( JominiServerBrowserGui.AccessServers ), JominiServerBrowserGui.IsRefreshing )]"
					}
				}

				### PRIVATE GAME ####
				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5
					margin = { 5 0 }

					text_single = {
						text = "JOMINI_MULTIPLAYER_JOIN_PRIVATE_GAMES"
						layoutpolicy_horizontal = expanding
						align = left
						default_format = "#low"
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						JominiMultiplayerTextbox = {
							text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_ID_LABEL"
							autoresize = yes
							default_format = "#medium"
						}

						editbox_standard = {
							layoutpolicy_horizontal = expanding
							blockoverride "editbox_properties"
							{
								name = "server_id_editbox"
							}
						}

						button_copy = {
							onclick = "[JominiServerBrowserGui.SetServerId]"
							tooltip = "JOIN_MULTIPLAYER_PASTE_SERVER_ID"
						}

						### v3 action button
						button = {
							using = default_button_action
							size = { 170 33 }
						#button_standard = {
							text = "JOIN"
							minimumsize = { 220 0 }
							onclick = "[JominiServerBrowserGui.JoinServerWithId]"
							block "serverbrowser_join_server" {}
						}
					}

				}
			}
		}
	}

	type JominiJoinServerDialogWindow = window {
		name = "JominiJoinServerDialog"
		modal = yes
		modality = all

		position = { 0 0 }
		parentanchor = center
		widgetanchor = center

		size = { 300 75 }
		using = Window_Background_Popup

		vbox = {
			spacing = 10
			restrictparent_min = yes
			using = Window_Margins


			hbox = {
				spacing = 10
				layoutpolicy_horizontal = expanding

				JominiMultiplayerTextbox = {
					text = "JOMINI_MULTIPLAYER_GUI_POPUP_PASSWORD"
					autoresize = yes
				}

				editbox_standard = {
					layoutpolicy_horizontal = expanding

					blockoverride "editbox_properties"
					{
						onreturnpressed = "[JominiPasswordPopup.OnSubmit]"
						name = "password"
					}
				}
			}

			expand = {}

			hbox = {
				spacing = 10
				layoutpolicy_horizontal = expanding

				button_standard = {
					text = "JOMINI_MULTIPLAYER_GUI_POPUP_DECLINE"
					layoutpolicy_horizontal = expanding

					onclick = "[JominiPasswordPopup.OnDecline]"
					shortcut = close_window
				}

				button_primary = {
					text = "JOMINI_MULTIPLAYER_GUI_POPUP_SUBMIT"
					layoutpolicy_horizontal = expanding

					onclick = "[JominiPasswordPopup.OnSubmit]"
				}
			}
		}
	}
}

types JominiMultiplayerIngame {
	type JominiMultiplayerJoinRequest = window {
		name = "multiplayer_join_request_dialog"
		visible = "[JominiHasPlayerJoinRequests]"
		layer = confirmation

		size = { 800 300 }
		widgetanchor = center
		parentanchor = center

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		using = Window_Background_Popup

		vbox = {
			using = Window_Margins
			spacing = 10

			header_standard = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "JOMINI_MULTIPLAYER_GUI_PLAYER_JOIN_REQUEST"
				}

				blockoverride "button_close"
				{
					visible = no
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						datamodel = "[JominiAccessPlayerJoinRequests]"

						item = {
							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = fixed
								#max_width = 100
								spacing = 5
								margin = { 0 2 }

								text_single = {
									text = "[PlayerJoinRequest.GetPlayerName]"
									autoresize = yes
									max_width = 350
									layoutpolicy_horizontal = expanding
									fontsize_min = 14
									elide = right
								}

								expand = {}

								button_standard = {
									name = "reject_button"
									text = "JOMINI_MULTIPLAYER_GUI_PLAYER_JOIN_REQUEST_REJECT"
									onclick = "[PlayerJoinRequest.Reject]"
									layoutpolicy_horizontal = fixed
								}

								button_primary = {
									name = "accept_button"
									text = "JOMINI_MULTIPLAYER_GUI_PLAYER_JOIN_REQUEST_ACCEPT"
									onclick = "[PlayerJoinRequest.Accept]"
								}
							}
						}
					}
				}
			}
		}
	}

	type JominiMultiplayerOosMessage = window {
		name = "multiplayer_oos_message"
		using = Window_Background_Popup
		size = { 600 700 }
		parentanchor = center
		visible = "[DataModelHasItems( OosWindow.GetOosData )]"

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			margin = { 10 10 }
			spacing = 5

			text_single = {
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_HEADER"
				autoresize = yes
			}

			text_multi = {
				margin = { 50 0 }
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_MY"
				minimumsize = { 0 50 }
				visible = "[OosWindow.IsLocalOos]"
				layoutpolicy_horizontal = expanding
			}

			text_multi = {
				margin = { 50 0 }
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_DESC"
				visible = "[Not( OosWindow.IsLocalOos )]"
				minimumsize = { 0 50 }
				layoutpolicy_horizontal = expanding
			}

			text_single = {
				margin = { 50 0 }
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_DESC_LOCAL"
				visible = "[OosWindow.IsLocalOos]"
				layoutpolicy_horizontal = expanding
			}

			scrollarea = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				scrollbarpolicy_horizontal = always_off

				scrollbar_vertical = {
					using = editor_vertical_scrollbar
				}

				scrollwidget = {
					vbox = {
						vbox = {
							margin = { 5 5 }
							layoutpolicy_horizontal = expanding
							datamodel = "[OosWindow.GetOosData]"

							item = {
								vbox = {
									block "oos_item" {
										layoutpolicy_horizontal = expanding

										text_single = {
											text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_PLAYER_NAME"
											max_width = 490
											autoresize = yes
											layoutpolicy_horizontal = expanding
										}

										text_single = {
											text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_TYPE"
											max_width = 490
											autoresize = yes
											layoutpolicy_horizontal = expanding
										}

										text_single = {
											text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_FOLDER"
											max_width = 490
											autoresize = yes
											layoutpolicy_horizontal = expanding
										}
									}
								}
							}
						}

						expand = {}
					}
				}
			}

			button_standard = {
				size = { 300 30 }
				datacontext = "[OosWindow]"
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_CONTINUE"
				onclick = "[OosWindow.Continue]"
			}

			button_standard = {
				size = { 300 30 }
				datacontext = "[OosWindow]"
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_RESYNC"
				visible = "[OosWindow.IsMultiplayerHost]"
				onclick = "[OosWindow.Resync]"
            }

			button_standard = {
				size = { 300 30 }
				text = "JOMINI_MULTIPLAYER_GUI_OOS_MESSAGE_EXIT_BUTTON"
				onclick = "[OosWindow.GoToMenu]"
			}
		}
	}
}

types JominiMultiplayerFrontend
{
	type JominiMultiplayerFrontendView = widget {
		# visible = no
		### moved to serverbrowserwindow
		name = "JominiMultiplayerView"
		size = { 100% 100% }

		block "background" {}

		block "states" {}

		block "menu"
		{
			flowcontainer = {
				block "menu_properties"
				{
					direction = vertical
				}

				block "menu_items"
				{
					JominiMultiplayerFrontEndButton = {
						onclick = "[FrontEndMultiplayerView.OnBack]"
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_BACK_BUTTON"
					}

					JominiMultiplayerFrontEndButton = {
						onclick = "[FrontEndMultiplayerView.OnLoad]"
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_LOAD_AND_HOST_BUTTON"
					}

					JominiMultiplayerFrontEndButton = {
						onclick = "[FrontEndMultiplayerView.OnHost]"
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_HOST_BUTTON"
					}

					JominiMultiplayerFrontEndButton = {
						onclick = "[JominiServerBrowserGui.RefreshServers]"
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_BROWSER_SCAN_BUTTON"
					}

				}
			}
		}
	}
}

types JominiMultiplayerSetup {
	type JominiMultiplayerSetupEditBox = editbox {
		align = left
		alwaystransparent = no
		focuspolicy = all
		block "setup_editbox" {
			cursorcolor = { 1 1 1 0.6 }
			maxcharacters = 255
			default_format = "#medium"
			#fontsize = 14

			background = {
				using = Background_Area_Border_Solid
			}
		}
	}

	type JominiMultiplayerSetupTextBox = text_single {}

	type JominiMultiplayerSetupCheckButton = hbox {
		layoutpolicy_horizontal = expanding
		spacing = 10
		margin_left = 10

		button_checkbox = {
			size = { 20 20 }
			block "checkbutton" {}
		}

		JominiMultiplayerSetupTextBox = {
			layoutpolicy_horizontal = expanding
			align = nobaseline
			block "label"
			{
				visible = no
			}
		}
	}

	type JominiMultiplayerSetup = window {
		name = "JominiMultiplayerSetupWindow"

		size = { 420 450 }
		parentanchor = center
		widgetanchor = center

		alwaystransparent = no

		using = Window_Background
		using = Window_Decoration

		vbox = {
			using = Window_Margins

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 10 }
				spacing = 20

				text_label_center = {
					layoutpolicy_horizontal = expanding
					text = "JOMINI_MULTIPLAYER_GUI_SHOW_SETTINGS"
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					JominiMultiplayerSetupCheckButton = {
						blockoverride "checkbutton"
						{
							name = "mpconfig_offline"
							checked = "[MultiplayerSetupWindow.GetMPConfig.IsOffline]"
							onclick = "[MultiplayerSetupWindow.AccessMPConfig.SetOffline]"
							tooltip = "[MultiplayerSetupWindow.GetMPConfig.GetPrivateToolTip]"
							enabled = "[JominiIsMultiplayerAccessible]"
						}

						blockoverride "label"
						{
							text = "JOMINI_MULTIPLAYER_GUI_GAME_MODE_OFFLINE"
						}
					}

					JominiMultiplayerSetupCheckButton = {
						blockoverride "checkbutton"
						{
							name = "mpconfig_private"
							checked = "[MultiplayerSetupWindow.GetMPConfig.IsPrivate]"
							onclick = "[MultiplayerSetupWindow.AccessMPConfig.SetPrivate]"
							tooltip = "[MultiplayerSetupWindow.GetMPConfig.GetPrivateToolTip]"
							enabled = "[JominiIsMultiplayerAccessible]"
						}

						blockoverride "label"
						{
							text = "JOMINI_MULTIPLAYER_GUI_PRIVATE"
						}

						tooltip = JOMINI_MULTIPLAYER_GUI_PRIVATE_TT
					}

					JominiMultiplayerSetupCheckButton = {
						blockoverride "checkbutton"
						{
							name = "mpconfig_public"
							checked = "[MultiplayerSetupWindow.GetMPConfig.IsPublic]"
							onclick = "[MultiplayerSetupWindow.AccessMPConfig.SetPublic]"
							tooltip = "[MultiplayerSetupWindow.GetMPConfig.GetPublicToolTip]"
							enabled = "[JominiIsMultiplayerAccessible]"
						}

						blockoverride "label"
						{
							text = "JOMINI_MULTIPLAYER_GUI_PUBLIC"
						}

						tooltip = JOMINI_MULTIPLAYER_GUI_PUBLIC_TT
					}
				}

				vbox = {
					spacing = 10
					layoutpolicy_horizontal = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						JominiMultiplayerSetupTextBox = {
							text = "JOMINI_MULTIPLAYER_GUI_SERVER_NAME_LABEL"
							layoutpolicy_horizontal = expanding
							visible = "[Not(MultiplayerSetupWindow.GetMPConfig.IsOffline)]"
						}

						#should be editbox_standard if we ever use this window

						JominiMultiplayerSetupEditBox = {
							name = "game_name"
							minimumsize = { 160 30 }
							max_width = 160
							text = "[MultiplayerSetupWindow.GetDefaultServerName]"
							visible = "[Not(MultiplayerSetupWindow.GetMPConfig.IsOffline)]"
							layoutpolicy_horizontal = expanding
							onreturnpressed = "[MultiplayerSetupWindow.Host]"
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						JominiMultiplayerSetupTextBox = {
							text = "JOMINI_MULTIPLAYER_GUI_SERVER_PASSWORD_LABEL"
							layoutpolicy_horizontal = expanding
							visible = "[Not(MultiplayerSetupWindow.GetMPConfig.IsOffline)]"
						}

						#should be editbox_standard if we ever use this window
						JominiMultiplayerSetupEditBox = {
							name = "game_password"
							minimumsize = { 160 30 }
							max_width = 160
							text = "[MultiplayerSetupWindow.GetDefaultServerPassword]"
							layoutpolicy_horizontal = expanding
							visible = "[Not(MultiplayerSetupWindow.GetMPConfig.IsOffline)]"
							onreturnpressed = "[MultiplayerSetupWindow.Host]"
						}

					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding

					JominiMultiplayerSetupCheckButton = {
						visible = "[MultiplayerSetupWindow.GetMPConfig.IsPrivate]"

						blockoverride "checkbutton"
						{
							name = "hotjoin_autoaccept"
							checked = "[MultiplayerSetupWindow.GetMPConfig.IsHotjoinAutoAccept]"
							onclick = "[MultiplayerSetupWindow.AccessMPConfig.ToggleHotjoinAutoAccept]"
							enabled = "[JominiIsMultiplayerAccessible]"
						}

						blockoverride "label"
						{
							autoresize = yes
							text = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT"
						}

						tooltip = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT_TT"
					}

					JominiMultiplayerSetupCheckButton = {
						visible = "[JominiMultiplayerIsCrossplayFilterAvailable]"

						blockoverride "checkbutton"
						{
							name = "crossplay_status"
							enabled = "[JominiMultiplayerIsCrossplayEnabled]"
						}

						blockoverride "label"
						{
							autoresize = yes
							text = "JOMINI_MULTIPLAYER_GUI_SERVER_FILTER_LABEL_CROSSPLAY_ENABLED"
						}
					}
				}


				expand = {}

				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5

					button_primary = {
						name = "host_button"
						layoutpolicy_horizontal = expanding
						text = "JOMINI_MULTIPLAYER_GUI_SESSION_HOST"
						onclick = "[MultiplayerSetupWindow.Host]"
						enabled = "[MultiplayerSetupWindow.CanHost]"
						tooltip = "[MultiplayerSetupWindow.HostToolTip]"
					}

					button_standard = {
						name = "cancel_button"
						layoutpolicy_horizontal = expanding
						text = "JOMINI_MULTIPLAYER_GUI_SESSION_CANCEL"
						onclick = "[MultiplayerSetupWindow.Cancel]"
						shortcut = "close_window"
					}
				}
			}
		}
	}
}

template JominiLobbyViewModuleBackground {
	block "lobby_module_background"
	{
		# shaderfile = "gfx/FX/pdxgui_default.shader"
		# texture = "gfx/editor_gui/editor_field.dds"
		# spriteType = CorneredStretched
		# spriteborder = { 6 6 }
	}
}

types JominiMultiplayerLobby
{
	# Button Style
	type JominiLobbyViewButton = button_standard {
	}

	type JominiLobbyRemovePlayer = button {
		enabled = "[LobbyPlayer.CanRemovePlayer]"
		visible = "[LobbyPlayer.CanRemovePlayer]"

		onclick = "[LobbyPlayer.RemovePlayer]"

		block "remove_player_button_style"
		{
			layoutpolicy_horizontal = fixed
			size = { 20 20 }

			texture = "gfx/editor_gui/editor_button.dds"
			gfxtype = framedbuttongfx
			spriteType = CorneredStretched
			spriteborder = { 4 4 }
			effectname = "NoHighlight"
			framesize = { 16 16 }
			upframe = 1
			downframe = 2
			overframe = 3
			disableframe = 4
			intersectionmask = yes
			raw_text = "K"
		}
	}

	type JominiLobbyViewServerInfoEntry = button {
		block "server_info_entry_size"
		{
			size = { 0 20 }
			layoutpolicy_horizontal = expanding
		}

		block "server_info_entry_styling"
		{
			align = left
			using = Font_Type_Standard
			using = Font_Size_Small
			default_format = "#high"
			margin = { 5 5 }

			background = {
				using = Background_Area
			}
		}
	}

	# Hosting status
	type JominiLobbyViewHostingStatus = vbox {
		margin = { 10 5 }
		layoutpolicy_horizontal = expanding
		visible = "[LobbyView.ShowHosting]"

		background = {
			using = Background_Area
		}

		JominiMultiplayerSetupTextBox = {
			text = "JOMINI_MULTIPLAYER_GUI_HOSTING"
			layoutpolicy_horizontal = expanding
		}
	}

	# Error information
	type JominiLobbyViewHostError = vbox {
		visible = "[HasHostError]"
		layoutpolicy_horizontal = expanding
		margin = { 10 10 }
		spacing = 25

		background = {
			using = Background_Area
		}

		text_multi = {
			layoutpolicy_horizontal = expanding
			autoresize = yes
			text = "[GetHostError]"
			default_format = "#X"
		}

		button_standard = {
			text = "JOMINI_MULTIPLAYER_GUI_CLOSE"
			onclick = "[ClearHostError]"
		}
	}

	type JominiLobbyExpandButton = button_expand {
	}

	type JominiLobbyCollapseButton = button_expand {
		frame = 2
	}

	# The MP info widget displays the multiplayer information
	type JominiLobbyViewMPInfo = vbox {
		name = "mp_info"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding

		alwaystransparent = no
		filter_mouse = left|right

		block "mp_info_properties" {
			margin_top = 10
			spacing = 10

			background = {
				using = JominiLobbyViewModuleBackground
			}
		}

		text_label_center = {
			layoutpolicy_horizontal = expanding
			align = center|nobaseline
			margin = { 0 5 }
			text = "JOMINI_MULTIPLAYER_GUI_VISIBILITY"
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10
			margin_left = 10

			tooltip = JOMINI_MULTIPLAYER_GUI_PRIVATE_TT

			button_radio = {
				visible = "[Not(LobbyView.GetServerInfo.IsInvite)]"
				onclick = "[LobbyView.SetInvite]"
			}

			button_radio = {
				visible = "[LobbyView.GetServerInfo.IsInvite]"
				frame = 2
			}

			text_single = {
				text = "JOMINI_MULTIPLAYER_GUI_PRIVATE"
				align = nobaseline
			}

			expand = {}
		}

		hbox = {
			visible = "[JominiMultiplayerIsCrossplayFilterAvailable]"
			layoutpolicy_horizontal = expanding
			spacing = 10
			margin_left = 10

			tooltip = LOBBYVIEW_NO_CROSSPLAY_TOOLTIP

			button_radio = {
				visible = "[Not(LobbyView.GetServerInfo.IsPublic)]"
				onclick = "[LobbyView.SetPublicNoCrossplay]"
			}

			button_radio = {
				visible = "[LobbyView.GetServerInfo.IsPublic]"
				frame = 2
			}

			text_single = {
				text = "LOBBYVIEW_NO_CROSSPLAY"
				align = nobaseline
			}

			expand = {}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10
			margin_left = 10

			tooltip = JOMINI_MULTIPLAYER_GUI_PUBLIC_TT

			button_radio = {
				visible = "[Not(LobbyView.GetServerInfo.IsPublic)]"
				onclick = "[LobbyView.SetPublicCrossplay]"
				enabled = "[Or(Not(JominiMultiplayerIsCrossplayFilterAvailable), JominiMultiplayerIsCrossplayEnabled)]"
			}

			button_radio = {
				visible = "[LobbyView.GetServerInfo.IsPublic]"
				frame = 2
			}

			text_single = {
				text = "JOMINI_MULTIPLAYER_GUI_PUBLIC"
				align = nobaseline
			}

			expand = {}
		}

		vbox = {
			spacing = 10
			layoutpolicy_horizontal = expanding
			restrictparent_min = yes
			block "setup_hbox_height" {}

			text_label_center = {
				layoutpolicy_horizontal = expanding
				align = center|nobaseline
				margin = { 0 5 }
				text = "JOMINI_MULTIPLAYER_GUI_GAME_SETTINGS"
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 20
				margin_left = 10
				margin_right = 10

				visible = "[Not(LobbyView.GetServerInfo.IsInvite)]"

				editbox_standard_with_label = {
					layoutpolicy_horizontal = expanding
					blockoverride "editbox_label"
					{
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_NAME"
					}

					blockoverride "editbox_properties"
					{
						name = "game_name"
						text = "[LobbyView.GetServerInfo.GetServerName]"
						onreturnpressed = "[LobbyView.SetName]"
						ontextedited = "[LobbyView.OnNameEdit]"
						enabled = "[CanEditSettingsAfterHost]"
					}
				}

				vbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = expanding
					expand = {}

					button_icon_check = {
						size = { 30 30 }
						visible = "[CanEditSettingsAfterHost]"
						onclick = "[LobbyView.SetPassword]"
						tooltip = "JOMINI_MULTIPLAYER_GUI_CHANGE_SERVER_NAME"
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 20
				margin_left = 10
				margin_right = 10
				visible = "[JominiIsHostOrLocal]"

				editbox_standard_with_label = {
					layoutpolicy_horizontal = expanding
					blockoverride "editbox_label"
					{
						text = "JOMINI_MULTIPLAYER_GUI_SERVER_PASSWORD"
					}
					blockoverride "editbox_properties"
					{
						name = "game_password"
						#text = "[LobbyView.GetServerInfo.GetServerName]"
						onreturnpressed = "[LobbyView.SetPassword]"
						ontextedited = "[LobbyView.OnPasswordEdit]"
						enabled = "[CanEditSettingsAfterHost]"
					}
				}

				vbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = expanding
					expand = {}

					button_icon_check = {
						size = { 30 30 }
						visible = "[CanEditSettingsAfterHost]"
						onclick = "[LobbyView.SetPassword]"
						tooltip = "JOMINI_MULTIPLAYER_GUI_CHANGE_SERVER_PASSWORD"
						#enabled = "[LobbyView.CanControlSelected]"
					}
				}
			}



			hbox = {
				block "game_options_left" {}
				block "game_options_right" {}
			}
		}

		JominiMultiplayerSetupCheckButton = {
			visible = "[JominiIsHostOrLocal]"

			blockoverride "checkbutton"
			{
				name = "hotjoin_autoaccept"
				checked = "[LobbyView.IsAutoAccept]"
				onclick = "[LobbyView.ToggleAutoAccept]"
				tooltip = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT_TT"
				enabled = "[CanEditSettingsAfterHost]"
			}

			blockoverride "label"
			{
				autoresize = yes
				text = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT"
				tooltip = "JOMINI_MULTIPLAYER_GUI_AUTO_ACCEPT_TT"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			spacing = 5

			block "mp_info_header" {}

			block "mp_info_left_info" {}


			JominiLobbyViewServerInfoEntry = {
				minimumsize = { 390 0 }

				text_multi = {
					text = "JOMINI_MULTIPLAYER_GUI_CHECKSUM"
					margin = { 10 5 }
					max_width = 390
					autoresize = yes
					resizeparent = yes
				}
				tooltip = "JOMINI_MULTIPLAYER_GUI_GAME_VERSION_TOOLTIP"
			}
		}

		spacer = {
			size = { 5 20 }
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			spacing = 10

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				spacing = 10

				text_label_center = {
					layoutpolicy_horizontal = expanding
					margin = { 5 5 }

					text = "JOMINI_MULTIPLAYER_GUI_ENABLED_DLCS"
					block "jomini_standard_textbox" {}
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					margin_top = 20

					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5

						datamodel = "[GetEnabledDlcNames]"

						item = {
							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[CString.GetString]"
							}
						}
					}
				}

				blockoverride "scrollbox_empty"
				{
					layoutpolicy_vertical = expanding
					visible = "[IsDataModelEmpty(GetEnabledDlcNames)]"
					text = "JOMINI_MULTIPLAYER_GUI_NO_DLCS"
				}
			}
		}

		spacer = {
			size = { 5 20 }
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = preferred
			spacing = 10

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred
				spacing = 10

				text_label_center = {
					layoutpolicy_horizontal = expanding
					margin = { 5 5 }
					text = "JOMINI_MULTIPLAYER_GUI_ENABLED_MODS"
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5
						datamodel = "[LobbyView.GetEnabledMods]"

						item = {
							text_single = {
								layoutpolicy_horizontal = expanding
								text = "[CString.GetString]"
							}
						}
					}
				}

				blockoverride "scrollbox_empty"
				{
					layoutpolicy_vertical = expanding
					visible = "[IsDataModelEmpty(LobbyView.GetEnabledMods)]"
					text = "JOMINI_MULTIPLAYER_GUI_NO_MODS"
				}
			}
		}
	}

	# The Host widget shows the host button
	type JominiLobbyViewHost = vbox {
		layoutpolicy_horizontal = expanding
		visible = "[And(Not(HasHostError),Not(GameIsMultiplayer))]"
		alwaystransparent = no
		filter_mouse = left|right

		block "host_background" {
			background = {
				using = JominiLobbyViewModuleBackground
			}
		}

		JominiLobbyViewButton = {
			block "host_button"
			{
				text = "JOMINI_MULTIPLAYER_GUI_HOST_BUTTON"
			}

			onclick = "[LobbyView.OpenMultiplayer]"
			tooltip = "LOBBY_MULTIPLAYER_TOOLTIP"

			block "host_button_enabled"
			{
				enabled = "[And(JominiIsMultiplayerAccessible, JominiIsHostOrLocal)]"
			}

			layoutpolicy_horizontal = expanding
		}
	}

	# Playerlist item
	type JominiLobbyViewPlayerItem = hbox {
		layoutpolicy_horizontal = expanding
		alwaystransparent = no
		filter_mouse = left|right

		background = {
			using = Background_Area_Dark
			margin = { 5 0}
		}

		block "playerlist_item_content" {
			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 10 5 }
				spacing = 10

				block "playable_icon" {

					widget = {
						### v3 replacement
						size = { 100 70 }
						# size = { 50 70 }
						### to here
						layoutpolicy_horizontal = fixed
						layoutpolicy_vertical = expanding

						hbox = {
							spacing = 5

							widget = {
								visible = "[LobbyPlayer.IsObserver]"
								size = { 47 75 }

								icon_observer = {
									parentanchor = center
									size = { 48 48 }
								}
							}

							large_flag = {
								datacontext = "[LobbyPlayer.GetPlayable.GetCountry]"
								visible = "[LobbyPlayer.HasPlayable]"

								blockoverride "onclick" {
									onclick = "[Country.GetCapital.ZoomToCapital]"
								}
							}

						}

					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						text_single = {
							layoutpolicy_horizontal = expanding
							max_width = 245
							text = "[LobbyPlayer.GetName]"
							default_format = "#high"
							elide = right
						}

						expand = {}
					}

					hbox = {
						spacing = 5
						layoutpolicy_horizontal = expanding
						allow_outside = yes

						# Readyness
						block "readyness" {
							hbox = {
								text_multi = {
									layoutpolicy_horizontal = expanding
									text = "JOMINI_MULTIPLAYER_GUI_READY"
									visible = "[And( LobbyPlayer.IsReady, Not( LobbyPlayer.IsObserver ) )]"
									align = nobaseline
									autoresize = yes
								}
							}
						}
					}
				}

				widget = {
					minimumsize = { 30 30 }
					visible = "[LobbyPlayer.CanRemovePlayer]"

					button_kick_player = {
						parentanchor = bottom|right
						widgetanchor = bottom|right
						size = { 30 30 }
						onclick = "[LobbyPlayer.RemovePlayer]"
						tooltip = "JOMINI_MULTIPLAYER_GUI_PLAYER_KICK_BUTTON_LABEL_TT"
					}
				}
				
				widget = {
					minimumsize = { 30 30 }

					text_single = {
						visible = "[LobbyPlayer.IsHost]"
						text = "HOST"
						default_format = "#high"
						margin_right = 5
					}

					button_clear = {
						visible = "[And( LobbyPlayer.IsLocalPlayer, Or( LobbyPlayer.HasPlayable, LobbyPlayer.IsObserver ) )]"
						parentanchor = bottom|right
						widgetanchor = bottom|right
						size = { 30 30 }
						onclick = "[LobbyView.ClearSelection]"
						tooltip = "JOMINI_MULTIPLAYER_GUI_CLEAR_SELECTION"
					}
				}

			}
		}
	}

	# Playerlist widget
	type JominiLobbyViewPlayerList = vbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		margin = { 0 10 }
		minimumsize = { 420 0 }

		background = {
			using = JominiLobbyViewModuleBackground
		}

		JominiLobbyViewPlayerItem = {
			datacontext = "[LobbyView.AccessLocalPlayer]"
		}

		JominiMultiplayerTextbox = {
			minimumsize = { 370 50 }
			margin_left = 20
			text = "JOMINI_MULTIPLAYER_GUI_OTHER_PLAYERS_COUNT"
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_right = -5
			spacing = 5

			scrollbox = {
				visible = "[GameIsMultiplayer]"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_margins" {}

				blockoverride "scrollbox_empty"
				{
					visible = "[LessThan_int32(GetDataModelSize(LobbyView.Players), '(int32)2')]"
					text = "JOMINI_MULTIPLAYER_GUI_OTHER_PLAYERS_NONE"
					layoutpolicy_vertical = expanding
				}

				blockoverride "scrollbox_content"
				{
					vbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5
						alwaystransparent = no
						filter_mouse = left|right
						datamodel = "[LobbyView.Players]"
						ignoreinvisible = yes

						block "player_list_properties" {}

						item = {
							JominiLobbyViewPlayerItem = {
								visible = "[Not( LobbyPlayer.IsLocalPlayer)]"
							}
						}
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				minimumsize = { 390 50 }
				max_width = 390
				margin = { 10 0 }

				text_multi = {
					layoutpolicy_horizontal = expanding
					max_width = 340
					margin = { 0 5 }
					autoresize = yes
					text = "FRONTEND_INVITE"
				}

				button_copy = {
					onclick = "[LobbyView.CopyServerID]"
					tooltip = "FRONTEND_COPY_CLIPBUFFER_TT"
				}
			}
		}
	}

	type JominiLobbyViewBack = vbox {
		layoutpolicy_horizontal = expanding
		margin = { 10 10 }

		alwaystransparent = no
		filter_mouse = left|right

		hbox = {
			layoutpolicy_horizontal = expanding

			button_standard_back = {
				enabled = "[LobbyView.CanGoBack]"
				using = tooltip_above

				block "lobby_view_back_onclick" {
					onclick = "[LobbyView.GoBack]"
				}

				blockoverride "text" {
					text = "JOMINI_MULTIPLAYER_GUI_SESSION_BACK"
				}

				tooltip = "[LobbyView.GetGoBackToolTip]"
				shortcut = "close_window"
			}

			expand = {}
		}
	}

	# Selection widget
	type JominiLobbyViewSelectionWidget = vbox {
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		margin_left = 10

		alwaystransparent = no
		filter_mouse = left|right

		background = {
			using = JominiLobbyViewModuleBackground
		}


		text_multi = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			default_format = "#I"
			align = center
			text = "MULTIPLAYER_GUI_CLICK_TO_SELECT"
			visible = "[And( Not( LobbyView.HasSelectedPlayable ), Not( LobbyView.IsObserver ) )]"
		}


		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			visible = "[And( Not( LobbyView.HasSelectedPlayable ), LobbyView.IsObserver )]"

			spacer = {size = {0 20}}

			text_label_center = {
				name = "header"
				text = "JOMINI_MULTIPLAYER_GUI_OBSERVER"
			}

			text_multi = {
				name = "desc"
				text = "FRONTEND_OBSERVER_DESC"
				autoresize = yes
				max_width = 300
				align = left
			}

			expand = {}
		}

		# Playable Selected
		widget = {
			visible = "[LobbyView.HasSelectedPlayable]"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			vbox = {

				block "selected_playable" {
				}
			}
		}

		block "game_rules" {}
	}

	# Game Info Panel
	type JominiLobbyViewGameInfoPanel = vbox {
		size = { 0 0 }
		layoutpolicy_horizontal = expanding
		alwaystransparent = no
		filter_mouse = left|right

		background = {
			using = JominiLobbyViewModuleBackground
		}

		block "game_info" {
		}
	}

	# Module for preparation specific stuff
	type JominiLobbyViewPreparation = vbox {
		#visible = "[IsPreparationLobby]"
		alwaystransparent = no
		filter_mouse = left|right
		layoutpolicy_horizontal = expanding
		margin_left = 10
		margin_bottom = 10


		background = {
			using = JominiLobbyViewModuleBackground
		}

		JominiMultiplayerTextbox = {
			layoutpolicy_horizontal = expanding
			visible = "[And(LobbyView.IsReady,Not(PlayerIsHost))]"
			name = "ready_info"
			minimumsize = { 0 45 }
			multiline = yes
			align = center|center
			text = "JOMINI_MULTIPLAYER_GUI_WAIT_HOST_START"
		}

		### v3 outcomment
		# button_standard = {
		# 	size = { 380 45 }
		# 	datacontext = "[LobbyView.GetSelectedPlayable.GetCharacter]"
		# 	visible = "[Not( IsPreparationLobby )]"
		# 
		# 	enabled = "[LobbyView.CanTryStartRulerDesigning( Character.Self )]"
		# 	
		# 	onclick = "[TryStartRulerDesigning( Character.Self )]"		
		# 
		# 	tooltip = "[LobbyView.GetTryStartRulerDesigningDesc( Character.Self )]"
		# 	text = "RULER_DESIGNER_OPEN"
		# 
		# 	icon = {
		# 		visible = "[And( ShouldPromptForRulerDesigner, LobbyView.CanTryStartRulerDesigning( Character.Self ) )]"
		# 		size = { 100% 100% }
		# 		texture = "gfx/frontend/interface/component_masks/mask_fade_circle.dds"
		# 		using = Color_Bright_Yellow
		# 		alpha = 0
		# 
		# 		state = {
		# 			name = a
		# 			next = b
		# 			trigger_on_create = yes
		# 
		# 			alpha = 0.3
		# 			duration = 1
		# 			using = Animation_Curve_Default
		# 		}
		# 
		# 		state = {
		# 			name = b
		# 			next = a
		# 
		# 			alpha = 0
		# 			duration = 2
		# 			using = Animation_Curve_Default
		# 		}
		# 	}
		# 
		# 	button_edit_text = {
		# 		size = { 30 30 }
		# 		parentanchor = left|vcenter
		# 		position = { 5 0 }
		# 		alwaystransparent = yes
		# 	}
		# }
		### to here

		spacer = {
			size = { 10 10 }
		}

		### v3 action button
		button = {
			using = default_button_primary_big_action
			using = fontsize_xxl
		#button_primary_big = {
			size = { 380 50 }
			visible = "[And( IsPreparationLobby, PlayerIsHost )]"
			onclick = "[LobbyView.Start]"
			enabled = "[LobbyView.CanStart]"
			tooltip = "[LobbyView.StartToolTip]"
			text = "JOMINI_MULTIPLAYER_GUI_START"

			### v3 outcomment
			# oversound = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_over"
			# 
			# state = {
			# 	name = _mouse_press
			# 	start_sound = {
			# 		soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_pointer_press"
			# 	}
			# }
			# 
			# state = {
			# 	name = _mouse_release
			# 	start_sound = {
			# 		soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_start_game"
			# 	}
			# }
			### to here
		}

		### v3 action button
		button = {
			using = default_button_primary_big_action
			using = fontsize_xxl
			size = { 380 50 }
			visible = "[Not( IsPreparationLobby )]"
			text = "JOMINI_MULTIPLAYER_GUI_START"

			onclick = "[PdxGuiTriggerAllAnimations('game_start_animation_clouds_lobby')]"
			#onclick = "[LobbyView.ControlSelected]"
			#onclick = "[LobbyView.Ready]"
			using = confirm_button_sound
			enabled = "[LobbyView.CanControlSelected]"

			tooltip = "LOBBY_START_TOOLTIP"
		}
	}

	type JominiLobbyViewEndPreparationConfirmation = widget {
		name = "JominiMultiplayerEndPreparationConfirmation"

		block "properties"
		{
			size = { 300 200 }
			parentanchor = center
			widgetanchor = center
			modal = yes
			modality = all
		}

		block "background"
		{
			background = {
				using = JominiLobbyViewModuleBackground
			}
		}

		block "content"
		{
			textbox = {
				name = "info"
				size = { 100% 50% }
				multiline = yes
				align = center|center
				text = "JOMINI_MULTIPLAYER_GUI_CONFIRMATION"
			}

			JominiLobbyViewButton = {
				onclick = "[EndPrepConfirm.Cancel]"
				size = { 50% 20% }
				text = "JOMINI_MULTIPLAYER_GUI_CANCEL"
				parentanchor = bottom|left
				widgetanchor = bottom|left
			}

			JominiLobbyViewButton = {
				onclick = "[EndPrepConfirm.Confirm]"
				size = { 50% 20% }
				text = "JOMINI_MULTIPLAYER_GUI_CONFIRM"
				parentanchor = bottom|right
				widgetanchor = bottom|right
			}
		}
	}

	type JominiMultiplayerLobby = widget {
		name = "lobbyview"
		size = { 100% 100% }
		
		# v3 added extra widget to be able to hide with alpha
		widget = {
			size = { 100% 100% }
			
			### v3 alpha to hide lobby when transitioning into in-game
			state = {
				name = lobby_alpha_show
				alpha = 1
				duration = 0.5
			}
			state = {
				name = lobby_alpha_hide
				alpha = 0
				duration = 0.5
			}
			###

			widget = {
				parentanchor = bottom
				size = { 100% 100 }

				background = {
					using = Background_Bottom_Fade
				}

				background = {
					using = Background_Bottom_Fade
				}
			}

			#### CHOOSE ANY CHARACTER ###
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				maximumsize = { 390 -1 }
				visible = "[Not(GameIsMultiplayer)]"

				expand = {}

				hbox = {
					layoutpolicy_horizontal = expanding

					### v3 outcomment
					#background = {
					#	using = Background_Area_Dark
					#	margin = { 10 10 }
					#}

					#background = {
					#	using = Background_Area_Dark
					#	margin = { 10 10 }
					#
					#	modify_texture = {
					#		texture = "gfx/frontend/interface/component_masks/mask_fade_horizontal_right.dds"
					#		blend_mode = alphamultiply
					#		alpha = 0.6
					#	}
					#}

					#background = {
					#	using = Background_Area_Dark
					#	margin = { 10 10 }
					#	alpha = 0.6
					#
					#	modify_texture = {
					#		texture = "gfx/frontend/interface/component_masks/mask_fade_horizontal_right.dds"
					#		blend_mode = alphamultiply
					#	}
					#}
					#
					#background = {
					#	using = Background_Area_Dark
					#	margin = { 10 10 }
					#
					#	modify_texture = {
					#		texture = "gfx/frontend/interface/component_masks/mask_fade_vertical_up.dds"
					#		blend_mode = alphamultiply
					#	}
					#}
					### to here
					
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						expand = {}
						JominiLobbyViewBack = {}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin = { 10 10 }

						### v3 action button
						button = {
							using = default_button_action
							size = { 170 33 }
						#button_standard = {
							layoutpolicy_horizontal = expanding
							visible = "[And(And(Not(HasHostError),Not(GameIsMultiplayer)), JominiIsMultiplayerAccessible)]"
							alwaystransparent = no
							filter_mouse = left|right
							text = "JOMINI_MULTIPLAYER_GUI_HOST_BUTTON"
							minimumsize = { 300 40 }

							onclick = "[LobbyView.OpenMultiplayer]"
							tooltip = "LOBBY_MULTIPLAYER_TOOLTIP"
							enabled = "[JominiIsHostOrLocal]"
						}

						### v3 action button
						button = {
							using = default_button_action
							size = { 170 33 }
						#button_standard = {
							layoutpolicy_horizontal = expanding
							visible = "[And(And(Not(HasHostError),Not(GameIsMultiplayer)), Not(JominiIsMultiplayerAccessible))]"
							alwaystransparent = no
							filter_mouse = left|right
							text = "JOMINI_MULTIPLAYER_GUI_HOST_BUTTON"
							default_format = "#weak"
							minimumsize = { 300 40 }
							using = tooltip_above

							onclick = "[OnToggleLoginWindow]"
							using = select_button_sound
							tooltip = "LOBBY_MULTIPLAYER_TOOLTIP"
							enabled = "[JominiIsHostOrLocal]"

							icon_online_offline = {
								parentanchor = right|vcenter
								position = { -15 0 }
								tooltip = "FRONTEND_LOGIN_PROMPT"
								frame = 2
								using = tooltip_above
							}
						}
					}
				}

			}

			block "left_panel"
			{
				widget = {
					block "left_panel_properties"
					{
						size = { 410 100% }
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin_right = 5

						block "left_panel_content" {
							using = Window_Background_Sidebar_Multiplayer_Left

							background = {
								using = Background_Area_Dark
								margin = { 0 10 }

								modify_texture = {
									texture = "gfx/frontend/interface/component_masks/mask_fade_vertical_up.dds"
									blend_mode = alphamultiply
									alpha = 0.8
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding

								background = {
									using = JominiLobbyViewModuleBackground
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									name = "tabs"

									button_tab = {
										name = "show_players"
										layoutpolicy_horizontal = expanding

										visible = "[JominiIsMultiplayerAccessible]"
										onclick = "[GetVariableSystem.Set( 'mp_lobby_tabs', 'show_players' )]"
										down = "[GetVariableSystem.HasValue( 'mp_lobby_tabs', 'show_players' )]"

										text = "JOMINI_MULTIPLAYER_GUI_SHOW_PLAYERS"
										default_format = "#low"
									}

									button_tab = {
										name = "show_settings"
										layoutpolicy_horizontal = expanding

										visible = "[JominiIsMultiplayerAccessible]"
										onclick = "[GetVariableSystem.Set( 'mp_lobby_tabs', 'show_settings' )]"
										down = "[GetVariableSystem.HasValue( 'mp_lobby_tabs', 'show_settings' )]"

										text = "JOMINI_MULTIPLAYER_GUI_SHOW_SETTINGS"
										default_format = "#low"

									}
								}
							}

							JominiLobbyViewPlayerList = {
								visible = "[And( And(GetVariableSystem.HasValue( 'mp_lobby_tabs', 'show_players' ), LobbyView.ShowPlayerList), LobbyView.HasServerInfo )]"
							}

							JominiLobbyViewMPInfo = {
								visible = "[And( Or(GetVariableSystem.HasValue( 'mp_lobby_tabs', 'show_settings' ), Not( LobbyView.ShowPlayerList )), LobbyView.HasServerInfo )]"
							}

							expand = {}

							JominiLobbyViewHostingStatus = {}
							JominiLobbyViewHostError = {}

							JominiLobbyViewBack = {}
						}
					}
				}
			}

			block "right_panel"
			{
				widget = {
					parentanchor = top|right
					widgetanchor = top|right

					block "right_panel_properties"
					{
						size = { 410 100% }
					}

					using = Window_Background_Sidebar_Multiplayer_Right

					### v3 outcomment
					#background = {
					#	using = Background_Area_Dark
					#	margin = { 0 10 }
					#
					#	modify_texture = {
					#		texture = "gfx/frontend/interface/component_masks/mask_fade_vertical_up.dds"
					#		blend_mode = alphamultiply
					#		alpha = 0.8
					#	}
					#}
					### to here

					vbox = {
						block "right_panel_content"
						{
							JominiLobbyViewGameInfoPanel = {}
							JominiLobbyViewSelectionWidget = {}
							JominiLobbyViewPreparation = {}
						}
					}
				}
			}
		}
	}
}

template JominiDefaultButtonProperties {
	block "button_style"
	{
		texture = "gfx/editor_gui/editor_button.dds"
		gfxtype = framedbuttongfx
		spriteType = CorneredStretched
		spriteborder = { 4 4 }
		framesize = { 16 16 }
		upframe = 1
		downframe = 2
		overframe = 3
		disableframe = 4
	}
}

types JominiMultiplayerGameTypes
{
	type JominiMultiplayerFrontEndButton = button_standard {
		size = { 200 50 }
	}

	type JominiMultiplayerSortButtonAsc = button {

		block "asc_button_properties" {
			alwaystransparent = yes
			size = { 35 33 }

			button_icon = {
				texture = "gfx/frontend/interface/icons/flat_icons/sort_icon.dds"
				framesize = { 66 66 }
				frame = 1
			}
		}
	}

	type JominiMultiplayerSortButtonDesc = button {

		block "desc_button_properties" {
			alwaystransparent = yes
			size = { 35 33 }

			button_icon = {
				texture = "gfx/frontend/interface/icons/flat_icons/sort_icon.dds"
				framesize = { 66 66 }
				frame = 2
			}
		}
	}

	type JominiMultiplayerCheckbutton = hbox {

		block "serverbrowser_checkbutton" {

			button_checkbox = {
				size = { 20 20 }
				block "checkbutton" {}
			}

			text_single = {
				margin_left = 5

				block "label"
				{
					raw_text = "Label"
				}
			}
		}
	}

	type JominiMultiplayerTextbox = textbox {
		align = left
		block "jominimultiplayertextbox" {
			using = Font_Type_Standard
			using = Font_Size_Small
			default_format = "#high"
		}
	}
}
