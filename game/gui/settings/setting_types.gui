### this is an imported file. please make as little changes to this file as possible.
### when you make a change please mark it very clearly using a pair of comment lines with the text '### v3' and '### to here'
### texture paths and audio event ids are an exception to this and can be changed without marking

types Settings
{
	type jomini_settings_window = window {
		name = "jomini_settings_window"
		size = { 100% 100% }
		movable = no
		layer = confirmation
		visible_at_creation = no

		# We don't use `using = Animation_ShowHide_Quick`, instead we use the specific `state = {}` definitions
		# to circumvent an annoying localization reload settings-popup issue.
		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}
		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}
		using = Background_Full_Dim

		button_normal = {
			size = { 100% 100% }
			onclick = "[JominiSettingsWindow.SaveAndClose]"
			### v3
			using = close_button_sound
			### to here
		}

		widget = {
			parentanchor = center
			size = { 970 700 }
			alwaystransparent = no
			
			using = Window_Background
			using = Window_Decoration_Spike

			vbox = {
				using = Window_Margins

				header_pattern = {
					layoutpolicy_horizontal = expanding

					blockoverride "header_text" {
						text = "SETTINGS"
					}

					blockoverride "button_close"
					{
						onclick = "[JominiSettingsWindow.SaveAndClose]"
						### v3 outcomment
						# enabled = "[Not( HasOpenResetReactiveTutorialPopup )]"
						### to here
					}
				}

				## CONTENT WINDOW ##
				hbox = {
					layoutpolicy_vertical = expanding
					layoutpolicy_horizontal = expanding

					vbox = {
						layoutpolicy_vertical = expanding
						margin_left = 20
						margin_right = -3

						vbox = {
							datamodel = "[JominiSettingsWindow.AccessPages]"

							item = {
								widget = {
									size = { 200 48 }

									button = {
										size = { 200 48 }
										visible = "[SettingsPage.IsSelected]"
										text = "[SettingsPage.GetName]"
										default_format = "#low"

										frame = 4
										alwaystransparent = yes
										
										### v3 replacement
										texture = "gfx/interface/tabs/tab_button_vertical.dds"
										#texture = "gfx/frontend/interface/buttons/button_tab_vertical.dds"
										### to here
										
										spriteType = Corneredtiled
										spriteborder = { 10 10 }
										framesize = { 202 48 }										
									}

									button_tab_vertical = {
										visible = "[Not(SettingsPage.IsSelected)]"
										size = { 200 48 }

										text = "[SettingsPage.GetName]"
										onclick = "[SettingsPage.OnClick]"
										upframe = "[Select_int32(SettingsPage.IsSelected,'(int32)2','(int32)1')]"
										using = tab_button_sound
									}
								}
							}
						}

						expand = {}
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_margins"
						{
							margin = { 10 10 }
							margin_bottom = 15
						}

						blockoverride "scrollbox_content"
						{
							dynamicgridbox = {
								name = "settings"
								layoutpolicy_horizontal = expanding
							}
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					margin = { 15 10 }
					spacing = 5

					# jomini_settings_restart_required_indicator = {
					# 	tooltip = "REQUIRES_RESTART"
					# 	visible = "[JominiSettingsWindow.AppliedOnRestart]"
					# }

					text_single = {
						visible = "[JominiSettingsWindow.AppliedOnRestart]"
						layoutpolicy_horizontal = expanding
						margin_right = 10
						autoresize = no
						text = "REQUIRE_RESTART_DESCRIPTION"
						block "require_restart_description" {}
					}

					expand = {
						visible = "[Not(JominiSettingsWindow.AppliedOnRestart)]"
					}

					# This button is hidden, it is just a trap that resets your settings
					#button_standard = {
					#	text = "CANCEL"
					#	onclick = [JominiSettingsWindow.Close]
					#	onclick = "[ClearResetReactiveTutorialPopup]"
					#	default_format = "#low"
					#}

					### v3 action button
					button = {
						using = default_button_primary_action
						size = { 170 33 }
					#button_primary = {
						text = "SAVE_AND_CLOSE"
						onclick = [JominiSettingsWindow.SaveAndClose]
						using = confirm_button_sound
						### v3 outcomment
						# enabled = "[Not( HasOpenResetReactiveTutorialPopup )]"
						#shortcut = close_window
						### to here
					}
				}
			}
		}
	}

	type jomini_settings_grouping = container {
		name = "settings_grouping"
		block "settings_grouping" {}

		text_label_left = {
			position = { 10 10 }
			min_width = 400
			text = "[SettingCategory.GetName]"
			default_format = "#low"

			block "settings_grouping_name" {}
		}

		dynamicgridbox = {
			#### DO NOT TOUCH OR GAME CRASHES ###
			position = { 10 35 }
			name = "grouping_gridbox"
			block "settings_grouping_gridbox" {}
		}
	}

	type jomini_setting_desc = textbox {
		name = "setting_desc"
		text = "[JominiGUISetting.GetDesc]"
		default_format = "#low"
		#fontsize = 16
		max_width = 300
		size = { 200 20 }
		margin = { 20 5 }
	}

	type jomini_setting_title = text_single {
		name = "setting_title"
		visible = "[JominiGUISetting.ShouldShow]"
		text = "[PdxSetting.GetTitle]"
		align = nobaseline
		min_width = 250
		max_width = 250
		tooltip = "[PdxSetting.GetTooltip]"
		using = tooltip_ws
		margin = { 20 6 }
		block "setting_title" {}
		jomini_settings_restart_required_indicator = {
			visible = "[And( And( JominiGUISetting.ShouldShow, JominiGUISetting.HasChanged ), And( JominiSettingsWindow.AppliedOnRestart, PdxSetting.GetSettingPromoted.RequireRestart ) )]"
		}
	}

	type setting_segmented_control_button = button {
		align = left|vcenter
		default_format = "#medium"

		### v3 wrapped in textbox
		textbox = {
			margin = { 15 1 }
			autoresize = yes
			resizeparent = yes
			text = "[EnumSettingEntry.GetGUIName]"
		}

		minimumsize = { 220 32 }

		#text = "[EnumSettingEntry.GetGUIName]"
		#margin = { 10 0 }
		#minimumsize = { 220 30 }
		### to here

		onclick = "[SelectEnumWithString(EnumSettingEntry.GetEnumString, EnumSettingEntry.AccessSetting)]"
		visible = "[Not(EnumSettingEntry.IsSelected)]"
		tooltip = "[EnumSettingEntry.GetTooltip]"

		### v3 replacement
		using = default_button
		
		#texture = "gfx/frontend/interface/buttons/button_sort.dds"
		#framesize = { 225 33 }
		#spriteType = Corneredtiled
		#spriteborder = { 75 11 }
		### to here
	}

	type setting_segmented_control_active_button = button {
		align = left|vcenter
		default_format = "#medium"

		### v3 wrapped in textbox
		textbox = {
			margin = { 15 1 }
			autoresize = yes
			resizeparent = yes
			text = "[EnumSettingEntry.GetGUIName]"
		}

		minimumsize = { 220 32 }

		#text = "[EnumSettingEntry.GetGUIName]"
		#margin = { 10 0 }
		#minimumsize = { 220 30 }
		### to here

		onclick = "[SelectEnumWithString(EnumSettingEntry.GetEnumString, EnumSettingEntry.AccessSetting)]"
		visible = "[EnumSettingEntry.IsSelected]"
		tooltip = "[EnumSettingEntry.GetTooltip]"

		### v3 replacement
		using = default_button
		
		#texture = "gfx/frontend/interface/buttons/button_sort.dds"
		#framesize = { 225 33 }
		#spriteType = Corneredtiled
		#spriteborder = { 75 11 }
		### to here
	}

	type setting_page_button = button_standard {
		text = "[SettingsPage.GetName]"
		size = { 150 30 }
		align = left
		onclick = "[SettingsPage.OnClick]"
		upframe = "[Select_int32(SettingsPage.IsSelected,'(int32)2','(int32)1')]"
		block "setting_page_button" {}

		textbox = {
			parentanchor = vcenter|left
			position = { 5 0 }
			block "setting_page_button_text" {}
		}
	}

	type jomini_settings_restart_required_indicator = text_single {

		raw_text = "*"
		tooltip = "REQUIRES_RESTART"
		margin_left = 10
	}

	type jomini_setting_value_scrollbar = container {
		name = "setting_value"
		minimumsize = { 460 30 }
		visible = "[JominiGUISetting.ShouldShow]"

		scrollbar = {
			name = "setting_value_scrollbar"
			direction = horizontal
			parentanchor = left|vcenter
			size = { 300 20 }
			minimumsize = { -1 14 }
			value = "[PdxValueSetting.GetCurrentValue(PdxSetting.GetSetting)]"
			block "setting_value_scrollbar" {}

			track = {
				using = SettingsValueTrack
			}

			slider = {
				using = SettingsValueSlider
			}

			dec_button = {
				using = SettingsValueDecButton
			}

			inc_button = {
				using = SettingsValueIncButton
			}
		}

		text_single = {
			position = { 310 3 }
			autoresize = yes
			text = "[PdxValueSetting.GetFormatedCurrentValue(PdxSetting.GetSetting)]"
			default_format = "#low"
			alwaystransparent = no
			max_width = 80
			fontsize_min = 12
			block "setting_value_eb" {}
		}
	}

	type jomini_setting_bool = widget {
		name = "setting_bool"
		size = { 220 30 }
		block "setting_bool" {}

		hbox = {
			margin_left = 5

			button_checkbox = {
				size = { 24 24 }
				name = "setting_bool_cb"
				checked = "[GetIsChecked(PdxSetting.GetSetting)]"
				using = check_button_sound
				block "setting_bool_cb" {}
			}

			expand = {}
		}
	}

	type jomini_setting_callback = widget {
		name = "setting_callback"
		size = { 220 24 }

		block "setting_callback" {}

		button_standard = {
			size = { 250 28 }
			text = "[PdxSetting.GetTitle]"
			tooltip = "[PdxSetting.GetTooltip]"
			using = tooltip_ws
			name = "setting_callback_button"
			parentanchor = left|vcenter
			block "setting_callback_button" {}
		}
	}

	type jomini_setting_string = margin_widget {
		name = "setting_string"
		block "setting_string" {}

		size = { 220 30 }
		margin_left = 5

		editbox = {
			size = { 100% 100% }

			name = "setting_string_eb"
			text = "[GetStringSettingText(PdxSetting.GetSetting)]"
			using = property_editbox
			block "setting_string_eb" {}
			fontsize = 17
			align = nobaseline
		}
	}

	type jomini_setting_enum = flowcontainer {

		### SCROLLAREA DROPDOWN CONTENT ###

		name = "setting_enum"
		visible = "[JominiGUISetting.ShouldShow]"
		direction = vertical
		ignoreinvisible = yes

		dropdown_menu_standard =
		{
			visible = "[Not(ShouldShowSegmentedControlForSetting(PdxSetting.GetSetting))]"
			name = "setting_enum_dropdown"

			blockoverride "dropdown_properties"
			{
				selectedindex = "[GetEnumIndex(PdxSetting.GetSetting)]"
			}

			blockoverride "dropdown_active_item_properties"
			{
				text = "[EnumSettingEntry.GetGUIName]"
				tooltip = "[EnumSettingEntry.GetTooltip]"
			}

			blockoverride "dropdown_item_properties"
			{
				text = "[EnumSettingEntry.GetGUIName]"
				tooltip = "[EnumSettingEntry.GetTooltip]"
			}

		}


		dynamicgridbox = {
			name = "segmented_control"
			flipdirection = yes
			visible = "[ShouldShowSegmentedControlForSetting(PdxSetting.GetSetting)]"
			block "segmented_control" {}
			item = {
				container = {
					setting_segmented_control_button = {}
					setting_segmented_control_active_button = {}
				}
			}
		}
	}

	type jomini_setting_input_popup_window = default_popup {
		name = "jomini_settings_popup"
		parentanchor = center
		layer = layer_jomini_popup_using_set_popup_from_code

		blockoverride "window_header_name" {
			text = SETTINGS_INPUT_REMAP_INPUT
		}

		blockoverride "scrollarea_content" {
			flowcontainer = {
				direction = vertical
				resizeparent = yes
				spacing = 20

				flowcontainer = {
					parentanchor = vcenter
					spacing = 20
					minimumsize = { -1 200 }
					direction = vertical
	
					textbox = {
						autoresize = yes
						minimumsize = { 540 -1 }
						maximumsize = { 540 -1 }
						multiline = yes
						align = center|nobaseline
						text = "[JominiSettingsWindow.GetInputBindingText]"
						using = fontsize_large
					}

					textbox = {
						visible = "[JominiSettingsWindow.ShouldShowWarningText]"
						autoresize = yes
						minimumsize = { 540 -1 }
						maximumsize = { 540 -1 }
						multiline = yes
						align = center|nobaseline
						text = "[JominiSettingsWindow.GetWarningText]"
					}
				}


				container = {
					minimumsize = { 540 -1 }
					maximumsize = { 540 -1 }

					button = {
						name = "jomini_settings_popup_cancel"
						size = { 140 33 }
						text = "SETTINGS_INPUT_CANCEL"
						onclick = "[JominiSettingsWindow.OnClickCancel]"
						using = default_button
						shortcut = "close_window"
					}

					flowcontainer = {
						parentanchor = right
						spacing = 5
						
						button = {
							name = "jomini_settings_popup_clear"
							size = { 140 33 }
							text = "SETTINGS_INPUT_CLEAR"
							onclick = "[JominiSettingsWindow.OnClickClear]"
							using = default_button
						}

						button = {
							name = "jomini_settings_popup_confirm"
							size = { 140 33 }
							text = "SETTINGS_INPUT_CONFIRM"
							enabled = "[JominiSettingsWindow.IsConfirmButtonEnabled]"
							onclick = "[JominiSettingsWindow.OnClickConfirm]"
							using = default_button_primary_action
						}
					}
				}
			}
		}
	}

	type jomini_setting_input_binding = container {
		name = "setting_input_binding"

		dynamicgridbox = {
			name = "setting_input_actions_gridbox"

			item = {
				flowcontainer = {
					visible = "[JominiSettingsWindow.IsInputPopUpEnabled]"

					textbox = {
						text = "[JominiSettingsWindow.GetInputActionName( InputActionBinding.Self )]"
						autoresize = yes
						maximumsize = { 140 -1 }
						minimumsize = { 140 -1 }
						align = nobaseline
						parentanchor = vcenter
						elide = right
						fontsize_min = 12
					}

					button = {
						name = "input_hotkey_1"
						size = { 120 30 }
						using = default_button

						textbox = {
							text = "[JominiSettingsWindow.GetKeyCodeName( InputActionBinding.Self, '(int32)0' )]"
							autoresize = yes
							maximumsize = { 100 -1 }
							minimumsize = { 100 -1 }
							align = hcenter|nobaseline
							parentanchor = center
							elide = right
							fontsize_min = 12
						}

						onclick = "[JominiSettingsWindow.ShowInputPopUp( CPdxInputBindingSetting.Self, InputActionBinding.Self, '(int32)0' ) ]"
					}

					button = {
						name = "input_hotkey_2"
						size = { 120 30 }
						using = default_button

						textbox = {
							text = "[JominiSettingsWindow.GetKeyCodeName( InputActionBinding.Self, '(int32)1' )]"
							autoresize = yes
							maximumsize = { 100 -1 }
							minimumsize = { 100 -1 }
							align = hcenter|nobaseline
							parentanchor = center
							elide = right
							fontsize_min = 12
						}

						onclick = "[JominiSettingsWindow.ShowInputPopUp( CPdxInputBindingSetting.Self, InputActionBinding.Self, '(int32)1' ) ]"
					}
				}
			}
		}
	}
}


#### 	THESE TEMPLATES DEFINE THE SLIDERS	####

template SettingsValueSlider
{
	block "settings_value_slider"
	{
		### v3 replacement
		button = {
			parentanchor = vcenter
			using = scrollbar_slider
			size = { 12 20 }
		}
			
		#button = {
		#	texture = "gfx/frontend/interface/scrollbars/scrollbar_slider.dds"
		#	spriteType = Corneredtiled
		#	spriteborder = { 0 3 }
		#	framesize = { 12 40 }
		#	size = { 12 20 }
		#}
		### to here
	}
}

template SettingsValueTrack
{
	block "settings_value_track"
	{
		button = {
			parentanchor = vcenter
			### v3 replacement
			using = dark_area
			#texture ="gfx/frontend/interface/progressbars/progress_black.dds"
			#spriteType = Corneredtiled
			#spriteborder = { 6 6 }
			### to here
			
			size = { 20 14 }
			alwaystransparent = yes
		}
	}
}

template SettingsValueIncButton
{
	block "settings_value_inc_button"
	{
		button_select_arrow = {
			size = { 20 20 }
			using = increase_button_sound
		}
	}
}

template SettingsValueDecButton
{
	block "settings_value_dec_button"
	{

		button_select_arrow = {
			mirror = horizontal
			size = { 20 20 }
			using = decrease_button_sound
		}
	}
}

template SettingsButtonStyle
{
	block "settings_button_style"
	{
		texture = "gfx/editor_gui/editor_button.dds"
		gfxtype = framedbuttongfx
		spriteType = CorneredStretched
		spriteborder = { 4 4 }
		effectname = "NoHighlight"
		framesize = { 16 16 }
		upframe = 1
		downframe = 2
		overframe = 3
		disableframe = 4
		intersectionmask = yes
	}
}
