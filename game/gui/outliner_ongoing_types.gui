@entry_width = 350
@entry_height = 30

types ongoing_outliner_items {
	### WARS ITEM
	type outliner_war_item = widget {
		size = { 116 85 }
		
		tooltipwidget = {
			FancyTooltip_War = {}
		}

		vfx = {
			blockoverride "size" {
				size = { 500% 500% }
			}
			
			blockoverride "parent_anchor" {
				parentanchor = center
			}

			blockoverride "camera_position" {
				camera_position = { 0 0 -2 }
			}

			blockoverride "entity_instance" {
				entity_instance = vfx_entity_ui_sidebar_war
			}			
		}
		
		icon = {
			using = rotate_glow_animation_02
			size = { 200 200 }
			parentanchor = center
		}

		button = {
			texture = "gfx/interface/outliner/war_button_icon_outliner.dds"
			size = { 116 85 }
			onclick = "[WarManager.ToggleWarPanel( War.AccessSelf )]"
			parentanchor = center
		}
		
		### LEFT COUNTRY
		widget = {
			size = { 40 40 }
			datacontext = "[War.AccessLeftSideLeaderParticipant.GetCountry]"
			parentanchor = center
			position = { -22 11 }

			tiny_flag_no_interact = {
				parentanchor = right
				position = { -2 0 }
				mobilization_icon_flag = {}
			}

			textbox = {
				name = "warscore"
				size = { 40 18 }
				position = { 0 20 }
				text = "WAR_SUPPORT_LEFT_SIDE"
				tooltip = "WAR_LEFT_LEADER_TOOLTIP"
				align = center|nobaseline
				using = fontsize_small
				parentanchor = hcenter
			}
		}

		### RIGHT COUNTRY
		widget = {
			size = { 40 40 }
			datacontext = "[War.AccessRightSideLeaderParticipant.GetCountry]"
			parentanchor = center
			position = { 22 11 }

			tiny_flag_no_interact = {
				parentanchor = left
				position = { 2 0 }
				mobilization_icon_flag = {}
			}

			textbox = {
				name = "warscore"
				size = { 40 18 }
				position = { 0 20 }
				text = "WAR_SUPPORT_RIGHT_SIDE"
				tooltip = "WAR_RIGHT_LEADER_TOOLTIP"
				align = center|nobaseline
				using = fontsize_small
				parentanchor = hcenter
			}
		}
	}
	
	### WARS GRIDBOX
	type outliner_wars = fixedgridbox {
		datamodel_wrap = 3
		addcolumn = 116
		addrow = 85
		flipdirection = yes
		layoutanchor = topright
		
		datacontext = "[Outliner.AccessCategory('wars')]"
		datamodel = "[OutlinerEntry.GetSubEntries]"
		visible = "[OutlinerEntry.IsShown]"

		item = {
			outliner_war_item = {
				datacontext = "[OutlinerEntry.AccessScope.AccessWar]"
			}
		}
	}

	### DIPLO PLAYS ITEM
	type diplomatic_play_item = container {
		visible = "[DiplomaticPlay.IsPinnedInOutliner]"
		diplomatic_play_item_impl = {
			visible = "[Not(DiplomaticPlay.IsCommittedParticipant(GetPlayer))]"
		}
		diplomatic_play_item_impl = {
			visible = "[DiplomaticPlay.IsCommittedParticipant(GetPlayer)]"

			blockoverride "diplo_play_button_style" {
				using = default_button_primary
			}
		}
	}

	type diplomatic_play_item_impl = widget {
		name = "diplo_play_item"
		size = { 350 62 }
		tooltip = "DIPLOMATIC_PLAY_OUTLINER_TOOLTIP"
		
		button = {
			size = { 100% 55 }
			parentanchor = center

			block "diplo_play_button_style" {
				using = default_button
			}
			
			onclick = "[InformationPanelBar.OpenDiplomaticPlayPanel( DiplomaticPlay.AccessSelf )]"
			onrightclick = "[RightClickMenuManager.ShowForDiplomaticPlay(DiplomaticPlay.AccessSelf)]"

			button = {
				texture = "gfx/interface/outliner/diplo_play_dec_outliner.dds"
				size = { 121 57 }
				parentanchor = hcenter
				position = { 0 -7 }
				alwaystransparent = yes
				visible = "[DiplomaticPlay.IsCommittedParticipant(GetPlayer)]"
			}
		}

		### phases
		widget = {
			size = { 62 62 }
			parentanchor = hcenter
		
			### progressbar
			animated_progresspie = {
				texture = "gfx/interface/diplomatic_plays/escalation_progress.dds"
				size = { 56 56 }
				framesize = { 492 492 }
				frame = 2
				value = "[FixedPointToFloat(DiplomaticPlay.GetEscalationProgress)]"
				parentanchor = center
			}

			### phase images
			icon = {
				texture = "gfx/interface/diplomatic_plays/phase_opening_moves_small.dds"
				size = { 46 46 }
				parentanchor = center
				visible = "[LessThan_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_OPENING_PHASE_END'))]"
			}

			icon = {
				texture = "gfx/interface/diplomatic_plays/phase_diplomatic_maneuvers_small.dds"
				size = { 46 46 }
				parentanchor = center
				visible = "[And(GreaterThanOrEqualTo_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_OPENING_PHASE_END')),LessThan_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_CLOSING_PHASE_START')))]"
			}

			icon = {
				texture = "gfx/interface/diplomatic_plays/phase_countdown_to_war_small.dds"
				size = { 46 46 }
				parentanchor = center
				visible = "[GreaterThanOrEqualTo_int32(DiplomaticPlay.GetEscalation, GetDefine('NDiplomacy', 'DIPLOMATIC_PLAY_CLOSING_PHASE_START'))]"
			}
			
			### progress frame
			icon = {
				texture = "gfx/interface/diplomatic_plays/escalation_progress_frame_small.dds"
				size = { 100% 100% }
				parentanchor = center
			}
		}
		
		### left side
		flowcontainer = {
			datacontext = "[DiplomaticPlay.AccessInitiator]"
			parentanchor = vcenter|left
			position = { 12 0 }
			spacing = 7
			
			tiny_flag_no_interact = {
				parentanchor = vcenter

				blockoverride "tooltip" {}
			}
			
			flowcontainer = {
				direction = vertical
				
				flowcontainer = {
					tooltip = "DIPLO_PLAY_TOTAL_MOBILIZED_BATTALIONS_BREAKDOWN"
					margin_top = 2
					parentanchor = left
					spacing = 2

					icon = {
						size = { 20 20 }
						texture = "gfx/interface/icons/generic_icons/battalions.dds"
						parentanchor = vcenter
					}

					textbox = {
						autoresize = yes
						raw_text = "#variable [DiplomaticPlay.GetTotalNumMobilizedBattalionsForSide( Country.Self ) ]#!"
						align = nobaseline
					}

					textbox = {
						autoresize = yes
						raw_text = "/"
						align = nobaseline
					}

					textbox = {
						autoresize = yes
						raw_text = "#variable [DiplomaticPlay.GetTotalNumBattalionsForSide( Country.Self ) ]#!"
						align = nobaseline
						alpha = 0.5
					}
				}
				
				flowcontainer = {
					tooltip = "DIPLO_PLAY_TOTAL_FLOTILLAS_BREAKDOWN"
					spacing = 2
					
					icon = {
						size = { 20 20 }
						texture = "gfx/interface/icons/generic_icons/flotillas.dds"
						parentanchor = vcenter
					}

					textbox = {
						autoresize = yes
						text = "[DiplomaticPlay.GetTotalNumWarshipsForSide( Country.Self )|v]"
						align = nobaseline
					}
				}
			}
		}
		
		### right side
		flowcontainer = {
			datacontext = "[DiplomaticPlay.AccessTarget]"
			parentanchor = vcenter|right
			position = { -12 0 }
			spacing = 7
			
			flowcontainer = {
				direction = vertical
				
				flowcontainer = {
					tooltip = "DIPLO_PLAY_TOTAL_MOBILIZED_BATTALIONS_BREAKDOWN"
					parentanchor = right
					margin_top = 2
					spacing = 2

					textbox = {
						autoresize = yes
						raw_text = "#variable [DiplomaticPlay.GetTotalNumMobilizedBattalionsForSide( Country.Self ) ]#!"
						align = nobaseline
					}

					textbox = {
						autoresize = yes
						raw_text = "/"
						align = nobaseline
					}

					textbox = {
						autoresize = yes
						raw_text = "#variable [DiplomaticPlay.GetTotalNumBattalionsForSide( Country.Self ) ]#!"
						align = nobaseline
						alpha = 0.5
					}

					icon = {
						size = { 20 20 }
						texture = "gfx/interface/icons/generic_icons/battalions.dds"
						parentanchor = vcenter
					}
				}
				
				flowcontainer = {
					tooltip = "DIPLO_PLAY_TOTAL_FLOTILLAS_BREAKDOWN"
					parentanchor = right
					spacing = 2

					textbox = {
						autoresize = yes
						text = "[DiplomaticPlay.GetTotalNumWarshipsForSide( Country.Self )|v]"
						align = nobaseline
					}

					icon = {
						size = { 20 20 }
						texture = "gfx/interface/icons/generic_icons/flotillas.dds"
						parentanchor = vcenter
					}
				}
			}
			
			tiny_flag_no_interact = {
				parentanchor = vcenter

				blockoverride "tooltip" {}
			}
		}
	}

	### DIPLO PLAYS LIST
	type outliner_diplomatic_plays = flowcontainer {
		direction = vertical
		parentanchor = right
		
		datamodel_reuse_widgets = yes
		datacontext = "[Outliner.AccessCategory('diplo_plays')]"
		datamodel = "[OutlinerEntry.GetSubEntries]"
		visible = "[OutlinerEntry.IsShown]"
		spacing = 3
		margin_top = 3

		item = {
			diplomatic_play_item = {
				datacontext = "[OutlinerEntry.AccessScope.AccessDiplomaticPlay]"
			}
		}
	}

	### LAW ENACTMENT
	type outliner_law_enactment = container {
		datacontext = "[GetPlayer.GetLawBeingEnacted]"
		visible = "[Law.IsBeingEnacted]"

		flowcontainer = {
			direction = vertical

			enactment_button = {}

			outliner_law_enactment_events = {}
		}

		icon = {
			visible = no
			using = highlighted_square_selection
			size = { 100% 100% }
		}
	}

	### LAW ENACTMENT EVENTS LIST
	type outliner_law_enactment_events = flowcontainer {
		direction = vertical
		parentanchor = right
	
		datamodel = "[AccessPlayer.GetEventsByCategory('enactment')]"

		item = {
			event_item = {
				blockoverride "datacontext" {}

				blockoverride "button_size" {
					size = { 100% 100%}
				}

				blockoverride "highlight_visibility" {
					visible = yes
				}

				blockoverride "second_text_visibility" {
					visible = "[Law.HasEnactmentLastCheckpoint]"
				}

				blockoverride "second_text" {
					text = "LAW_EVENT_TITLE_OUTCOME"
				}

				blockoverride "right_text" {
					text = "LAW_EVENT_REMAINING_DAYS"
				}
			}
		}
	}

	### LAW ENACTMENT EVENTS LIST
	type law_enactment_events_vbox = vbox {
		layoutpolicy_horizontal = expanding
		spacing = 5
	
		datamodel = "[AccessPlayer.GetEventsByCategory('enactment')]"

		item = {
			event_item_hbox = {
				blockoverride "highlight_visibility" {
					visible = yes
				}

				blockoverride "second_text_visibility" {
					visible = "[Law.HasEnactmentLastCheckpoint]"
				}

				blockoverride "second_text" {
					text = "LAW_EVENT_TITLE_OUTCOME"
				}

				blockoverride "right_text" {
					text = "LAW_EVENT_REMAINING_DAYS"
				}
			}
		}
	}

	type enactment_button = button {

		block "size" {
			size = { 350 125 }
		}
		
		onclick = "[InformationPanelBar.OpenChangeLaw(Law.AccessSelf)]"
		using = default_button_primary
		tooltip = "[GetPlayer.GetLawEnactmentProgressDesc]"

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_top = 5
			spacing = 1

			hbox = {
				layoutpolicy_horizontal = expanding
				margin_left = 12
				margin_right = 2

				icon = {
					size = { 54 54 }
					texture = "gfx/interface/backgrounds/round_button_bg.dds"

					round_progress_default = {
						visible = "[GetPlayer.HasProgressingLawEnactment]"
						size = { 80% 80% }
						parentanchor = center
						datacontext = "[GetPlayer.GetLawBeingEnacted]"
						value = "[FixedPointToFloat(GetPlayer.GetLawEnactmentProgress)]"
					}

					round_progress_bad = {
						visible = "[Not(GetPlayer.HasProgressingLawEnactment)]"
						size = { 80% 80% }
						parentanchor = center
						datacontext = "[GetPlayer.GetLawBeingEnacted]"
						value = "[FixedPointToFloat(GetPlayer.GetLawEnactmentProgress)]"
					}

					law_icon = {
						alpha = "[TransparentIfTrue(Not(GetPlayer.HasProgressingLawEnactment))]"
						size = { 38 38 }
						parentanchor = center
					}

					paused_icon_bad = {
						visible = "[Not(GetPlayer.HasProgressingLawEnactment)]"
						parentanchor = center
					}
				}

				vbox = {
					spacing = 4
					layoutpolicy_horizontal = expanding
					min_width = 200

					textbox = {
						layoutpolicy_horizontal = expanding
						size = { 0 20 }
						align = center|nobaseline
						elide = right
						fontsize_min = 14
						text = "ENACTING_TO_LAW"
						
						background = {
							using = default_header_bg
							alpha = 1
							margin_bottom = 5
							margin_top = 5
							
							modify_texture = {
								texture = "gfx/interface/masks/fade_horizontal_center.dds"
								blend_mode = alphamultiply
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 10

						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 20 }
							align = right|nobaseline
							elide = right
							fontsize_min = 14
							text = "OUTCOME_SUCCESS_SHORT"
						}

						textbox = {
							layoutpolicy_horizontal = expanding
							size = { 0 20 }
							align = left|nobaseline
							elide = right
							fontsize_min = 14
							text = "OUTCOME_STALL"
						}
					}
				}

				expand = {
					layoutpolicy_horizontal = expanding
				}
			}

			hbox = {
				max_width = 330
				layoutpolicy_horizontal = preferred
				spacing = 1

				# Successes
				#Phase 0
				enactment_phase = {
					blockoverride "past_phase_parentanchor" {
						parentanchor = vcenter|right
					}

					blockoverride "past_phase_text_max_width" {
						max_width = 90
					}

					blockoverride "checkmark_position" {}
				}

				#Phase 1
				enactment_phase = {
					blockoverride "current_phase_visibility" {
						visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)1')]"
					}

					blockoverride "past_phase_visibility" {
						visible = "[GreaterThan_int32(Law.GetEnactmentPhase, '(int32)1')]"
					}

					blockoverride "not_reached_phase_visibility" {
						visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)1')]"
					}

					blockoverride "phase_name" {
						text = "[Law.GetCountry.GetCustom('enactment_phase_1')]"
					}

					blockoverride "past_phase_parentanchor" {
						parentanchor = vcenter|right
					}

					blockoverride "past_phase_text_max_width" {
						max_width = 90
					}

					blockoverride "checkmark_position" {}
				}

				#Phase 2
				enactment_phase = {
					blockoverride "current_phase_visibility" {
						visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)2')]"
					}

					blockoverride "past_phase_visibility" {
						visible = "[GreaterThan_int32(Law.GetEnactmentPhase, '(int32)2')]"
					}

					blockoverride "not_reached_phase_visibility" {
						visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)2')]"
					}

					blockoverride "phase_name" {
						text = "[Law.GetCountry.GetCustom('enactment_phase_2')]"
					}

					blockoverride "past_phase_parentanchor" {
						parentanchor = vcenter|right
					}

					blockoverride "past_phase_text_max_width" {
						max_width = 90
					}

					blockoverride "checkmark_position" {}
				}
			}

			# Setbacks
			hbox = {
				visible = "[GreaterThan_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)0')]"
				layoutpolicy_horizontal = preferred
				layoutpolicy_vertical = preferred
				spacing = 2
				max_width = 330
				expand = {}

				hbox = {
					layoutpolicy_horizontal = preferred
					spacing = 2

					expand = {}
					
					textbox = {
						autoresize = yes
						align = right|nobaseline
						text = "LAW_ENACTMENT_SETBACKS_LABEL"
						fontsize_min = 14
						elide = right
					}

					widget = {
						size = { 3 3 }
					}

					#Setback 1
					enactment_setback = {
						visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)1')]"

						blockoverride "has_setback_visibility" {
							visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)1')]"
						}
					}

					#Setback 2
					enactment_setback = {
						visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)2')]"

						blockoverride "has_setback_visibility" {
							visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)2')]"
						}
					}

					#Setback 3
					enactment_setback = {
						visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)3')]"

						blockoverride "has_setback_visibility" {
							visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)3')]"
						}
					}

					#Setback 4
					enactment_setback = {
						visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)4')]"

						blockoverride "has_setback_visibility" {
							visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)4')]"
						}
					}

					#Setback 5
					enactment_setback = {
						visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)5')]"

						blockoverride "has_setback_visibility" {
							visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)5')]"
						}
					}

					#Setback 6
					enactment_setback = {
						visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetMaxLawEnactmentSetbacks, '(int32)6')]"

						blockoverride "has_setback_visibility" {
							visible = "[GreaterThanOrEqualTo_int32(Law.GetEnactmentSetbackCount, '(int32)6')]"
						}
					}

					expand = {}

				}

				expand = {}
			}
		}
	}

	type enactment_setback = widget {
		size = { 25 25 }

		icon = {
			name = icon_frame
			size = { 25 25 }
			parentanchor = center
			texture = "gfx/interface/backgrounds/round_button_bg.dds"

			icon = {
				name = icon
				size = { 16 16 }
				parentanchor = center

				block "has_setback_visibility" {
					#visible = "[EqualTo_int32(Law.GetNumberOfSetbacks, '(int32)0')]"
				}

				block "icon_texture" {
					texture = "gfx/interface/icons/generic_icons/red_cross.dds"
				}
			}
		}
	}

	type enactment_phase = hbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = preferred
		
		block "max_width" {
			max_width = 360
		}

		# Is Current phase
		widget = {

			block "active_size" {
				size = { 110 28 }
			}

			block "current_phase_visibility" {
				visible = "[EqualTo_int32(Law.GetEnactmentPhase, '(int32)0')]"
			}

			icon = {
				using = highlighted_square_selection
			}

			textbox = {
				parentanchor = vcenter|hcenter
				align = nobaseline
				default_format = "#v"
				autoresize = yes
				fontsize_min = 14
				elide = right

				block "text_max_width" {
					max_width = 110
				}

				block "phase_name" {
					text = "[Law.GetCountry.GetCustom('enactment_phase_0')]"
				}
			}
		}

		# Past phase
		widget = {
			block "past_size" {
				size = { 110 28 }
			}

			alpha = 0.8

			block "past_phase_visibility" {
				visible = "[GreaterThan_int32(Law.GetEnactmentPhase, '(int32)0')]"
			}

			background = {
				using = entry_bg_simple
			}

			icon = {
				name = icon

				block "checkmark_position" {
					position = { 5 0 }
				}

				size = { 18 18 }
				parentanchor = vcenter

				block "past_phase_icon_texture" {
					texture = "gfx/interface/icons/generic_icons/checkmark.dds"
				}
			}

			textbox = {
				block "past_phase_parentanchor" {
					parentanchor = vcenter|hcenter
				}

				block "past_phase_align" {
					align = nobaseline
				}

				autoresize = yes
				fontsize_min = 14
				elide = right
				position = { -4 0 }

				block "past_phase_text_max_width" {
					max_width = 110
				}

				block "phase_name" {
					text = "[Law.GetCountry.GetCustom('enactment_phase_0')]"
				}
			}
		}

		# Not reached phase
		widget = {
			block "not_reached_size" {
				size = { 110 28 }
			}

			alpha = 0.3

			block "not_reached_phase_visibility" {
				visible = "[LessThan_int32(Law.GetEnactmentPhase, '(int32)0')]"
			}

			background = {
				using = entry_bg_simple
			}

			textbox = {
				parentanchor = vcenter|hcenter
				align = nobaseline
				autoresize = yes
				fontsize_min = 14
				elide = right

				block "text_max_width" {
					max_width = 110
				}

				block "phase_name" {
					text = "[Law.GetCountry.GetCustom('enactment_phase_0')]"
				}
			}
		}
	}

	### DIPLO PACTS ITEM
	type outliner_diplomatic_pact_item = button {
		size = { 350 35 }
		using = default_button
		tooltip = "[DiplomaticPact.GetTooltip]"

		onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
		onrightclick = "[RightClickMenuManager.ShowForCountry(Country.AccessSelf)]"
		onmousehierarchyenter = "[AccessHighlightManager.HighlightCountry(Country.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 0 }
			spacing = 10
				
			icon = {
				size = { 30 30 }
				texture = [DiplomaticPact.GetDiplomaticActionType.GetTexture]
			}
			
			tiny_flag_no_interact = {
				blockoverride "tooltip" {}
			}
			
			hbox = {
				layoutpolicy_horizontal = expanding
				spacing = 5
				
				textbox = {
					layoutpolicy_horizontal = expanding
					size = { 0 20 }
					raw_text = "#BOLD [Country.GetRelationsWithDesc( GetPlayer )]#! ([Country.GetRelationsWith(GetPlayer)|+])"
					elide = right
					fontsize_min = 10
					align = nobaseline
				}
				
				default_progressbar_horizontal = {
					# if no daily progress - show total relations level
					visible = "[Not( DiplomaticPact.HasDailyRelationsProgress )]"
					size = { 90 4 }
					
					blockoverride "values" {
						value = "[IntToFloat(Country.GetRelationsWith( GetPlayer ))]"
						min = "[GetDefine('NDiplomacy', 'MIN_RELATIONS')]"
						max = "[GetDefine('NDiplomacy', 'MAX_RELATIONS')]"
					}
				}
				
				changed_value_increased_progressbar_horizontal = {
					# if improving relations - show relations progress between 0 --> 100
					visible = "[GreaterThan_CFixedPoint( DiplomaticPact.GetDailyRelationsProgress, '(CFixedPoint)0' )]"
					size = { 90 4 }
					
					blockoverride "values" {
						min = 0
						max = "[GetDefine('NDiplomacy', 'REQUIRED_IMPROVE_RELATIONS_PROGRESS')]"
						value = "[FixedPointToFloat(Country.GetRelationsProgress( GetPlayer ))]"
					}
				}
				
				changed_value_decreased_progressbar_horizontal = {
					# if damaging relations - show relations progress between -100 <-- 0
					visible = "[LessThan_CFixedPoint( DiplomaticPact.GetDailyRelationsProgress, '(CFixedPoint)0' )]"
					size = { 90 4 }
					
					blockoverride "values" {
						min = "[GetDefine('NDiplomacy', 'REQUIRED_DAMAGE_RELATIONS_PROGRESS')]"
						max = 0
						value = "[FixedPointToFloat(Country.GetRelationsProgress( GetPlayer ))]"
					}
				}
			}
		}
	}

	### DIPLO PACTS LIST
	type outliner_diplomatic_pacts = flowcontainer {
		datacontext = "[Outliner.AccessCategory('diplo_pacts')]"
		visible = "[OutlinerEntry.IsShown]"
		parentanchor = right
		direction = vertical

		background = {
			using = default_background
			alpha = 1
			margin_right = 15
			
			modify_texture = {
				texture = "gfx/interface/masks/fade_horizontal_left.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = alphamultiply
				alpha = 0.5
			}
		}

		outliner_group = {
			blockoverride "visibility" {
				visible = "[GreaterThan_int32(OutlinerEntry.GetNumSubEntries, '(int32)1')]"
			}

			blockoverride "title_text" {
				text = "ONGOING_DIPLOMATIC_ACTIONS_CONCEPT"
				default_format = "#v"
			}

			blockoverride "item" {
				outliner_diplomatic_pact_item = {
					datacontext = "[OutlinerEntry.AccessScope.AccessDiplomaticPact]"
					datacontext = "[DiplomaticPact.GetSecondCountry]"
				}
			}

			blockoverride "fixedgridbox_cell_size" {
				addcolumn = 350
				addrow = 35
			}

			blockoverride "pin_button_onhover_animation" {}
		}

		flowcontainer = {
			visible = "[Not(GreaterThan_int32(OutlinerEntry.GetNumSubEntries, '(int32)1'))]"
			parentanchor = hcenter
			direction = vertical
			datamodel = "[OutlinerEntry.GetSubEntries]"

			item = {
				outliner_diplomatic_pact_item = {
					datacontext = "[OutlinerEntry.AccessScope.AccessDiplomaticPact]"
					datacontext = "[DiplomaticPact.GetSecondCountry]"
				}
			}
		}
	}

	### PLAYERS LIST
	type outliner_players = flowcontainer {
		datacontext = "[Outliner.AccessCategory('players')]"
		visible = "[GameIsMultiplayer]"
		parentanchor = right
		direction = vertical

		background = {
			using = default_background
			alpha = 1
			margin_right = 15
			
			modify_texture = {
				texture = "gfx/interface/masks/fade_horizontal_center.dds"
				spriteType = Corneredstretched
				spriteborder = { 0 0 }
				blend_mode = alphamultiply
				alpha = 0.5
			}
		}

		section_header_button = {
			blockoverride "layout" {
				size = { @entry_width 30 }
			}

			blockoverride "arrow_size" {
				size = { 18 18 }
			}

			blockoverride "arrow_position" {
				position = { 7 0 }
				parentanchor = vcenter
			}

			blockoverride "fontsize" {}

			blockoverride "left_textbox_default_format" {
				default_format = "#v"
			}

			blockoverride "left_textbox_margin_left" {
				margin_left = 30
			}

			blockoverride "left_text" {
				text = "PLAYERS"
			}

			blockoverride "right_text" {
				textbox = {
					layoutstretchfactor_horizontal = 1
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					margin_right = 25
					elide = right
					align = right|nobaseline
					alwaystransparent = yes
					fontsize_min = 12
					text = "[GetDataModelSize(Outliner.AccessPlayers)]"
				}
			}

			blockoverride "onclick" {
				onclick = "[OutlinerEntry.ToggleExpanded]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(OutlinerEntry.IsExpanded)]"
			}

			blockoverride "onclick_showless" {
				visible = "[OutlinerEntry.IsExpanded]"
			}
		}

		container = {
			block "list_visibility" {
				visible = "[OutlinerEntry.IsExpanded]"
			}

			fixedgridbox = {
				block "fixedgridbox_cell_size" {
					addcolumn = @entry_width
					addrow = 50
				}

				block "datamodel" {
					datamodel = "[Outliner.AccessPlayers]"
				}

				item = {
					block "item" {
						player_item = {}
					}
				}
			}
		}
	}

	### EVENT ITEM
	type event_item = widget {

		block "datacontext" {
			datacontext = "[OutlinerEntry.AccessSituation]"
		}

		block "size" {
			size = { 350 35 }
		}

		block "tooltip" {
			tooltip = "[Event.GetTooltip]"
		}
		
		widget = {
			# TODO [SW]: PSGE-5093 - workaround to make data function sound always play
			size = { 0 0 }
			state = {
				name = _show
				trigger_on_create = yes
				duration = 0.5
				alpha = 1
				start_sound = {
					soundeffect = "[Event.GetOnCreatedSoundEvent]"
				}
			}
		}
		
		button = {
			parentanchor = vcenter
			using = default_button
			onclick = "[PopupManager.OpenEvent(Event.AccessSelf)]"
			using = shimmer

			block "button_size" {
				size = { 347 30 }
			}
			
			# highlight when 60 days left
			highlight_tutorial = {
				block "highlight_size" {
					size = { 340 24 }
				}

				block "highlight_visibility" {
					visible = "[LessThanOrEqualTo_int32( Event.GetNumRemainingDays, '(int32)60')]"
				}
			}
		}
		
		hbox = {
			spacing = 5

			icon = {
				block "icon_size" {
					size = { 35 35 }
				}

				texture = "[Event.GetEventIcon]"
			}
			
			textbox = {
				layoutpolicy_horizontal = expanding

				block "left_text_size" {
					size = { 0 20 }
				}

				block "event_name" {
					text = "[Event.GetTitle]"
				}

				align = left|nobaseline
				fontsize_min = 14
				elide = right
			}

			textbox = {
				autoresize = yes

				block "second_text_visibility" {
					visible = no
				}

				block "left_text_size" {
					size = { 0 20 }
				}

				block "second_text" {}

				align = left|nobaseline
				fontsize_min = 14
				elide = right
				margin = { 5 0 }
			}

			textbox = {
				autoresize = yes
				block "right_text_size" {
					size = { 0 20 }
				}

				block "right_text" {
					text = "EVENT_REMAINING_DAYS"
				}
				
				align = right|nobaseline
				elide = right
				using = fontsize_small
				margin_right = 10
			}
		}
	}

	### EVENT ITEM
	type event_item_hbox = hbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = preferred

		block "tooltip" {
			tooltip = "[Event.GetTooltip]"
		}
		
		widget = {
			# TODO [SW]: PSGE-5093 - workaround to make data function sound always play
			size = { 0 0 }
			state = {
				name = _show
				trigger_on_create = yes
				duration = 0.5
				alpha = 1
				start_sound = {
					soundeffect = "[Event.GetOnCreatedSoundEvent]"
				}
			}
		}
		
		button = {
			layoutpolicy_horizontal = expanding
			size = { 0 35 }

			using = default_button
			onclick = "[PopupManager.OpenEvent(Event.AccessSelf)]"
			using = shimmer
			
			# highlight when 60 days left
			highlight_tutorial = {
				size = { 99% 26 }

				block "highlight_visibility" {
					visible = "[LessThanOrEqualTo_int32( Event.GetNumRemainingDays, '(int32)60')]"
				}
			}

			hbox = {
				layoutpolicy_vertical = preferred
				spacing = 5

				icon = {
					block "icon_size" {
						size = { 35 35 }
					}

					texture = "[Event.GetEventIcon]"
				}
				
				textbox = {
					layoutpolicy_horizontal = expanding

					block "left_text_size" {
						size = { 0 20 }
					}

					block "event_name" {
						text = "[Event.GetTitle]"
					}

					align = left|nobaseline
					fontsize_min = 14
					elide = right
				}

				textbox = {
					autoresize = yes

					block "second_text_visibility" {
						visible = no
					}

					block "left_text_size" {
						size = { 0 20 }
					}

					block "second_text" {}

					align = left|nobaseline
					fontsize_min = 14
					elide = right
					margin = { 5 0 }
				}

				textbox = {
					autoresize = yes
					block "right_text_size" {
						size = { 0 20 }
					}

					block "right_text" {
						text = "EVENT_REMAINING_DAYS"
					}
					
					align = right|nobaseline
					elide = right
					using = fontsize_small
					margin_right = 10
				}
			}
		}
	}
	
	### EVENTS LIST
	type outliner_events = flowcontainer {
		direction = vertical
		parentanchor = right
		
		datacontext = "[Outliner.AccessCategory('situations')]"
		datamodel = "[OutlinerEntry.GetSubEntries]"

		item = {
			event_item = {}
		}
	}
	
	### JOURNAL ENTRY
	type outliner_journal_entry = journal_entry {
		using = default_list_position
		blockoverride "button_style" {
			using = glow_button
		}
		blockoverride "background" {
			background = {
				using = dark_area
				alpha = 0.3
				
				modify_texture = {
					texture = "gfx/interface/masks/fade_horizontal_center.dds"
					blend_mode = alphamultiply
					alpha = 1
				}
			}
			
			divider_clean = {
				size = { 95% 2 }
				parentanchor = hcenter|bottom
			}
		}

		visible = "[And(JournalEntry.IsValid, JournalEntry.IsPinnedInOutliner)]"
		
		blockoverride "flowcontainer_properties" {
			margin = { 4 4 }
			spacing = 4
		}
		blockoverride "minimumsize" {
			minimumsize = { 340 -1 }
		}
		blockoverride "textsize" {
			maximumsize = { 275 50 }
			minimumsize = { 275 -1 }
			fontsize_min = 14
		}
		blockoverride "fontsize" {}
		blockoverride "iconsize" {
			size = { 27 27 }
		}
		blockoverride "completing_iconsize" {
			size = { 18 18 }
		}
		blockoverride "progressbar_size" {
			size = { 265 10 }
		}
	}
	
	### JOURNAL ENTRIES LIST
	type outliner_journal_entries = flowcontainer {
		direction = vertical
		parentanchor = hcenter
		
		# OBJECTIVES / TUTORIAL
		textbox = {
			visible = "[GetPlayer.HasObjective]"
			raw_text = "#title [AccessPlayer.GetObjective.GetName]#!"
			autoresize = yes
			multiline = yes
			align = left|nobaseline
			minimumsize = { 340 -1 }
			maximumsize = { 340 -1 }
			margin = { 10 6 }
			
			background = {
				using = default_header_bg
				margin = { -2 0 }
			}

			flowcontainer = {
				visible = "[Not(AccessPlayer.IsObjectiveIdle)]"
				parentanchor = right|vcenter
				position = { -3 0 }
				spacing = 5

				flowcontainer = {
					visible = "[And(GetPlayer.HasObjective, Not(IsDataModelEmpty(AccessPlayer.AccessActivePlayerObjectiveJournalEntries)))]"

					flowcontainer = {
						visible = "[NotEqualTo_int32(GetDataModelSize(AccessPlayer.AccessActivePlayerObjectiveJournalEntries), GetDataModelSize(AccessPlayer.AccessActivePinnedPlayerObjectiveJournalEntries))]"
						spacing = 5

						textbox = {
							text = "NUMBER_OF_PLAYER_OBJECTIVE_JOURNAL_ENTRIES_SHORT"
							autoresize = yes
							align = left|nobaseline
						}
					}
				}

				button_icon_goto = {
					size = { 25 25 }
					onclick = "[InformationPanelBar.OpenPanelTab('journal', 'default')]"
					tooltip = "GO_TO_BUTTON_JOURNAL"
				}
			}
		}

		textbox = {
			visible = "[GetPlayer.IsObjectiveIdle]"
			text = "[AccessPlayer.GetObjective.GetObjectiveType.GetIdleHeader]"
			autoresize = yes
			multiline = yes
			align = nobaseline
			minimumsize = { 340 -1 }
			maximumsize = { 340 -1 }
			margin = { 10 0 }
			margin_top = 5
			using = fontsize_large
		}

		textbox = {
			visible = "[GetPlayer.IsObjectiveIdle]"
			text = "[AccessPlayer.GetObjective.GetObjectiveType.GetIdleHint]"
			autoresize = yes
			multiline = yes
			align = nobaseline
			minimumsize = { 340 -1 }
			maximumsize = { 340 -1 }
			margin = { 10 0 }
			margin_bottom = 5
		}


		flowcontainer = {
			direction = vertical
			parentanchor = hcenter
			datamodel = "[AccessPlayer.AccessActivePlayerObjectiveJournalEntries]"
			
			item = {
				outliner_journal_entry = {}
			}
		}
		
		# OTHER JOURNAL ENTRIES
		textbox = {
			text = "ACTIVE_JOURNAL_ENTRIES"
			autoresize = yes
			multiline = yes
			align = left|nobaseline
			minimumsize = { 340 -1 }
			maximumsize = { 340 -1 }
			margin = { 10 6 }
			
			background = {
				using = default_header_bg
				margin = { -2 0 }
			}

			flowcontainer = {
				parentanchor = right|vcenter
				position = { -3 0 }
				spacing = 5

				textbox = {

					visible = "[And( Not( IsDataModelEmpty(AccessPlayer.AccessActiveNonPlayerObjectiveJournalEntries) ), NotEqualTo_int32( GetDataModelSize(AccessPlayer.AccessActiveNonPlayerObjectiveJournalEntries), GetDataModelSize(AccessPlayer.AccessActivePinnedNonPlayerObjectiveJournalEntries)))]"
					text = "NUMBER_OF_NON_PLAYER_OBJECTIVE_JOURNAL_ENTRIES_SHORT"
					autoresize = yes
					parentanchor = vcenter
					align = right|nobaseline
					elide = right
					fontsize_min = 14
					minimumsize = { 180 -1 }
					maximumsize = { 180 -1 }
				}

				textbox = {
					visible = "[IsDataModelEmpty(AccessPlayer.AccessActiveNonPlayerObjectiveJournalEntries)]"
					text = "NO_JOURNAL_ENTRIES_OUTLINER"
					autoresize = yes
					align = nobaseline
				}
				
				button_icon_goto = {
					size = { 25 25 }
					onclick = "[InformationPanelBar.OpenPanelTab('journal', 'default')]"
					tooltip = "GO_TO_BUTTON_JOURNAL"
				}
			}
		}

		flowcontainer = {
			direction = vertical
			parentanchor = hcenter
			visible = "[Not(IsDataModelEmpty(AccessPlayer.AccessActivePinnedNonPlayerObjectiveJournalEntries))]"
			datamodel = "[AccessPlayer.AccessActivePinnedNonPlayerObjectiveJournalEntries]"

			item = {
				outliner_journal_entry = {}
			}
		}
	}
	
	### REVOLUTIONARY POLITICAL MOVEMENT ITEM
	type outliner_revolutionary_political_movement_item = flowcontainer {
		direction = vertical

		datacontext = "[AccessPlayer.GetGrowingCivilWar.AccessPoliticalMovement]"
		visible = "[AccessPlayer.GetGrowingCivilWar.IsValid]"

		onmousehierarchyenter = "[AccessHighlightManager.HighlightPoliticalMovement(PoliticalMovement.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

		tooltipwidget = {
			FancyTooltip_PoliticalMovement = {}
		}

		state = {
			name = _show
			
			start_sound = {
				soundeffect = "event:/SFX/DLC/1.3_ip1/UI/item_revolutionary_movt"
			}
		}

		widget = {
			size = { 350 120 }
			parentanchor = top

			alpha = 0 

			###REVOLUTION ANIMATION###
			state = {
				#name = _show
				name = testing
				trigger_on_create = yes
				alpha = 1
				delay = 0.2
				duration = 0.7
				on_start = "[PdxGuiWidget.FindChild('revolution_button').TriggerAnimation('1')]"
				on_start = "[PdxGuiWidget.FindChild('interest_group_top').TriggerAnimation('show')]"
			}

			widget = {
				parentanchor = bottom
				size = { 100% 110 }

				button = {
					size = { 0 10 }
					name = revolution_button
					onclick = "[InformationPanelBar.OpenPoliticalMovementPanel(PoliticalMovement.AccessSelf)]"
					onrightclick = "[RightClickMenuManager.ShowForPoliticalMovement(PoliticalMovement.AccessSelf)]"
					using = default_button
					parentanchor = top|right

					state = {
						name = 1
						next = 2
						size = { 380 10 }
						delay = 0.2
						duration = 0.08
						using = Animation_Curve_Default
					}

					state = {
						name = 2
						next = 3
						size = { 350 10 }
						delay = 0.1
						duration = 0.05
						using = Animation_Curve_EaseOut
					}

					state = {
						name = 3
						next = 4
						size = { 350 140 }
						delay = 0.1
						duration = 0.08
						using = Animation_Curve_Default
					}

					state = {
						name = 4
						size = { 350 110 }
						delay = 0.1
						duration = 0.05
						using = Animation_Curve_EaseOut
						on_finish = "[PdxGuiWidget.FindChild('outliner_info').TriggerAnimation('show')]"
						on_finish = "[PdxGuiWidget.FindChild('revolution_clock').TriggerAnimation('show')]"
					}

					vfx = {
						size = { 100% 200% }
						blockoverride "entity_instance" {
							entity_instance = vfx_ui_plane_war_panel_fire_plane_entity
						}
						
						alpha = 0.2
					}

					icon = {
						visible = "[PoliticalMovement.IsBeingHighlighted]"
						using = highlighted_square_selection
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						name = outliner_info
						margin_left = 8
						alpha = 0

						state = {
							name = show
							alpha = 1
							delay = 0.45
							duration = 0.1
							using = Animation_Curve_Default
						}

						widget = {
							size = { 100 100 }

							widget = {
								name = revolution_clock
								size = { 0 0 }
								parentanchor = center

								###REVOLUTION CLOCK ANIMATION###
								state = {
									name = show
									next = 2
									delay = 0.35
									size = { 180 180 }
									duration = 0.1
									using = Animation_Curve_Default
								}

								state = {
									name = 2
									size = { 100 100 }
									delay = 0.05
									duration = 0.1
									using = Animation_Curve_EaseOut
								}

								icon = {
									using = rotate_glow_animation_02
									blockoverride "rotate_animation_texture" {
										texture = "gfx/interface/animation/color_bad.dds"
									}
									size = { 250% 250% }
									parentanchor = center
								}

								round_progress_bad = {
									size = { 80% 80% }
									position = { 0 7 }
									value = "[FixedPointToFloat(AccessPlayer.GetGrowingCivilWar.GetClockTime)]"
									parentanchor = center
								}
								
								icon = {
									size = { 100% 100% }
									texture = "gfx/interface/backgrounds/revolution_clock_frame.dds"
								}

								icon = {
									parentanchor = center
									position = { 0 5 }
									size = { 50 50 }
									texture = "[PoliticalMovement.GetTexture]"
								}
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							margin_top = 10
							margin_right = 15

							### REVOLUTION PROGRESSBAR ###
							widget = {
								size = { 230 25 }

								revolution_progress_bar = {
									blockoverride "datacontext" {
										datacontext = "[AccessPlayer.GetGrowingCivilWar]"
									}
								}
							}

							### Movement Header ###
							hbox = {
								layoutpolicy_horizontal = expanding
								margin = { 0 5 }

								background = {
									using = dark_area
									alpha = 0.4
									
									modify_texture = {
										texture = "gfx/interface/masks/fade_horizontal_center.dds"
										blend_mode = alphamultiply
									}
								}

								textbox = {
									layoutpolicy_horizontal = expanding
									size = { 0 20 }
									align = right|nobaseline
									elide = right
									fontsize_min = 12
									text = "[PoliticalMovement.GetNameNoFormatting]"	
								}
							}

							hbox = {
								layoutpolicy_horizontal = expanding
								spacing = 2

								widget = {
									size = { 30 30 }
									visible = "[IsDataModelEmpty(PoliticalMovement.GetTopSupportingCharacters)]"
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 2

									expand = {}
									
									icon = {
										size = { 30 30 }
										texture = "gfx/interface/icons/generic_icons/battalions.dds"
									}

									textbox = {
										autoresize = yes
										align = nobaseline
										elide = right
										fontsize_min = 12
										default_format = "#v"
										text = "[PoliticalMovement.GetCivilWar.GetNumUprisingBattalions]"
									}

									widget = {
										size = { 5 5 }
									}									

									icon = {
										size = { 30 30 }
										texture = "gfx/interface/icons/generic_icons/flotillas.dds"
									}

									textbox = {
										autoresize = yes
										align = nobaseline
										elide = right
										fontsize_min = 12
										default_format = "#v"
										text = "[PoliticalMovement.GetCivilWar.GetNumUprisingFlotillas]"
									}	

									widget = {
										size = { 5 5 }
									}									

									icon = {
										size = { 30 30 }
										texture = "gfx/interface/icons/generic_icons/state.dds"
									}

									textbox = {
										autoresize = yes
										align = nobaseline
										elide = right
										fontsize_min = 12
										default_format = "#v"
										text = "[PoliticalMovement.GetCivilWar.GetNumUprisingStates]"
									}
								}
							}
						}
					}
				}
			}

			
			### Interest Groups
			flowcontainer = {
				datacontext = "[AccessPlayer.GetGrowingCivilWar]"
				visible = "[Not(IsDataModelEmpty(CivilWar.AccessInsurrectionaryIGs(GetPlayer)))]"
				datamodel = "[CivilWar.AccessInsurrectionaryIGs(GetPlayer)]"
				parentanchor = hcenter
				alpha = 0
				name = "interest_group_top"

				state = {
					name = show
					alpha = 1
					delay = 1.4
					duration = 0.2
					using = Animation_Curve_Default
				}
				item = {
					ig_button = {
						size = { 26 26 }
						
						tooltipwidget = {
						 	FancyTooltip_IG = {}
						}
					}
				}
			}
		}

		outliner_revolutionary_movement_events = {}
	}

	### REVOLUTIONARY MOVEMENT EVENT LIST
	type outliner_revolutionary_movement_events = flowcontainer {
		direction = vertical
		parentanchor = right
	
		datamodel = "[AccessPlayer.GetEventsByCategory('revolution')]"

		item = {
			event_item = {
				blockoverride "datacontext" {}

				blockoverride "button_size" {
					size = { 100% 100%}
				}

				blockoverride "highlight_visibility" {
					visible = yes
				}

				blockoverride "second_text_visibility" {
					visible = no
				}

				blockoverride "right_text" {
					text = "EVENT_REMAINING_DAYS"
				}
			}
		}
	}

	### ELECTION
	type outliner_election = button {
		using = default_list_position
		size = { 350 35 }
		using = default_button
		visible = "[AccessPlayer.IsInElectionCampaignPeriod]"
		onclick = "[InformationPanelBar.OpenElectionPanel(AccessPlayer)]"
		tooltip = "[AccessPlayer.GetElectionPollTooltip]"

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 0 }
			spacing = 5

			icon = {
				size = { 30 30 }
				texture = "gfx/interface/icons/event_icons/event_default.dds"
			}

			textbox = {
				text = "DAYS_UNTIL_ELECTION"
				layoutpolicy_horizontal = expanding
				size = { 0 20 }
				align = left|nobaseline
				elide = right
			}

			textbox = {
				text = "ELECTION_REMAINING_DAYS"
				autoresize = yes
				align = nobaseline
			}
		}
	}
}
