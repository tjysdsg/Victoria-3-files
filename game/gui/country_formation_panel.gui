@panel_width = 540
@panel_width_minus_10 = 530
@panel_width_minus_20 = 520

types country_formation_types
{
	type country_formation_panel = default_block_window_two_lines {
		name = "country_formation_panel"
		datacontext = "[CountryFormationPanel.AccessCountryFormation]"
		
		blockoverride "window_header_name" {
			text = "COUNTRY_FORMATION_HEADER"
		}

		blockoverride "window_header_name_line_two"
		{
			text = "COUNTRY_FORMATION_TYPE"
		}
		
		blockoverride "scrollarea_content" {	
			flowcontainer = {
				direction = vertical
				using = default_list_position
				datacontext = "[CountryFormationPanel.AccessCountryFormation]"

				margin_top = 5
				spacing = 12

				textbox = {
					parentanchor = hcenter
					using = fontsize_large
					text = "FORM_COUNTRY_CULTURES"

					align = center|nobaseline
					maximumsize = { @panel_width_minus_20 -1 }
					multiline = yes
					autoresize = yes
				}

				flowcontainer = {
					parentanchor = hcenter
					direction = horizontal				
					
					button = {
						visible = "[CountryFormation.IsMajorFormation]"
						enabled = "[CountryFormation.CanLaunchUnificationPlay]"		
						onclick = "[CountryFormation.ShowUnificationPlayConfirmation]"
						text = "FORM_COUNTRY_LAUNCH_UNIFICATION_PLAY"
						tooltip = "FORM_COUNTRY_LAUNCH_UNIFICATION_PLAY_TOOLTIP"
						using = default_button
						size = { 250 75 }
					}	
					
					widget = { 
						visible = "[CountryFormation.IsMajorFormation]"
						size = { 10 10 } 
					}
					
					button = {
						visible = "[CountryFormation.IsMajorFormation]"
						enabled = "[IsValid(CountryFormation.FormCountry(GetPlayer))]"		
						onclick = "[Execute(CountryFormation.FormCountry(GetPlayer))]"
						using = default_button
						size = { 250 75 }
						tooltip = "FORM_COUNTRY_TOOLTIP"

						textbox = {
							max_width = 230
							autoresize = yes
							multiline = yes
							text = "FORM_COUNTRY"
							elide = right
							align = nobaseline|hcenter
							fontsize_min = 16
							using = fontsize_large
							parentanchor = center
						}	
					}

					button = {
						visible = "[Not(CountryFormation.IsMajorFormation)]"
						enabled = "[IsValid(CountryFormation.FormCountry(GetPlayer))]"		
						onclick = "[Execute(CountryFormation.FormCountry(GetPlayer))]"
						using = default_button
						size = { 530 75 }
						tooltip = "FORM_COUNTRY_TOOLTIP"

						textbox = {
							max_width = 500
							autoresize = yes
							multiline = yes
							text = "FORM_COUNTRY"
							elide = right
							align = nobaseline|hcenter
							fontsize_min = 16
							using = fontsize_large
							parentanchor = center
						}	
					}
				}
				
				divider_decorative = {}
				
				# Countries and flags if IsMajorFormation
				flowcontainer = {
					parentanchor = hcenter
					direction = vertical
					visible = "[CountryFormation.IsMajorFormation]"
					spacing = 6
									
					textbox = {
						parentanchor = hcenter
						using = fontsize_large
						text = "FORM_COUNTRY_CANDIDATES_HEADER"

						align = center|nobaseline
						maximumsize = { @panel_width_minus_20 -1 }
						multiline = yes
						autoresize = yes
					}	
					
					textbox = {
						visible = "[IsDataModelEmpty(CountryFormation.AccessFormationCandidates)]"
						parentanchor = hcenter
						using = fontsize_large
						text = "FORM_COUNTRY_CANDIDATES_EMPTY"
						autoresize = yes
					}						

					flowcontainer = {
						datamodel = "[CountryFormation.AccessFormationCandidates]"
						direction = vertical
						parentanchor = hcenter

						item = {
							
							flowcontainer = {	
								minimumsize = { 500 100 }
								spacing = 20
								
								background = {
									using = entry_bg_simple
								}
								widget = {
									size = { 1 1 }
								}
								
								flag_icon = {
									parentanchor = vcenter
									size = { 48 32 }
									framesize = "[GetMediumFlagFrameSize]"

									# Using medium size textures in small flag for better downscaling of flag details
									block "flag_definition" {
										texture = "[Country.GetFlag.GetMediumFlagTexture]"
										frame = "[Country.GetFlag.GetMediumFlagFrame]"
									}
									
									block "flag_tooltip" {
										tooltipwidget = {
											FancyTooltip_Country = {}
										}
									}
								}

								flowcontainer = {
									direction = vertical
									parentanchor = vcenter
									textbox = {
										using = fontsize_large
										text = "[Country.GetNameNoFlag]"
										align = nobaseline
										autoresize = yes
										maximumsize = { 200 30 }
										elide = right
										fontsize_min = 12
									}	
									
									textbox = {
										visible = "[GreaterThan_int32( CountryFormation.GetNumSupportingCountries(Country.Self), '(int32)0' )]"
										using = fontsize_large
										text = "FORM_COUNTRY_SUPPORTING_COUNTRIES"
										tooltip = "FORM_COUNTRY_SUPPORTING_COUNTRIES_TOOLTIP"
										autoresize = yes
										align = nobaseline
										maximumsize = { 200 30 }
										elide = right
										fontsize_min = 12
									}
									textbox = {
										visible = "[Not(GreaterThan_int32( CountryFormation.GetNumSupportingCountries(Country.Self), '(int32)0' ))]"
										using = fontsize_large
										text = "FORM_COUNTRY_NO_SUPPORTING_COUNTRIES"
										tooltip = "FORM_COUNTRY_NO_SUPPORTING_COUNTRIES_TOOLTIP"
										autoresize = yes
										align = nobaseline
										maximumsize = { 200 30 }
										elide = right
										fontsize_min = 12
									}									
								}						
								
								button = {
									parentanchor = vcenter
									visible = "[And(Not(CountryFormation.IsCandidateForFormation(GetPlayer)),Not(CountryFormation.IsSupportingCandidate(GetPlayer, Country.Self)))]"
									enabled = "[IsValid(CountryFormation.SupportCandidate(GetPlayer, Country.Self))]"		
									onclick = "[Execute(CountryFormation.SupportCandidate(GetPlayer, Country.Self))]"
									text = "FORM_COUNTRY_SUPPORT_CANDIDATE"
									tooltip = "FORM_COUNTRY_SUPPORT_CANDIDATE_TOOLTIP"
									using = default_button
									size = { 185 60 }
								}
								
								button = {
									parentanchor = vcenter
									visible = "[And(CountryFormation.IsCandidateForFormation(GetPlayer),Not(Country.IsLocalPlayer))]"
									enabled = "[CountryFormation.CanLaunchLeadershipPlay(Country.Self)]"		
									onclick = "[CountryFormation.ShowLeadershipPlayConfirmation(Country.Self)]"
									text = "FORM_COUNTRY_LAUNCH_LEADERSHIP_PLAY"
									tooltip = "FORM_COUNTRY_LAUNCH_LEADERSHIP_PLAY_TOOLTIP"
									using = default_button
									size = { 185 60 }
								}								
								button = {
									parentanchor = vcenter
									visible = "[And(Not(CountryFormation.IsCandidateForFormation(GetPlayer)),CountryFormation.IsSupportingCandidate(GetPlayer, Country.Self))]"
									enabled = "[IsValid(CountryFormation.SupportCandidate(GetPlayer, Country.Self))]"		
									onclick = "[Execute(CountryFormation.SupportCandidate(GetPlayer, Country.Self))]"
									text = "FORM_COUNTRY_STOP_SUPPORTING_CANDIDATE"
									tooltip = "FORM_COUNTRY_STOP_SUPPORTING_CANDIDATE_TOOLTIP"
									using = default_button
									size = { 185 60 }
								}								
							}
						}					
					}
					
					divider_decorative = {}					
				}			
				
				# Culture countries and flags
				flowcontainer = {
					parentanchor = hcenter
					direction = vertical
					spacing = 6
									
					textbox = {
						parentanchor = hcenter
						using = fontsize_large
						text = "FORM_COUNTRY_CULTURE_COUNTRIES_HEADER"

						align = center|nobaseline
						maximumsize = { @panel_width_minus_20 -1 }
						multiline = yes
						autoresize = yes
					}	

					dynamicgridbox = {
						parentanchor = hcenter
						datamodel = "[CountryFormation.AccessFormationCultureCountries]"
						flipdirection = yes
						block "datamodel_wrap" {
							datamodel_wrap = 8
						}
						
						item = {
							container = {
								minimumsize = { 60 40 }

								small_flag = {
									visible = "[Not(CountryFormation.IsMajorFormation)]"
									parentanchor = center

									blockoverride "flag_tooltip" {
										tooltipwidget = {
											FancyTooltip_Country = {}
										}
									}
								}

								small_flag = {
									visible = "[CountryFormation.IsMajorFormation]"
									parentanchor = center

									blockoverride "flag_tooltip" {
										tooltip = "FORM_COUNTRY_SUPPORT_BREAKDOWN"
									}
								}
								
								flag_icon = {
									size = { 24 16 }
									visible = "[And(CountryFormation.IsMajorFormation, CountryFormation.IsSupportingAnyCandidate(Country.Self))]"
									parentanchor = top|right
									framesize = "[GetSmallFlagFrameSize]"

									block "flag_definition" {			
										texture = "[CountryFormation.GetSupportedCandidateCountry(Country.Self).GetFlag.GetSmallFlagTexture]"
										frame = "[CountryFormation.GetSupportedCandidateCountry(Country.Self).GetFlag.GetSmallFlagFrame]"			
									}

									blockoverride "flag_tooltip" {
										tooltip = "FORM_COUNTRY_SUPPORTING_COUNTRY"
									}
								}
							}
						}
					}
				}

				divider_decorative = {}
				
				# Controlled state regions
				flowcontainer = {
					parentanchor = hcenter
					direction = vertical
					spacing = 6
					maximumsize = { @panel_width -1 }

					textbox = {
						parentanchor = hcenter
						using = fontsize_large
						text = "FORM_COUNTRY_STATE_REGIONS_HEADER"
						autoresize = yes
						elide = right
						fontsize_min = 14
						max_width = @panel_width_minus_10
					}

					textbox = {
						parentanchor = hcenter
						text = "FORM_COUNTRY_STATE_REGIONS_REQUIRED"
						autoresize = yes
						elide = right
						fontsize_min = 14
						max_width = @panel_width_minus_10
					}															

					dynamicgridbox = {
						datamodel = "[CountryFormation.AccessFormationStateRegions]"
						parentanchor = hcenter
						flipdirection = yes
						block "datamodel_wrap" {
							datamodel_wrap = 2
						}
						
						item = {
							widget = {
								size = { 270 50 }
								visible = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
								tooltip = "[CountryFormation.GetControlsStateRegionDesc(GetMetaPlayer.GetPlayedOrObservedCountry,StateRegion.Self)]"
								
								background = {
									using = entry_bg_simple
								}

								flowcontainer = {
									parentanchor = vcenter
									position = { 10 0 }
									spacing = 8

									icon = {
										visible = "[CountryFormation.ControlsStateRegion(GetMetaPlayer.GetPlayedOrObservedCountry,StateRegion.Self)]"
										parentanchor = vcenter
										texture = "gfx/interface/icons/generic_icons/green_checkmark.dds"
										size = { 30 30 }
									}

									icon = {
										visible = "[Not(CountryFormation.ControlsStateRegion(GetMetaPlayer.GetPlayedOrObservedCountry,StateRegion.Self))]"
										parentanchor = vcenter
										texture = "gfx/interface/icons/generic_icons/red_cross.dds"
										size = { 30 30 }
									}
									
									textbox = {
										parentanchor = vcenter
										align = nobaseline
										using = fontsize_large
										text = "[StateRegion.GetName]"
										autoresize = yes
										max_width = 95
										fontsize_min = 14
										elide = right
									}

								}							
								
								textbox = {
									visible = "[StateRegion.IsSplitState]"
									parentanchor = right|vcenter
									position = { -10 0 }
									align = nobaseline
									using = fontsize_large
									text = "FORM_COUNTRY_SPLIT_STATE"
									autoresize = yes
									max_width = 75
									fontsize_min = 14
									elide = right
								}

								small_flag_no_interact = {
									visible = "[Not(StateRegion.IsSplitState)]"
									datacontext = "[StateRegion.GetLargestStateOwner]"
									parentanchor = right|vcenter
									position = { -10 0 }
								}

								
								widget = {	
									minimumsize = { 270 50 }
									visible = "[Not(GetMetaPlayer.GetPlayedOrObservedCountry.IsValid)]"

									background = {
										using = entry_bg_simple
									}
									
									textbox = {
										parentanchor = vcenter
										position = { 10 0 }
										align = nobaseline
										using = fontsize_large
										text = "[StateRegion.GetName]"
										autoresize = yes
										max_width = 95
										fontsize_min = 14
										elide = right
									}

									textbox = {
										visible = "[StateRegion.IsSplitState]"
										parentanchor = right|vcenter
										position = { -10 0 }
										align = nobaseline
										using = fontsize_large
										text = "FORM_COUNTRY_SPLIT_STATE"
										autoresize = yes
										max_width = 75
										fontsize_min = 14
										elide = right
									}

									small_flag_no_interact = {
										visible = "[Not(StateRegion.IsSplitState)]"
										datacontext = "[StateRegion.GetLargestStateOwner]"
										parentanchor = right|vcenter
										position = { -10 0 }
									}														
								}							
							}
						}
					}
				}
			}
		}
	}
}