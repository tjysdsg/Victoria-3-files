types wargoal_types
{
	type add_wargoal_panel = default_block_window  {
		name = "add_wargoal_panel"
		datacontext = "[AddWarGoalPanel.AccessDiplomaticPlay]"
		
		blockoverride "window_header_name" {
			text = "ADD_WARGOAL_HEADER"
		}

		blockoverride "entire_back_button" {
			back_button_large = {
				position = { 8 30 }
				onclick = "[AddWarGoalPanel.ClearSelectedWarGoalType]"
				input_action = "back"
				visible = "[AddWarGoalPanel.HasSelectedWarGoalType]"
			}

			back_button_large = {
				position = { 8 30 }
				onclick = "[InformationPanelBar.OpenPreviousPanel]"
				input_action = "back"
				visible = "[Not(AddWarGoalPanel.HasSelectedWarGoalType)]"
			}
		}
		
		blockoverride "scrollarea_content" {	
			flowcontainer = {
				direction = vertical
				using = default_list_position
				
				dynamicgridbox = {
					name = "wargoal_selection_list"
					visible = "[AddWarGoalPanel.HasSelectedWarGoalType]"
					datamodel = "[AddWarGoalPanel.AccessShownWarGoals]"

					item = {
						flowcontainer = {
							direction = vertical

							### NORMAL WAR GOAL
							add_wargoal_item = {
								visible = "[Not(WarGoal.HoldsArticle)]"
							}

							### ARTICLE TYPE - NO INPUT
							add_wargoal_item = {
								visible = "[And(WarGoal.HoldsArticle, Not(WarGoal.GetArticleType.RequiresAnyInput))]"

								### Overriding tooltip to add the AticleDraft EffectsDesc for no-input Articles
								blockoverride "war_goal_tooltip" {
									tooltipwidget = {
										RegularTooltip_WarGoal = {
											blockoverride "can_add_text" {
												custom_tooltip_textbox = {
													visible = "[Not(StringIsEmpty(AddWarGoalPanel.GetDiplomaticPlay.GetCanAddWarGoalDesc( WarGoal.Self )))]"
													max_width = 450
													text = "[AddWarGoalPanel.GetDiplomaticPlay.GetCanAddWarGoalDesc( WarGoal.Self )]"
												}
											}

											blockoverride "infamy" {
												custom_tooltip_textbox = {
													visible = "[GreaterThan_CFixedPoint(WarGoal.GetInfamyAmount, '(CFixedPoint)0')]"
													tooltip = "WARGOAL_INFAMY_TOOLTIP"
													text = "WARGOAL_INFAMY_WITH_LABEL"
												}
											}

											blockoverride "maneuver_cost" {
												custom_tooltip_textbox_with_empty_line = {
													tooltip = "ADD_ARTICLE_WARGOAL_MANEUVERS_COST_TOOLTIP"
													text = "ADD_WARGOAL_MANEUVERS_COST_WITH_LABEL"
												}
											}

											blockoverride "primary_secondary_demand_text_visibility" {
												visible = no
											}
											
											blockoverride "war_goal_desc" {
												custom_tooltip_textbox = {
													margin_left = 10
													text = "[WarGoal.GetArticleDraft.GetEffectsDesc]"
												}
											}
										}
									}
								}
							}

							### ARTICLE TYPE - NEEDS INPUT
							add_wargoal_item = {
								visible = "[And(WarGoal.HoldsArticle, WarGoal.GetArticleType.RequiresAnyInput)]"
								
								blockoverride "war_goal_tooltip" {
									tooltip = "ARTICLE_WARGOAL_SELECT_INPUT_TOOLTIP"
								}
								
								blockoverride "maneuvers_and_infamy" {}						

								blockoverride "button_style" {
									using = default_button
								}

								blockoverride "onclick_properties" {
									onclick = "[RightClickMenuManager.ToggleWarGoalArticleTypeInput(WarGoal.Self, PdxGuiWidget.AccessSelf, 'article_input_right_click_menu_right')]"
								}
							}
						}
					}
				}
				
				dynamicgridbox = {
					name = "wargoal_type_selection_list"
					visible = "[Not(AddWarGoalPanel.HasSelectedWarGoalType)]"
					datamodel = "[AddWarGoalPanel.AccessShownWarGoalTypes]"
				
					item = {
						add_wargoal_type_item = {}
					}
				}

				empty_state = {
					parentanchor = vcenter
					blockoverride "visible" {
						visible = "[IsDataModelEmpty(AddWarGoalPanel.AccessShownWarGoalTypes)]"
					}
					blockoverride "text" {
						text = "NO_VALID_WAR_GOALS"
					}
				}

			}			
		}
	}

	### CHECKMARK ANIMATION
	type wargoal_checkmark = icon {
		texture = "gfx/interface/icons/generic_icons/checkmark.dds"
		visible = "[Or( WarGoal.IsPressedInShownPeaceDeal( GetPlayer ), WarGoal.IsExecuted )]"
		size = { 45 45 }
		block "position" {
			position = { -15 15 }
		}
		alwaystransparent = yes
		parentanchor = right
		widgetanchor = center
		scale = 0.7
		
		state = {
			name = _show
			next = a
			scale = 0.7
			duration = 0
		}
		state = {
			name = a
			next = b
			scale = 1
			duration = 0.05
			using = Animation_Curve_Default
		}
		state = {
			name = b
			scale = 0.7
			duration = 0.1
			using = Animation_Curve_Default
		}

		using = shimmer
	}

	### WARGOAL
	type wargoal_item = container {
		parentanchor = hcenter
		onmousehierarchyenter = "[WarGoal.ShowHighlight]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		alwaystransparent = no

		block "war_goal_tooltip" {
			tooltipwidget = {
				RegularTooltip_WarGoal = {}
			}
		}
		
		### PRESSED
		container = {
			visible = "[WarGoal.IsPressedInShownPeaceDeal( GetPlayer )]"
			minimumsize = { 220 62 }
			maximumsize = { 220 -1 }
			
			background = {
				using = entry_bg
				visible = "[Not(IsValid( WarGoal.ToggleIsPressedInPotentialPeaceDeal( GetPlayer.Self ) ))]"
			}
			
			button = {
				enabled = "[WarGoal.IsValid]"
				onclick = "[Execute( WarGoal.ToggleIsPressedInPotentialPeaceDeal( GetPlayer.Self ) )]"
				visible = "[IsValid( WarGoal.ToggleIsPressedInPotentialPeaceDeal( GetPlayer.Self ) )]"		
				using = default_button
				size = { 100% 100% }

				icon = {
					visible = no
					#todo add the below visible state instead when PRCAL-17690 is done:
		 			#visible = "[WarGoal.IsBeingHighlighted]"
		  			using = highlighted_square_selection
		  		}
			}

			flowcontainer = {
				direction = vertical
				margin_top = 5
				margin_bottom = 5
				parentanchor = center
			
				flowcontainer = {
					spacing = 10
					parentanchor = hcenter

					tiny_flag_no_interact = {
						parentanchor = vcenter
						datacontext = "[WarGoal.GetHolder]"
						blockoverride "tooltip" {}
					}

					icon = {
						parentanchor = vcenter
						size = { 30 30 }
						texture = "[WarGoal.GetTexture]"
					}

					tiny_flag_no_interact = {
						parentanchor = vcenter
						datacontext = "[WarGoal.GetTarget]"
						blockoverride "tooltip" {}
					}
				}

				textbox = {
					parentanchor = hcenter
					minimumsize = { 190 -1 }
					maximumsize = { 190 -1 }
					align = hcenter|nobaseline
					multiline = yes
					autoresize = yes
					text = "[WarGoal.GetName]"
				}
			}
		}
		
		### UNPRESSED
		container = {
			visible = "[Not(WarGoal.IsPressedInShownPeaceDeal( GetPlayer ))]"
			minimumsize = { 220 55 }
			maximumsize = { 220 -1 }
			alpha = 0.75
			
			background = {
				using = entry_bg
				visible = "[Not(IsValid( WarGoal.ToggleIsPressedInPotentialPeaceDeal( GetPlayer.Self) ))]"
			}
			
			button = {
				enabled = "[WarGoal.IsValid]"
				onclick = "[Execute( WarGoal.ToggleIsPressedInPotentialPeaceDeal( GetPlayer.Self ) )]"
				visible = "[IsValid( WarGoal.ToggleIsPressedInPotentialPeaceDeal( GetPlayer.Self ) )]"		
				using = default_button
				size = { 100% 100% }

				icon = {
					visible = no
					#todo add the below visible state instead when PRCAL-17690 is done:
		 			#visible = "[WarGoal.IsBeingHighlighted]"
		  			using = highlighted_square_selection
		  		}
			}
			
			flowcontainer = {
				direction = vertical
				margin_top = 5
				margin_bottom = 5
				parentanchor = center
			
				flowcontainer = {
					spacing = 10
					parentanchor = hcenter

					tiny_flag_no_interact = {
						parentanchor = vcenter
						datacontext = "[WarGoal.GetHolder]"
						blockoverride "tooltip" {}
					}

					icon = {
						parentanchor = vcenter
						size = { 30 30 }
						texture = "[WarGoal.GetTexture]"
					}

					tiny_flag_no_interact = {
						parentanchor = vcenter
						datacontext = "[WarGoal.GetTarget]"
						blockoverride "tooltip" {}
					}
				}
				
				textbox = {
					parentanchor = hcenter
					minimumsize = { 190 -1 }
					maximumsize = { 190 -1 }
					align = hcenter|nobaseline
					multiline = yes
					autoresize = yes
					text = "[WarGoal.GetName]"
				}
			}
		}
		
		wargoal_checkmark = {}
	}

	### SMALL WARGOAL
	type small_wargoal_item = flowcontainer {
		minimumsize = { 170 40 }
		maximumsize = { 170 -1 }
		direction = vertical
		margin_top = 5
		margin_bottom = 5
		onmousehierarchyenter = "[WarGoal.ShowHighlight]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		alwaystransparent = no

		block "war_goal_tooltip" {
			tooltipwidget = {
				RegularTooltip_WarGoal = {}
			}
		}
		
		background = {
			using = entry_bg_simple	
		}
		
		flowcontainer = {
			spacing = 10
			parentanchor = hcenter
			
			icon = {
				size = { 30 30 }
				texture = "[WarGoal.GetTexture]"
				parentanchor = left|vcenter
				widgetanchor = left|vcenter
			}
			
			tiny_flag = {
				parentanchor = left|vcenter
				widgetanchor = left|vcenter
				datacontext = "[WarGoal.GetHolder]"
			}
		}
				
		textbox = {
			multiline = yes
			autoresize = yes
			minimumsize = { 150 -1 }
			maximumsize = { 150 -1 }
			raw_text = "#BOLD [WarGoal.GetName]#!"
			align = center|nobaseline
			parentanchor = hcenter
		}
	}

	### SMALL WARGOAL WITH CHECKMARK
	type small_wargoal_item_with_checkmark = container {
		small_wargoal_item = {}
		wargoal_checkmark = {}
	}
	
	### ADD WARGOAL
	type add_wargoal_item = button {
		using = add_war_goal_button_sound
		onmousehierarchyenter = "[WarGoal.ShowHighlight]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		alwaystransparent = no

		block "war_goal_tooltip" {
			tooltipwidget = {
				RegularTooltip_WarGoal = {
					blockoverride "can_add_text" {
						custom_tooltip_textbox = {
							visible = "[Not(StringIsEmpty(AddWarGoalPanel.GetDiplomaticPlay.GetCanAddWarGoalDesc( WarGoal.Self )))]"
							max_width = 450
							text = "[AddWarGoalPanel.GetDiplomaticPlay.GetCanAddWarGoalDesc( WarGoal.Self )]"
						}
					}

					blockoverride "infamy" {
						custom_tooltip_textbox = {
							visible = "[GreaterThan_CFixedPoint(WarGoal.GetInfamyAmount, '(CFixedPoint)0')]"
							tooltip = "WARGOAL_INFAMY_TOOLTIP"
							text = "WARGOAL_INFAMY_WITH_LABEL"
						}
					}

					blockoverride "maneuver_cost" {
						custom_tooltip_textbox_with_empty_line = {
							tooltip = "ADD_WARGOAL_MANEUVERS_COST_TOOLTIP"
							text = "ADD_WARGOAL_MANEUVERS_COST_WITH_LABEL"
						}
					}

					blockoverride "primary_secondary_demand_text_visibility" {
						visible = no
					}
				}
			}
		}
		
		block "button_style" {
			using = default_button_action
		}
		
		block "onclick_properties" {
			onclick = "[Execute( AddWarGoalPanel.AccessDiplomaticPlay.AddWarGoal( WarGoal.Self ) )]"
			onclick = "[InformationPanelBar.OpenPreviousPanel]"
			enabled = "[IsValid( AddWarGoalPanel.AccessDiplomaticPlay.AddWarGoal( WarGoal.Self ) )]"
		}

		container = {
			resizeparent = yes
			minimumsize = { 550 60 }
					
			small_flag = {
				position = { 10 0 }
				datacontext = "[WarGoal.GetTarget]"
				parentanchor = vcenter
			}

			icon = {
				visible = "[WarGoal.HoldsArticle]"
				size = { 50 50 }
				parentanchor = vcenter
				position = { 70 0 }
				texture = "[WarGoal.GetArticleType.GetIcon]"
			}

			icon = {
				visible = "[Not(WarGoal.HoldsArticle)]"
				size = { 50 50 }
				parentanchor = vcenter
				position = { 70 0 }
				texture = "[WarGoal.GetTexture]"
			}
			
			flowcontainer = {
				position = { -15 0 }
				parentanchor = right|vcenter
				spacing = 10

				block "maneuvers_and_infamy" {
					flowcontainer = {
						direction = horizontal
						parentanchor = vcenter		
							
						textbox = {				
							visible = "[GreaterThan_CFixedPoint(WarGoal.GetInfamyAmount, '(CFixedPoint)0')]"
							using = fontsize_large
							autoresize = yes
							maximumsize = { 100 -1 }
							minimumsize = { 60 -1 }
							multiline = yes
							parentanchor = vcenter
							align = right|nobaseline				
							text = "WARGOAL_INFAMY"
						}	

						textbox = {
							using = fontsize_large
							autoresize = yes
							maximumsize = { 100 -1 }
							minimumsize = { 60 -1 }
							multiline = yes
							margin_left = 10
							parentanchor = vcenter
							align = right|nobaseline
							text = "ADD_WARGOAL_MANEUVERS_COST"
						}				
					}
				}				

				flag_icon = {
					visible = "[WarGoal.HasCountryCreation]"
					size = { 48 32 }
					framesize = "[GetSmallFlagFrameSize]"
					parentanchor = vcenter
					onmousehierarchyenter = "[AccessHighlightManager.HighlightCountryFormation(WarGoal.GetCountryCreation.Self)]"
					onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
					alwaystransparent = no
					
					blockoverride "flag_tooltip" {}
					
					block "flag_definition" {			
						texture = "[WarGoal.GetCountryCreation.GetDefinition.GetFlag('release').GetSmallFlagTexture]"
						frame = "[WarGoal.GetCountryCreation.GetDefinition.GetFlag('release').GetSmallFlagFrame]"			
					}
				}
			}


			textbox = {
				position = { 125 0 }
				using = fontsize_large
				parentanchor = left|vcenter
				align = nobaseline
				using = elide_fontsize_min
				maximumsize = { 260 -1 }
				autoresize = yes
				multiline = yes
				text = "[WarGoal.GetName]"
			}
		}
	}
	
	### ADD WARGOAL TYPE
	type add_wargoal_type_item = button {
		onclick = "[AddWarGoalPanel.SetSelectedWarGoalType(WarGoalType.Self)]"
	    tooltip = "[WarGoalType.GetDesc]"
		using = default_button

		container = {
			resizeparent = yes
			minimumsize = { 550 60 }

			icon = {
				position = { 10 0 }
				size = { 50 50 }
				texture = "[WarGoalType.GetTexture]"
				parentanchor = left|vcenter
				widgetanchor = left|vcenter
			}

			textbox = {
				position = { 70 0 }
				using = fontsize_large
				parentanchor = left|vcenter
				align = left|nobaseline
				text = "[WarGoalType.GetName]"
				autoresize = yes
				maximumsize = { 440 -1 }
				multiline = yes
			}
		}
	}
}
