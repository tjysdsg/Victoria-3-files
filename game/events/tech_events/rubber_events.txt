namespace = rubber_events

# You move rubber to a new state
rubber_events.1 = {
	type = state_event
	placement = ROOT

	event_image = {
		video = "rp1_amazon_exploitation"
	}

	on_created_soundeffect = "event:/SFX/UI/Alerts/event_appear"

	icon = "gfx/interface/icons/event_icons/event_industry.dds"

	title = rubber_events.1.t
	desc = rubber_events.1.d
	flavor = rubber_events.1.f

	duration = 3

	cooldown = { days = never_fire_again_modifier_time } #cooldown for state. Rubber can only be transplanted "for the first time" once.
	trigger = {
		has_potential_resource = bg_rubber
		NOT = { region = sr:region_brazil }
		state_region = {
			remaining_undepleted = {
				type = bg_rubber
				amount > 1
			}
		}
		owner = {
			NOT = { #cooldown
				has_variable = rubber_rush_event_var
			}
			NOR = { #auto-fire event triggers
					has_variable = rubber_always_spread
					has_variable = rubber_always_concentrate
			}
		}
	}

	immediate = {
		save_scope_as = rubber_state
		owner = {
			set_variable = { name = rubber_rush_event_var days = very_long_modifier_time } #national cooldown. Rubber rushes are no longer so frequent.
		}
		owner = {
			ordered_scope_state = {
				limit = {
					has_building = building_rubber_plantation
				}
				order_by = b:building_rubber_plantation.level
				save_scope_as = rubber_centre
				b:building_rubber_plantation = {
					save_scope_as = rubber_plantation
				}
			}
		}
	}

	option = { #plant more rubber here
		name = rubber_events.1.a
		default_option = yes
		scope:rubber_state = {
			force_resource_discovery = bg_rubber
		}
		add_modifier = {
			name = state_rubber_modifier
			days = long_modifier_time
		}
	}

	option = { #focus on the existing rubber nexus
		name = rubber_events.1.b
		trigger = {
			owner = {
				exists = scope:rubber_centre
				scope:rubber_centre = {
					has_building = building_rubber_plantation
				}
			}
		}
		scope:rubber_state = {
			force_resource_discovery = bg_rubber
		}
		owner = {
			scope:rubber_centre = {
				add_modifier = {
					name = state_rubber_nexus_modifier
					days = long_modifier_time
				}
			}
		}
	}

	option = { #always spread rubber
		name = rubber_events.1.c
		trigger = { #Only available if both options are visible or else player may not realise what choice they're making.
			owner = {
				exists = scope:rubber_centre
				scope:rubber_centre = {
					has_building = building_rubber_plantation
				}
			}
		}
		scope:rubber_state = {
			force_resource_discovery = bg_rubber
		}
		add_modifier = {
			name = state_rubber_modifier
			days = long_modifier_time
		}
		custom_tooltip = {
			text = rubber_always_spread_tt
			owner = {
				set_variable = rubber_always_spread
			}
		}
	}

	option = { #Always focus on the existing rubber nexus
		name = rubber_events.1.e
		trigger = {
			owner = {
				exists = scope:rubber_centre
				scope:rubber_centre = {
					has_building = building_rubber_plantation
				}
			}
		}
		scope:rubber_state = {
			force_resource_discovery = bg_rubber
		}
		owner = {
			scope:rubber_centre = {
				add_modifier = {
					name = state_rubber_nexus_modifier
					days = long_modifier_time
				}
			}
		}
		custom_tooltip = {
			text = rubber_always_concentrate_tt
			owner = {
				set_variable = rubber_always_concentrate
			}
		}
	}
}

rubber_events.2 = { #hidden event that does the effects if the player chooses option c or d
	type = state_event
	hidden = yes

	cooldown = { days = never_fire_again_modifier_time } #state cooldown

	trigger = {
		has_potential_resource = bg_rubber
		NOT = { region = sr:region_brazil }
		state_region = {
			remaining_undepleted = {
				type = bg_rubber
				amount > 1
			}
		}
		owner = {
			OR = {
				has_variable = rubber_always_spread
				has_variable = rubber_always_concentrate
			}
			NOT = {
				has_variable = rubber_rush_event_var
			}
		}
	}

	immediate = {
		save_scope_as = rubber_state
		#Notification on on-action or in code.
		owner = {
			set_variable = { name = rubber_rush_event_var days = very_long_modifier_time } #national cooldown. Rubber rushes are no longer so frequent.
		}
		if = {
			limit = {
				owner = {
					has_variable = rubber_always_spread
				}
			}
			force_resource_discovery = bg_rubber
			add_modifier = {
				name = state_rubber_modifier
				days = long_modifier_time
			}
		}
		else = {
			force_resource_discovery = bg_rubber
			owner = {
				ordered_scope_state = {
					limit = {
						has_building = building_rubber_plantation
					}
					order_by = b:building_rubber_plantation.level
					add_modifier = {
						name = state_rubber_nexus_modifier
						days = long_modifier_time
					}
				}
			}
		}
	}
}
